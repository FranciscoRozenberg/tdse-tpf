
tdse-tpf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044fc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c4  08004608  08004608  00005608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067cc  080067cc  00008390  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080067cc  080067cc  000077cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067d4  080067d4  00008390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d4  080067d4  000077d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067d8  080067d8  000077d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000390  20000000  080067dc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  20000390  08006b6c  00008390  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a3c  08006b6c  00008a3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008390  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001052c  00000000  00000000  000083b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002527  00000000  00000000  000188e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  0001ae10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7a  00000000  00000000  0001bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018612  00000000  00000000  0001ca6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c75  00000000  00000000  0003507c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e1ed  00000000  00000000  00049cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7ede  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004888  00000000  00000000  000d7f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000dc7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000390 	.word	0x20000390
 8000128:	00000000 	.word	0x00000000
 800012c:	080045f0 	.word	0x080045f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000394 	.word	0x20000394
 8000148:	080045f0 	.word	0x080045f0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2uiz>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	d20e      	bcs.n	800063a <__aeabi_f2uiz+0x22>
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000620:	d30b      	bcc.n	800063a <__aeabi_f2uiz+0x22>
 8000622:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d409      	bmi.n	8000640 <__aeabi_f2uiz+0x28>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000634:	fa23 f002 	lsr.w	r0, r3, r2
 8000638:	4770      	bx	lr
 800063a:	f04f 0000 	mov.w	r0, #0
 800063e:	4770      	bx	lr
 8000640:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000644:	d101      	bne.n	800064a <__aeabi_f2uiz+0x32>
 8000646:	0242      	lsls	r2, r0, #9
 8000648:	d102      	bne.n	8000650 <__aeabi_f2uiz+0x38>
 800064a:	f04f 30ff 	mov.w	r0, #4294967295
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f000 fb0a 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f80d 	bl	800067e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 f8fc 	bl	8000860 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000668:	f000 f8d0 	bl	800080c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800066c:	f000 f876 	bl	800075c <MX_TIM1_Init>
  MX_I2C1_Init();
 8000670:	f000 f846 	bl	8000700 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 8000674:	f002 feb8 	bl	80033e8 <app_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  app_update();
 8000678:	f002 ff00 	bl	800347c <app_update>
 800067c:	e7fc      	b.n	8000678 <main+0x20>

0800067e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b090      	sub	sp, #64	@ 0x40
 8000682:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000684:	f107 0318 	add.w	r3, r7, #24
 8000688:	2228      	movs	r2, #40	@ 0x28
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f003 fb3b 	bl	8003d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006b4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80006b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 faee 	bl	8001ca0 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006ca:	f000 f937 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2102      	movs	r1, #2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 fd5b 	bl	80021a4 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006f4:	f000 f922 	bl	800093c <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3740      	adds	r7, #64	@ 0x40
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000706:	4a13      	ldr	r2, [pc, #76]	@ (8000754 <MX_I2C1_Init+0x54>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_I2C1_Init+0x50>)
 800070c:	4a12      	ldr	r2, [pc, #72]	@ (8000758 <MX_I2C1_Init+0x58>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_I2C1_Init+0x50>)
 800071e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000722:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	@ (8000750 <MX_I2C1_Init+0x50>)
 800073e:	f000 fe03 	bl	8001348 <HAL_I2C_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000748:	f000 f8f8 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200003ac 	.word	0x200003ac
 8000754:	40005400 	.word	0x40005400
 8000758:	000186a0 	.word	0x000186a0

0800075c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	@ 0x30
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2224      	movs	r2, #36	@ 0x24
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f003 facc 	bl	8003d08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000778:	4b22      	ldr	r3, [pc, #136]	@ (8000804 <MX_TIM1_Init+0xa8>)
 800077a:	4a23      	ldr	r2, [pc, #140]	@ (8000808 <MX_TIM1_Init+0xac>)
 800077c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800077e:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <MX_TIM1_Init+0xa8>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000784:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <MX_TIM1_Init+0xa8>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800078a:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <MX_TIM1_Init+0xa8>)
 800078c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000790:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000792:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <MX_TIM1_Init+0xa8>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000798:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <MX_TIM1_Init+0xa8>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079e:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <MX_TIM1_Init+0xa8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007ac:	2301      	movs	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007bc:	2301      	movs	r3, #1
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	4619      	mov	r1, r3
 80007ce:	480d      	ldr	r0, [pc, #52]	@ (8000804 <MX_TIM1_Init+0xa8>)
 80007d0:	f001 fe76 	bl	80024c0 <HAL_TIM_Encoder_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80007da:	f000 f8af 	bl	800093c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	@ (8000804 <MX_TIM1_Init+0xa8>)
 80007ec:	f002 f82a 	bl	8002844 <HAL_TIMEx_MasterConfigSynchronization>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80007f6:	f000 f8a1 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3730      	adds	r7, #48	@ 0x30
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000400 	.word	0x20000400
 8000808:	40012c00 	.word	0x40012c00

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	@ (800085c <MX_USART2_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000844:	f002 f85c 	bl	8002900 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f875 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000448 	.word	0x20000448
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000874:	4b2d      	ldr	r3, [pc, #180]	@ (800092c <MX_GPIO_Init+0xcc>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a2c      	ldr	r2, [pc, #176]	@ (800092c <MX_GPIO_Init+0xcc>)
 800087a:	f043 0310 	orr.w	r3, r3, #16
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b2a      	ldr	r3, [pc, #168]	@ (800092c <MX_GPIO_Init+0xcc>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0310 	and.w	r3, r3, #16
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088c:	4b27      	ldr	r3, [pc, #156]	@ (800092c <MX_GPIO_Init+0xcc>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a26      	ldr	r2, [pc, #152]	@ (800092c <MX_GPIO_Init+0xcc>)
 8000892:	f043 0320 	orr.w	r3, r3, #32
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b24      	ldr	r3, [pc, #144]	@ (800092c <MX_GPIO_Init+0xcc>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0320 	and.w	r3, r3, #32
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	4b21      	ldr	r3, [pc, #132]	@ (800092c <MX_GPIO_Init+0xcc>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a20      	ldr	r2, [pc, #128]	@ (800092c <MX_GPIO_Init+0xcc>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <MX_GPIO_Init+0xcc>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008bc:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <MX_GPIO_Init+0xcc>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a1a      	ldr	r2, [pc, #104]	@ (800092c <MX_GPIO_Init+0xcc>)
 80008c2:	f043 0308 	orr.w	r3, r3, #8
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b18      	ldr	r3, [pc, #96]	@ (800092c <MX_GPIO_Init+0xcc>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0308 	and.w	r3, r3, #8
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2120      	movs	r1, #32
 80008d8:	4815      	ldr	r0, [pc, #84]	@ (8000930 <MX_GPIO_Init+0xd0>)
 80008da:	f000 fcfa 	bl	80012d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e4:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <MX_GPIO_Init+0xd4>)
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	4811      	ldr	r0, [pc, #68]	@ (8000938 <MX_GPIO_Init+0xd8>)
 80008f4:	f000 fb52 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008f8:	2320      	movs	r3, #32
 80008fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2302      	movs	r3, #2
 8000906:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	4619      	mov	r1, r3
 800090e:	4808      	ldr	r0, [pc, #32]	@ (8000930 <MX_GPIO_Init+0xd0>)
 8000910:	f000 fb44 	bl	8000f9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	2028      	movs	r0, #40	@ 0x28
 800091a:	f000 fb08 	bl	8000f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800091e:	2028      	movs	r0, #40	@ 0x28
 8000920:	f000 fb21 	bl	8000f66 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40021000 	.word	0x40021000
 8000930:	40010800 	.word	0x40010800
 8000934:	10110000 	.word	0x10110000
 8000938:	40011000 	.word	0x40011000

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <Error_Handler+0x8>

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800094e:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <HAL_MspInit+0x5c>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a14      	ldr	r2, [pc, #80]	@ (80009a4 <HAL_MspInit+0x5c>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <HAL_MspInit+0x5c>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <HAL_MspInit+0x5c>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	4a0e      	ldr	r2, [pc, #56]	@ (80009a4 <HAL_MspInit+0x5c>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000970:	61d3      	str	r3, [r2, #28]
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <HAL_MspInit+0x5c>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800097e:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <HAL_MspInit+0x60>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	4a04      	ldr	r2, [pc, #16]	@ (80009a8 <HAL_MspInit+0x60>)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010000 	.word	0x40010000

080009ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	@ 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a3c <HAL_I2C_MspInit+0x90>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d132      	bne.n	8000a32 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <HAL_I2C_MspInit+0x94>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a40 <HAL_I2C_MspInit+0x94>)
 80009d2:	f043 0308 	orr.w	r3, r3, #8
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <HAL_I2C_MspInit+0x94>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0308 	and.w	r3, r3, #8
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ea:	2312      	movs	r3, #18
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4812      	ldr	r0, [pc, #72]	@ (8000a44 <HAL_I2C_MspInit+0x98>)
 80009fa:	f000 facf 	bl	8000f9c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80009fe:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_I2C_MspInit+0x9c>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a06:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0e:	f043 0302 	orr.w	r3, r3, #2
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a14:	4a0c      	ldr	r2, [pc, #48]	@ (8000a48 <HAL_I2C_MspInit+0x9c>)
 8000a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a18:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <HAL_I2C_MspInit+0x94>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	4a08      	ldr	r2, [pc, #32]	@ (8000a40 <HAL_I2C_MspInit+0x94>)
 8000a20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a24:	61d3      	str	r3, [r2, #28]
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_I2C_MspInit+0x94>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	@ 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40010c00 	.word	0x40010c00
 8000a48:	40010000 	.word	0x40010000

08000a4c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a16      	ldr	r2, [pc, #88]	@ (8000ac0 <HAL_TIM_Encoder_MspInit+0x74>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d124      	bne.n	8000ab6 <HAL_TIM_Encoder_MspInit+0x6a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <HAL_TIM_Encoder_MspInit+0x78>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a14      	ldr	r2, [pc, #80]	@ (8000ac4 <HAL_TIM_Encoder_MspInit+0x78>)
 8000a72:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <HAL_TIM_Encoder_MspInit+0x78>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <HAL_TIM_Encoder_MspInit+0x78>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac4 <HAL_TIM_Encoder_MspInit+0x78>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <HAL_TIM_Encoder_MspInit+0x78>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a9c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000aa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000ab2:	f000 fa73 	bl	8000f9c <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000ab6:	bf00      	nop
 8000ab8:	3720      	adds	r7, #32
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40012c00 	.word	0x40012c00
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40010800 	.word	0x40010800

08000acc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a15      	ldr	r2, [pc, #84]	@ (8000b3c <HAL_UART_MspInit+0x70>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d123      	bne.n	8000b34 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aec:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <HAL_UART_MspInit+0x74>)
 8000aee:	69db      	ldr	r3, [r3, #28]
 8000af0:	4a13      	ldr	r2, [pc, #76]	@ (8000b40 <HAL_UART_MspInit+0x74>)
 8000af2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af6:	61d3      	str	r3, [r2, #28]
 8000af8:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <HAL_UART_MspInit+0x74>)
 8000afa:	69db      	ldr	r3, [r3, #28]
 8000afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <HAL_UART_MspInit+0x74>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a0d      	ldr	r2, [pc, #52]	@ (8000b40 <HAL_UART_MspInit+0x74>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b0b      	ldr	r3, [pc, #44]	@ (8000b40 <HAL_UART_MspInit+0x74>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0304 	and.w	r3, r3, #4
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <HAL_UART_MspInit+0x78>)
 8000b30:	f000 fa34 	bl	8000f9c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b34:	bf00      	nop
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40004400 	.word	0x40004400
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40010800 	.word	0x40010800

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <NMI_Handler+0x4>

08000b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <MemManage_Handler+0x4>

08000b60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b98:	f000 f8b2 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ba4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ba8:	f000 fbac 	bl	8001304 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	@ (8000c0c <_sbrk+0x5c>)
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <_sbrk+0x60>)
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <_sbrk+0x64>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	@ (8000c18 <_sbrk+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d207      	bcs.n	8000bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be0:	f003 f89a 	bl	8003d18 <__errno>
 8000be4:	4603      	mov	r3, r0
 8000be6:	220c      	movs	r2, #12
 8000be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	e009      	b.n	8000c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a05      	ldr	r2, [pc, #20]	@ (8000c14 <_sbrk+0x64>)
 8000c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20005000 	.word	0x20005000
 8000c10:	00000400 	.word	0x00000400
 8000c14:	20000490 	.word	0x20000490
 8000c18:	20000a40 	.word	0x20000a40

08000c1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c28:	f7ff fff8 	bl	8000c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c2c:	480b      	ldr	r0, [pc, #44]	@ (8000c5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c2e:	490c      	ldr	r1, [pc, #48]	@ (8000c60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c30:	4a0c      	ldr	r2, [pc, #48]	@ (8000c64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a09      	ldr	r2, [pc, #36]	@ (8000c68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c44:	4c09      	ldr	r4, [pc, #36]	@ (8000c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c52:	f003 f867 	bl	8003d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c56:	f7ff fcff 	bl	8000658 <main>
  bx lr
 8000c5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000390 	.word	0x20000390
  ldr r2, =_sidata
 8000c64:	080067dc 	.word	0x080067dc
  ldr r2, =_sbss
 8000c68:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 8000c6c:	20000a3c 	.word	0x20000a3c

08000c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC1_2_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <HAL_Init+0x28>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	@ (8000c9c <HAL_Init+0x28>)
 8000c7e:	f043 0310 	orr.w	r3, r3, #16
 8000c82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f947 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f000 f808 	bl	8000ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff fe5a 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40022000 	.word	0x40022000

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <HAL_InitTick+0x54>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <HAL_InitTick+0x58>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f95f 	bl	8000f82 <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00e      	b.n	8000cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d80a      	bhi.n	8000cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f000 f927 	bl	8000f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	@ (8000cfc <HAL_InitTick+0x5c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <HAL_IncTick+0x1c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <HAL_IncTick+0x20>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a03      	ldr	r2, [pc, #12]	@ (8000d20 <HAL_IncTick+0x20>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000494 	.word	0x20000494

08000d24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b02      	ldr	r3, [pc, #8]	@ (8000d34 <HAL_GetTick+0x10>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	20000494 	.word	0x20000494

08000d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d40:	f7ff fff0 	bl	8000d24 <HAL_GetTick>
 8000d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d50:	d005      	beq.n	8000d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <HAL_Delay+0x44>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d5e:	bf00      	nop
 8000d60:	f7ff ffe0 	bl	8000d24 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d8f7      	bhi.n	8000d60 <HAL_Delay+0x28>
  {
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	db0b      	blt.n	8000e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	f003 021f 	and.w	r2, r3, #31
 8000dfc:	4906      	ldr	r1, [pc, #24]	@ (8000e18 <__NVIC_EnableIRQ+0x34>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	2001      	movs	r0, #1
 8000e06:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	@ (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	@ (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	@ 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
         );
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	@ 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee4:	d301      	bcc.n	8000eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00f      	b.n	8000f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eea:	4a0a      	ldr	r2, [pc, #40]	@ (8000f14 <SysTick_Config+0x40>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f7ff ff90 	bl	8000e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <SysTick_Config+0x40>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <SysTick_Config+0x40>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff2d 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f40:	f7ff ff42 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f7ff ff90 	bl	8000e70 <NVIC_EncodePriority>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff5f 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff35 	bl	8000de4 <__NVIC_EnableIRQ>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffa2 	bl	8000ed4 <SysTick_Config>
 8000f90:	4603      	mov	r3, r0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b08b      	sub	sp, #44	@ 0x2c
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fae:	e169      	b.n	8001284 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	69fa      	ldr	r2, [r7, #28]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	f040 8158 	bne.w	800127e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	4a9a      	ldr	r2, [pc, #616]	@ (800123c <HAL_GPIO_Init+0x2a0>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d05e      	beq.n	8001096 <HAL_GPIO_Init+0xfa>
 8000fd8:	4a98      	ldr	r2, [pc, #608]	@ (800123c <HAL_GPIO_Init+0x2a0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d875      	bhi.n	80010ca <HAL_GPIO_Init+0x12e>
 8000fde:	4a98      	ldr	r2, [pc, #608]	@ (8001240 <HAL_GPIO_Init+0x2a4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d058      	beq.n	8001096 <HAL_GPIO_Init+0xfa>
 8000fe4:	4a96      	ldr	r2, [pc, #600]	@ (8001240 <HAL_GPIO_Init+0x2a4>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d86f      	bhi.n	80010ca <HAL_GPIO_Init+0x12e>
 8000fea:	4a96      	ldr	r2, [pc, #600]	@ (8001244 <HAL_GPIO_Init+0x2a8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d052      	beq.n	8001096 <HAL_GPIO_Init+0xfa>
 8000ff0:	4a94      	ldr	r2, [pc, #592]	@ (8001244 <HAL_GPIO_Init+0x2a8>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d869      	bhi.n	80010ca <HAL_GPIO_Init+0x12e>
 8000ff6:	4a94      	ldr	r2, [pc, #592]	@ (8001248 <HAL_GPIO_Init+0x2ac>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d04c      	beq.n	8001096 <HAL_GPIO_Init+0xfa>
 8000ffc:	4a92      	ldr	r2, [pc, #584]	@ (8001248 <HAL_GPIO_Init+0x2ac>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d863      	bhi.n	80010ca <HAL_GPIO_Init+0x12e>
 8001002:	4a92      	ldr	r2, [pc, #584]	@ (800124c <HAL_GPIO_Init+0x2b0>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d046      	beq.n	8001096 <HAL_GPIO_Init+0xfa>
 8001008:	4a90      	ldr	r2, [pc, #576]	@ (800124c <HAL_GPIO_Init+0x2b0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d85d      	bhi.n	80010ca <HAL_GPIO_Init+0x12e>
 800100e:	2b12      	cmp	r3, #18
 8001010:	d82a      	bhi.n	8001068 <HAL_GPIO_Init+0xcc>
 8001012:	2b12      	cmp	r3, #18
 8001014:	d859      	bhi.n	80010ca <HAL_GPIO_Init+0x12e>
 8001016:	a201      	add	r2, pc, #4	@ (adr r2, 800101c <HAL_GPIO_Init+0x80>)
 8001018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101c:	08001097 	.word	0x08001097
 8001020:	08001071 	.word	0x08001071
 8001024:	08001083 	.word	0x08001083
 8001028:	080010c5 	.word	0x080010c5
 800102c:	080010cb 	.word	0x080010cb
 8001030:	080010cb 	.word	0x080010cb
 8001034:	080010cb 	.word	0x080010cb
 8001038:	080010cb 	.word	0x080010cb
 800103c:	080010cb 	.word	0x080010cb
 8001040:	080010cb 	.word	0x080010cb
 8001044:	080010cb 	.word	0x080010cb
 8001048:	080010cb 	.word	0x080010cb
 800104c:	080010cb 	.word	0x080010cb
 8001050:	080010cb 	.word	0x080010cb
 8001054:	080010cb 	.word	0x080010cb
 8001058:	080010cb 	.word	0x080010cb
 800105c:	080010cb 	.word	0x080010cb
 8001060:	08001079 	.word	0x08001079
 8001064:	0800108d 	.word	0x0800108d
 8001068:	4a79      	ldr	r2, [pc, #484]	@ (8001250 <HAL_GPIO_Init+0x2b4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d013      	beq.n	8001096 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800106e:	e02c      	b.n	80010ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	623b      	str	r3, [r7, #32]
          break;
 8001076:	e029      	b.n	80010cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	3304      	adds	r3, #4
 800107e:	623b      	str	r3, [r7, #32]
          break;
 8001080:	e024      	b.n	80010cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	3308      	adds	r3, #8
 8001088:	623b      	str	r3, [r7, #32]
          break;
 800108a:	e01f      	b.n	80010cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	330c      	adds	r3, #12
 8001092:	623b      	str	r3, [r7, #32]
          break;
 8001094:	e01a      	b.n	80010cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d102      	bne.n	80010a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800109e:	2304      	movs	r3, #4
 80010a0:	623b      	str	r3, [r7, #32]
          break;
 80010a2:	e013      	b.n	80010cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d105      	bne.n	80010b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ac:	2308      	movs	r3, #8
 80010ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	611a      	str	r2, [r3, #16]
          break;
 80010b6:	e009      	b.n	80010cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b8:	2308      	movs	r3, #8
 80010ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69fa      	ldr	r2, [r7, #28]
 80010c0:	615a      	str	r2, [r3, #20]
          break;
 80010c2:	e003      	b.n	80010cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
          break;
 80010c8:	e000      	b.n	80010cc <HAL_GPIO_Init+0x130>
          break;
 80010ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2bff      	cmp	r3, #255	@ 0xff
 80010d0:	d801      	bhi.n	80010d6 <HAL_GPIO_Init+0x13a>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	e001      	b.n	80010da <HAL_GPIO_Init+0x13e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3304      	adds	r3, #4
 80010da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	2bff      	cmp	r3, #255	@ 0xff
 80010e0:	d802      	bhi.n	80010e8 <HAL_GPIO_Init+0x14c>
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	e002      	b.n	80010ee <HAL_GPIO_Init+0x152>
 80010e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ea:	3b08      	subs	r3, #8
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	210f      	movs	r1, #15
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	401a      	ands	r2, r3
 8001100:	6a39      	ldr	r1, [r7, #32]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	431a      	orrs	r2, r3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 80b1 	beq.w	800127e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800111c:	4b4d      	ldr	r3, [pc, #308]	@ (8001254 <HAL_GPIO_Init+0x2b8>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a4c      	ldr	r2, [pc, #304]	@ (8001254 <HAL_GPIO_Init+0x2b8>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b4a      	ldr	r3, [pc, #296]	@ (8001254 <HAL_GPIO_Init+0x2b8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001134:	4a48      	ldr	r2, [pc, #288]	@ (8001258 <HAL_GPIO_Init+0x2bc>)
 8001136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001140:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	220f      	movs	r2, #15
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	4013      	ands	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a40      	ldr	r2, [pc, #256]	@ (800125c <HAL_GPIO_Init+0x2c0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d013      	beq.n	8001188 <HAL_GPIO_Init+0x1ec>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a3f      	ldr	r2, [pc, #252]	@ (8001260 <HAL_GPIO_Init+0x2c4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d00d      	beq.n	8001184 <HAL_GPIO_Init+0x1e8>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a3e      	ldr	r2, [pc, #248]	@ (8001264 <HAL_GPIO_Init+0x2c8>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d007      	beq.n	8001180 <HAL_GPIO_Init+0x1e4>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a3d      	ldr	r2, [pc, #244]	@ (8001268 <HAL_GPIO_Init+0x2cc>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d101      	bne.n	800117c <HAL_GPIO_Init+0x1e0>
 8001178:	2303      	movs	r3, #3
 800117a:	e006      	b.n	800118a <HAL_GPIO_Init+0x1ee>
 800117c:	2304      	movs	r3, #4
 800117e:	e004      	b.n	800118a <HAL_GPIO_Init+0x1ee>
 8001180:	2302      	movs	r3, #2
 8001182:	e002      	b.n	800118a <HAL_GPIO_Init+0x1ee>
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <HAL_GPIO_Init+0x1ee>
 8001188:	2300      	movs	r3, #0
 800118a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800118c:	f002 0203 	and.w	r2, r2, #3
 8001190:	0092      	lsls	r2, r2, #2
 8001192:	4093      	lsls	r3, r2
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800119a:	492f      	ldr	r1, [pc, #188]	@ (8001258 <HAL_GPIO_Init+0x2bc>)
 800119c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119e:	089b      	lsrs	r3, r3, #2
 80011a0:	3302      	adds	r3, #2
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d006      	beq.n	80011c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011b4:	4b2d      	ldr	r3, [pc, #180]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	492c      	ldr	r1, [pc, #176]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	608b      	str	r3, [r1, #8]
 80011c0:	e006      	b.n	80011d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011c2:	4b2a      	ldr	r3, [pc, #168]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	4928      	ldr	r1, [pc, #160]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 80011cc:	4013      	ands	r3, r2
 80011ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d006      	beq.n	80011ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011dc:	4b23      	ldr	r3, [pc, #140]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	4922      	ldr	r1, [pc, #136]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	60cb      	str	r3, [r1, #12]
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011ea:	4b20      	ldr	r3, [pc, #128]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	491e      	ldr	r1, [pc, #120]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d006      	beq.n	8001212 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001204:	4b19      	ldr	r3, [pc, #100]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4918      	ldr	r1, [pc, #96]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001212:	4b16      	ldr	r3, [pc, #88]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	43db      	mvns	r3, r3
 800121a:	4914      	ldr	r1, [pc, #80]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 800121c:	4013      	ands	r3, r2
 800121e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d021      	beq.n	8001270 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800122c:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	490e      	ldr	r1, [pc, #56]	@ (800126c <HAL_GPIO_Init+0x2d0>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	600b      	str	r3, [r1, #0]
 8001238:	e021      	b.n	800127e <HAL_GPIO_Init+0x2e2>
 800123a:	bf00      	nop
 800123c:	10320000 	.word	0x10320000
 8001240:	10310000 	.word	0x10310000
 8001244:	10220000 	.word	0x10220000
 8001248:	10210000 	.word	0x10210000
 800124c:	10120000 	.word	0x10120000
 8001250:	10110000 	.word	0x10110000
 8001254:	40021000 	.word	0x40021000
 8001258:	40010000 	.word	0x40010000
 800125c:	40010800 	.word	0x40010800
 8001260:	40010c00 	.word	0x40010c00
 8001264:	40011000 	.word	0x40011000
 8001268:	40011400 	.word	0x40011400
 800126c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001270:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <HAL_GPIO_Init+0x304>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	43db      	mvns	r3, r3
 8001278:	4909      	ldr	r1, [pc, #36]	@ (80012a0 <HAL_GPIO_Init+0x304>)
 800127a:	4013      	ands	r3, r2
 800127c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	3301      	adds	r3, #1
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128a:	fa22 f303 	lsr.w	r3, r2, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	f47f ae8e 	bne.w	8000fb0 <HAL_GPIO_Init+0x14>
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	372c      	adds	r7, #44	@ 0x2c
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	40010400 	.word	0x40010400

080012a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012bc:	2301      	movs	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	e001      	b.n	80012c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	460b      	mov	r3, r1
 80012dc:	807b      	strh	r3, [r7, #2]
 80012de:	4613      	mov	r3, r2
 80012e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012e2:	787b      	ldrb	r3, [r7, #1]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e8:	887a      	ldrh	r2, [r7, #2]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012ee:	e003      	b.n	80012f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012f0:	887b      	ldrh	r3, [r7, #2]
 80012f2:	041a      	lsls	r2, r3, #16
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	611a      	str	r2, [r3, #16]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
	...

08001304 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800130e:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001310:	695a      	ldr	r2, [r3, #20]
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	4013      	ands	r3, r2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d006      	beq.n	8001328 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800131a:	4a05      	ldr	r2, [pc, #20]	@ (8001330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f806 	bl	8001334 <HAL_GPIO_EXTI_Callback>
  }
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40010400 	.word	0x40010400

08001334 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e12b      	b.n	80015b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d106      	bne.n	8001374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fb1c 	bl	80009ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2224      	movs	r2, #36	@ 0x24
 8001378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0201 	bic.w	r2, r2, #1
 800138a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800139a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013ac:	f001 f842 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 80013b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4a81      	ldr	r2, [pc, #516]	@ (80015bc <HAL_I2C_Init+0x274>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d807      	bhi.n	80013cc <HAL_I2C_Init+0x84>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4a80      	ldr	r2, [pc, #512]	@ (80015c0 <HAL_I2C_Init+0x278>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	bf94      	ite	ls
 80013c4:	2301      	movls	r3, #1
 80013c6:	2300      	movhi	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	e006      	b.n	80013da <HAL_I2C_Init+0x92>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4a7d      	ldr	r2, [pc, #500]	@ (80015c4 <HAL_I2C_Init+0x27c>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	bf94      	ite	ls
 80013d4:	2301      	movls	r3, #1
 80013d6:	2300      	movhi	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e0e7      	b.n	80015b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4a78      	ldr	r2, [pc, #480]	@ (80015c8 <HAL_I2C_Init+0x280>)
 80013e6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ea:	0c9b      	lsrs	r3, r3, #18
 80013ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	430a      	orrs	r2, r1
 8001400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	4a6a      	ldr	r2, [pc, #424]	@ (80015bc <HAL_I2C_Init+0x274>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d802      	bhi.n	800141c <HAL_I2C_Init+0xd4>
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	3301      	adds	r3, #1
 800141a:	e009      	b.n	8001430 <HAL_I2C_Init+0xe8>
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001422:	fb02 f303 	mul.w	r3, r2, r3
 8001426:	4a69      	ldr	r2, [pc, #420]	@ (80015cc <HAL_I2C_Init+0x284>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	099b      	lsrs	r3, r3, #6
 800142e:	3301      	adds	r3, #1
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	430b      	orrs	r3, r1
 8001436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001442:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	495c      	ldr	r1, [pc, #368]	@ (80015bc <HAL_I2C_Init+0x274>)
 800144c:	428b      	cmp	r3, r1
 800144e:	d819      	bhi.n	8001484 <HAL_I2C_Init+0x13c>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	fbb1 f3f3 	udiv	r3, r1, r3
 800145e:	1c59      	adds	r1, r3, #1
 8001460:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001464:	400b      	ands	r3, r1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00a      	beq.n	8001480 <HAL_I2C_Init+0x138>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1e59      	subs	r1, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fbb1 f3f3 	udiv	r3, r1, r3
 8001478:	3301      	adds	r3, #1
 800147a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147e:	e051      	b.n	8001524 <HAL_I2C_Init+0x1dc>
 8001480:	2304      	movs	r3, #4
 8001482:	e04f      	b.n	8001524 <HAL_I2C_Init+0x1dc>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d111      	bne.n	80014b0 <HAL_I2C_Init+0x168>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	1e58      	subs	r0, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6859      	ldr	r1, [r3, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	440b      	add	r3, r1
 800149a:	fbb0 f3f3 	udiv	r3, r0, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	e012      	b.n	80014d6 <HAL_I2C_Init+0x18e>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1e58      	subs	r0, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6859      	ldr	r1, [r3, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	0099      	lsls	r1, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bf0c      	ite	eq
 80014d0:	2301      	moveq	r3, #1
 80014d2:	2300      	movne	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_I2C_Init+0x196>
 80014da:	2301      	movs	r3, #1
 80014dc:	e022      	b.n	8001524 <HAL_I2C_Init+0x1dc>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10e      	bne.n	8001504 <HAL_I2C_Init+0x1bc>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1e58      	subs	r0, r3, #1
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6859      	ldr	r1, [r3, #4]
 80014ee:	460b      	mov	r3, r1
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	440b      	add	r3, r1
 80014f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001502:	e00f      	b.n	8001524 <HAL_I2C_Init+0x1dc>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1e58      	subs	r0, r3, #1
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6859      	ldr	r1, [r3, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	0099      	lsls	r1, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	fbb0 f3f3 	udiv	r3, r0, r3
 800151a:	3301      	adds	r3, #1
 800151c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001520:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	6809      	ldr	r1, [r1, #0]
 8001528:	4313      	orrs	r3, r2
 800152a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69da      	ldr	r2, [r3, #28]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001552:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6911      	ldr	r1, [r2, #16]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68d2      	ldr	r2, [r2, #12]
 800155e:	4311      	orrs	r1, r2
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	430b      	orrs	r3, r1
 8001566:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0201 	orr.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2220      	movs	r2, #32
 800159e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	000186a0 	.word	0x000186a0
 80015c0:	001e847f 	.word	0x001e847f
 80015c4:	003d08ff 	.word	0x003d08ff
 80015c8:	431bde83 	.word	0x431bde83
 80015cc:	10624dd3 	.word	0x10624dd3

080015d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	817b      	strh	r3, [r7, #10]
 80015e2:	460b      	mov	r3, r1
 80015e4:	813b      	strh	r3, [r7, #8]
 80015e6:	4613      	mov	r3, r2
 80015e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015ea:	f7ff fb9b 	bl	8000d24 <HAL_GetTick>
 80015ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b20      	cmp	r3, #32
 80015fa:	f040 80d9 	bne.w	80017b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2319      	movs	r3, #25
 8001604:	2201      	movs	r2, #1
 8001606:	496d      	ldr	r1, [pc, #436]	@ (80017bc <HAL_I2C_Mem_Write+0x1ec>)
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 f971 	bl	80018f0 <I2C_WaitOnFlagUntilTimeout>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001614:	2302      	movs	r3, #2
 8001616:	e0cc      	b.n	80017b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800161e:	2b01      	cmp	r3, #1
 8001620:	d101      	bne.n	8001626 <HAL_I2C_Mem_Write+0x56>
 8001622:	2302      	movs	r3, #2
 8001624:	e0c5      	b.n	80017b2 <HAL_I2C_Mem_Write+0x1e2>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b01      	cmp	r3, #1
 800163a:	d007      	beq.n	800164c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0201 	orr.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800165a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2221      	movs	r2, #33	@ 0x21
 8001660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2240      	movs	r2, #64	@ 0x40
 8001668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6a3a      	ldr	r2, [r7, #32]
 8001676:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800167c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001682:	b29a      	uxth	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4a4d      	ldr	r2, [pc, #308]	@ (80017c0 <HAL_I2C_Mem_Write+0x1f0>)
 800168c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800168e:	88f8      	ldrh	r0, [r7, #6]
 8001690:	893a      	ldrh	r2, [r7, #8]
 8001692:	8979      	ldrh	r1, [r7, #10]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	4603      	mov	r3, r0
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 f890 	bl	80017c4 <I2C_RequestMemoryWrite>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d052      	beq.n	8001750 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e081      	b.n	80017b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 fa36 	bl	8001b24 <I2C_WaitOnTXEFlagUntilTimeout>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00d      	beq.n	80016da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d107      	bne.n	80016d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e06b      	b.n	80017b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016de:	781a      	ldrb	r2, [r3, #0]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016f4:	3b01      	subs	r3, #1
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001700:	b29b      	uxth	r3, r3
 8001702:	3b01      	subs	r3, #1
 8001704:	b29a      	uxth	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b04      	cmp	r3, #4
 8001716:	d11b      	bne.n	8001750 <HAL_I2C_Mem_Write+0x180>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800171c:	2b00      	cmp	r3, #0
 800171e:	d017      	beq.n	8001750 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001724:	781a      	ldrb	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800173a:	3b01      	subs	r3, #1
 800173c:	b29a      	uxth	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001746:	b29b      	uxth	r3, r3
 8001748:	3b01      	subs	r3, #1
 800174a:	b29a      	uxth	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1aa      	bne.n	80016ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f000 fa29 	bl	8001bb4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00d      	beq.n	8001784 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	2b04      	cmp	r3, #4
 800176e:	d107      	bne.n	8001780 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800177e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e016      	b.n	80017b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2220      	movs	r2, #32
 8001798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	e000      	b.n	80017b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80017b0:	2302      	movs	r3, #2
  }
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	00100002 	.word	0x00100002
 80017c0:	ffff0000 	.word	0xffff0000

080017c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	4608      	mov	r0, r1
 80017ce:	4611      	mov	r1, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	4603      	mov	r3, r0
 80017d4:	817b      	strh	r3, [r7, #10]
 80017d6:	460b      	mov	r3, r1
 80017d8:	813b      	strh	r3, [r7, #8]
 80017da:	4613      	mov	r3, r2
 80017dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 f878 	bl	80018f0 <I2C_WaitOnFlagUntilTimeout>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00d      	beq.n	8001822 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001810:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001814:	d103      	bne.n	800181e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800181c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e05f      	b.n	80018e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001822:	897b      	ldrh	r3, [r7, #10]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001830:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001834:	6a3a      	ldr	r2, [r7, #32]
 8001836:	492d      	ldr	r1, [pc, #180]	@ (80018ec <I2C_RequestMemoryWrite+0x128>)
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f000 f8d3 	bl	80019e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e04c      	b.n	80018e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800185e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001860:	6a39      	ldr	r1, [r7, #32]
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 f95e 	bl	8001b24 <I2C_WaitOnTXEFlagUntilTimeout>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00d      	beq.n	800188a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	2b04      	cmp	r3, #4
 8001874:	d107      	bne.n	8001886 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001884:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e02b      	b.n	80018e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001890:	893b      	ldrh	r3, [r7, #8]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	611a      	str	r2, [r3, #16]
 800189a:	e021      	b.n	80018e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800189c:	893b      	ldrh	r3, [r7, #8]
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ac:	6a39      	ldr	r1, [r7, #32]
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 f938 	bl	8001b24 <I2C_WaitOnTXEFlagUntilTimeout>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00d      	beq.n	80018d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d107      	bne.n	80018d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e005      	b.n	80018e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018d6:	893b      	ldrh	r3, [r7, #8]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	00010002 	.word	0x00010002

080018f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	4613      	mov	r3, r2
 80018fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001900:	e048      	b.n	8001994 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001908:	d044      	beq.n	8001994 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800190a:	f7ff fa0b 	bl	8000d24 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d302      	bcc.n	8001920 <I2C_WaitOnFlagUntilTimeout+0x30>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d139      	bne.n	8001994 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	0c1b      	lsrs	r3, r3, #16
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d10d      	bne.n	8001946 <I2C_WaitOnFlagUntilTimeout+0x56>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	43da      	mvns	r2, r3
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	4013      	ands	r3, r2
 8001936:	b29b      	uxth	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	bf0c      	ite	eq
 800193c:	2301      	moveq	r3, #1
 800193e:	2300      	movne	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	e00c      	b.n	8001960 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	43da      	mvns	r2, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	4013      	ands	r3, r2
 8001952:	b29b      	uxth	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	bf0c      	ite	eq
 8001958:	2301      	moveq	r3, #1
 800195a:	2300      	movne	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	461a      	mov	r2, r3
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	429a      	cmp	r2, r3
 8001964:	d116      	bne.n	8001994 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2220      	movs	r2, #32
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	f043 0220 	orr.w	r2, r3, #32
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e023      	b.n	80019dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	0c1b      	lsrs	r3, r3, #16
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b01      	cmp	r3, #1
 800199c:	d10d      	bne.n	80019ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	43da      	mvns	r2, r3
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	4013      	ands	r3, r2
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf0c      	ite	eq
 80019b0:	2301      	moveq	r3, #1
 80019b2:	2300      	movne	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	461a      	mov	r2, r3
 80019b8:	e00c      	b.n	80019d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	43da      	mvns	r2, r3
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	4013      	ands	r3, r2
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf0c      	ite	eq
 80019cc:	2301      	moveq	r3, #1
 80019ce:	2300      	movne	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d093      	beq.n	8001902 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019f2:	e071      	b.n	8001ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a02:	d123      	bne.n	8001a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2220      	movs	r2, #32
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a38:	f043 0204 	orr.w	r2, r3, #4
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e067      	b.n	8001b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a52:	d041      	beq.n	8001ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a54:	f7ff f966 	bl	8000d24 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d302      	bcc.n	8001a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d136      	bne.n	8001ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	0c1b      	lsrs	r3, r3, #16
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d10c      	bne.n	8001a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	bf14      	ite	ne
 8001a86:	2301      	movne	r3, #1
 8001a88:	2300      	moveq	r3, #0
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	e00b      	b.n	8001aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	43da      	mvns	r2, r3
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf14      	ite	ne
 8001aa0:	2301      	movne	r3, #1
 8001aa2:	2300      	moveq	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d016      	beq.n	8001ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	f043 0220 	orr.w	r2, r3, #32
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e021      	b.n	8001b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	0c1b      	lsrs	r3, r3, #16
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d10c      	bne.n	8001afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	43da      	mvns	r2, r3
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	4013      	ands	r3, r2
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	bf14      	ite	ne
 8001af4:	2301      	movne	r3, #1
 8001af6:	2300      	moveq	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	e00b      	b.n	8001b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4013      	ands	r3, r2
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	bf14      	ite	ne
 8001b0e:	2301      	movne	r3, #1
 8001b10:	2300      	moveq	r3, #0
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f47f af6d 	bne.w	80019f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b30:	e034      	b.n	8001b9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 f886 	bl	8001c44 <I2C_IsAcknowledgeFailed>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e034      	b.n	8001bac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b48:	d028      	beq.n	8001b9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b4a:	f7ff f8eb 	bl	8000d24 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d302      	bcc.n	8001b60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d11d      	bne.n	8001b9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b6a:	2b80      	cmp	r3, #128	@ 0x80
 8001b6c:	d016      	beq.n	8001b9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2220      	movs	r2, #32
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	f043 0220 	orr.w	r2, r3, #32
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e007      	b.n	8001bac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ba6:	2b80      	cmp	r3, #128	@ 0x80
 8001ba8:	d1c3      	bne.n	8001b32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bc0:	e034      	b.n	8001c2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 f83e 	bl	8001c44 <I2C_IsAcknowledgeFailed>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e034      	b.n	8001c3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd8:	d028      	beq.n	8001c2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bda:	f7ff f8a3 	bl	8000d24 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d302      	bcc.n	8001bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d11d      	bne.n	8001c2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d016      	beq.n	8001c2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2220      	movs	r2, #32
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c18:	f043 0220 	orr.w	r2, r3, #32
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e007      	b.n	8001c3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d1c3      	bne.n	8001bc2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c5a:	d11b      	bne.n	8001c94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	f043 0204 	orr.w	r2, r3, #4
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e272      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 8087 	beq.w	8001dce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc0:	4b92      	ldr	r3, [pc, #584]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d00c      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ccc:	4b8f      	ldr	r3, [pc, #572]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d112      	bne.n	8001cfe <HAL_RCC_OscConfig+0x5e>
 8001cd8:	4b8c      	ldr	r3, [pc, #560]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce4:	d10b      	bne.n	8001cfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce6:	4b89      	ldr	r3, [pc, #548]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d06c      	beq.n	8001dcc <HAL_RCC_OscConfig+0x12c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d168      	bne.n	8001dcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e24c      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d06:	d106      	bne.n	8001d16 <HAL_RCC_OscConfig+0x76>
 8001d08:	4b80      	ldr	r3, [pc, #512]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a7f      	ldr	r2, [pc, #508]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	e02e      	b.n	8001d74 <HAL_RCC_OscConfig+0xd4>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x98>
 8001d1e:	4b7b      	ldr	r3, [pc, #492]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a7a      	ldr	r2, [pc, #488]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	4b78      	ldr	r3, [pc, #480]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a77      	ldr	r2, [pc, #476]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e01d      	b.n	8001d74 <HAL_RCC_OscConfig+0xd4>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0xbc>
 8001d42:	4b72      	ldr	r3, [pc, #456]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a71      	ldr	r2, [pc, #452]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b6f      	ldr	r3, [pc, #444]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a6e      	ldr	r2, [pc, #440]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCC_OscConfig+0xd4>
 8001d5c:	4b6b      	ldr	r3, [pc, #428]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a6a      	ldr	r2, [pc, #424]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	4b68      	ldr	r3, [pc, #416]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a67      	ldr	r2, [pc, #412]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d013      	beq.n	8001da4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7fe ffd2 	bl	8000d24 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7fe ffce 	bl	8000d24 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	@ 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e200      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	4b5d      	ldr	r3, [pc, #372]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0xe4>
 8001da2:	e014      	b.n	8001dce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7fe ffbe 	bl	8000d24 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dac:	f7fe ffba 	bl	8000d24 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	@ 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e1ec      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dbe:	4b53      	ldr	r3, [pc, #332]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x10c>
 8001dca:	e000      	b.n	8001dce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d063      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dda:	4b4c      	ldr	r3, [pc, #304]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00b      	beq.n	8001dfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001de6:	4b49      	ldr	r3, [pc, #292]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d11c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x18c>
 8001df2:	4b46      	ldr	r3, [pc, #280]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d116      	bne.n	8001e2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	4b43      	ldr	r3, [pc, #268]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <HAL_RCC_OscConfig+0x176>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d001      	beq.n	8001e16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e1c0      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e16:	4b3d      	ldr	r3, [pc, #244]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4939      	ldr	r1, [pc, #228]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	e03a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d020      	beq.n	8001e76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e34:	4b36      	ldr	r3, [pc, #216]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7fe ff73 	bl	8000d24 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e42:	f7fe ff6f 	bl	8000d24 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e1a1      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e54:	4b2d      	ldr	r3, [pc, #180]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e60:	4b2a      	ldr	r3, [pc, #168]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4927      	ldr	r1, [pc, #156]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]
 8001e74:	e015      	b.n	8001ea2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e76:	4b26      	ldr	r3, [pc, #152]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7fe ff52 	bl	8000d24 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e84:	f7fe ff4e 	bl	8000d24 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e180      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e96:	4b1d      	ldr	r3, [pc, #116]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d03a      	beq.n	8001f24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d019      	beq.n	8001eea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eb6:	4b17      	ldr	r3, [pc, #92]	@ (8001f14 <HAL_RCC_OscConfig+0x274>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebc:	f7fe ff32 	bl	8000d24 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7fe ff2e 	bl	8000d24 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e160      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	f000 face 	bl	8002484 <RCC_Delay>
 8001ee8:	e01c      	b.n	8001f24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eea:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <HAL_RCC_OscConfig+0x274>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef0:	f7fe ff18 	bl	8000d24 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef6:	e00f      	b.n	8001f18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef8:	f7fe ff14 	bl	8000d24 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d908      	bls.n	8001f18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e146      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	42420000 	.word	0x42420000
 8001f14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f18:	4b92      	ldr	r3, [pc, #584]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1e9      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80a6 	beq.w	800207e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f36:	4b8b      	ldr	r3, [pc, #556]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10d      	bne.n	8001f5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	4b88      	ldr	r3, [pc, #544]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	4a87      	ldr	r2, [pc, #540]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f4c:	61d3      	str	r3, [r2, #28]
 8001f4e:	4b85      	ldr	r3, [pc, #532]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5e:	4b82      	ldr	r3, [pc, #520]	@ (8002168 <HAL_RCC_OscConfig+0x4c8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d118      	bne.n	8001f9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002168 <HAL_RCC_OscConfig+0x4c8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a7e      	ldr	r2, [pc, #504]	@ (8002168 <HAL_RCC_OscConfig+0x4c8>)
 8001f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f76:	f7fe fed5 	bl	8000d24 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7e:	f7fe fed1 	bl	8000d24 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b64      	cmp	r3, #100	@ 0x64
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e103      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f90:	4b75      	ldr	r3, [pc, #468]	@ (8002168 <HAL_RCC_OscConfig+0x4c8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d106      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x312>
 8001fa4:	4b6f      	ldr	r3, [pc, #444]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	4a6e      	ldr	r2, [pc, #440]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6213      	str	r3, [r2, #32]
 8001fb0:	e02d      	b.n	800200e <HAL_RCC_OscConfig+0x36e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x334>
 8001fba:	4b6a      	ldr	r3, [pc, #424]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4a69      	ldr	r2, [pc, #420]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	6213      	str	r3, [r2, #32]
 8001fc6:	4b67      	ldr	r3, [pc, #412]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	4a66      	ldr	r2, [pc, #408]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	f023 0304 	bic.w	r3, r3, #4
 8001fd0:	6213      	str	r3, [r2, #32]
 8001fd2:	e01c      	b.n	800200e <HAL_RCC_OscConfig+0x36e>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	d10c      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x356>
 8001fdc:	4b61      	ldr	r3, [pc, #388]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4a60      	ldr	r2, [pc, #384]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	6213      	str	r3, [r2, #32]
 8001fe8:	4b5e      	ldr	r3, [pc, #376]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4a5d      	ldr	r2, [pc, #372]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6213      	str	r3, [r2, #32]
 8001ff4:	e00b      	b.n	800200e <HAL_RCC_OscConfig+0x36e>
 8001ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4a5a      	ldr	r2, [pc, #360]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	6213      	str	r3, [r2, #32]
 8002002:	4b58      	ldr	r3, [pc, #352]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	4a57      	ldr	r2, [pc, #348]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d015      	beq.n	8002042 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7fe fe85 	bl	8000d24 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7fe fe81 	bl	8000d24 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e0b1      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002034:	4b4b      	ldr	r3, [pc, #300]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0ee      	beq.n	800201e <HAL_RCC_OscConfig+0x37e>
 8002040:	e014      	b.n	800206c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002042:	f7fe fe6f 	bl	8000d24 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002048:	e00a      	b.n	8002060 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7fe fe6b 	bl	8000d24 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002058:	4293      	cmp	r3, r2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e09b      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002060:	4b40      	ldr	r3, [pc, #256]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1ee      	bne.n	800204a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800206c:	7dfb      	ldrb	r3, [r7, #23]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d105      	bne.n	800207e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002072:	4b3c      	ldr	r3, [pc, #240]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	4a3b      	ldr	r2, [pc, #236]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800207c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 8087 	beq.w	8002196 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002088:	4b36      	ldr	r3, [pc, #216]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b08      	cmp	r3, #8
 8002092:	d061      	beq.n	8002158 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d146      	bne.n	800212a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209c:	4b33      	ldr	r3, [pc, #204]	@ (800216c <HAL_RCC_OscConfig+0x4cc>)
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7fe fe3f 	bl	8000d24 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020aa:	f7fe fe3b 	bl	8000d24 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e06d      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020bc:	4b29      	ldr	r3, [pc, #164]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f0      	bne.n	80020aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020d0:	d108      	bne.n	80020e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020d2:	4b24      	ldr	r3, [pc, #144]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	4921      	ldr	r1, [pc, #132]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a19      	ldr	r1, [r3, #32]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f4:	430b      	orrs	r3, r1
 80020f6:	491b      	ldr	r1, [pc, #108]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020fc:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <HAL_RCC_OscConfig+0x4cc>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7fe fe0f 	bl	8000d24 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210a:	f7fe fe0b 	bl	8000d24 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e03d      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800211c:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x46a>
 8002128:	e035      	b.n	8002196 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <HAL_RCC_OscConfig+0x4cc>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7fe fdf8 	bl	8000d24 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002138:	f7fe fdf4 	bl	8000d24 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e026      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214a:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x498>
 8002156:	e01e      	b.n	8002196 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d107      	bne.n	8002170 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e019      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
 8002164:	40021000 	.word	0x40021000
 8002168:	40007000 	.word	0x40007000
 800216c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <HAL_RCC_OscConfig+0x500>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	429a      	cmp	r2, r3
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218e:	429a      	cmp	r2, r3
 8002190:	d001      	beq.n	8002196 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000

080021a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0d0      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d910      	bls.n	80021e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b67      	ldr	r3, [pc, #412]	@ (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 0207 	bic.w	r2, r3, #7
 80021ce:	4965      	ldr	r1, [pc, #404]	@ (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	4b63      	ldr	r3, [pc, #396]	@ (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0b8      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d020      	beq.n	8002236 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002200:	4b59      	ldr	r3, [pc, #356]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4a58      	ldr	r2, [pc, #352]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800220a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002218:	4b53      	ldr	r3, [pc, #332]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4a52      	ldr	r2, [pc, #328]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002222:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002224:	4b50      	ldr	r3, [pc, #320]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	494d      	ldr	r1, [pc, #308]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	4313      	orrs	r3, r2
 8002234:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d040      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	4b47      	ldr	r3, [pc, #284]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d115      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e07f      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d107      	bne.n	8002272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002262:	4b41      	ldr	r3, [pc, #260]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d109      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e073      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002272:	4b3d      	ldr	r3, [pc, #244]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e06b      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002282:	4b39      	ldr	r3, [pc, #228]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f023 0203 	bic.w	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4936      	ldr	r1, [pc, #216]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002294:	f7fe fd46 	bl	8000d24 <HAL_GetTick>
 8002298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229c:	f7fe fd42 	bl	8000d24 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e053      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 020c 	and.w	r2, r3, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d1eb      	bne.n	800229c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022c4:	4b27      	ldr	r3, [pc, #156]	@ (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d210      	bcs.n	80022f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b24      	ldr	r3, [pc, #144]	@ (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 0207 	bic.w	r2, r3, #7
 80022da:	4922      	ldr	r1, [pc, #136]	@ (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b20      	ldr	r3, [pc, #128]	@ (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e032      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002300:	4b19      	ldr	r3, [pc, #100]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4916      	ldr	r1, [pc, #88]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800231e:	4b12      	ldr	r3, [pc, #72]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	490e      	ldr	r1, [pc, #56]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002332:	f000 f821 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 8002336:	4602      	mov	r2, r0
 8002338:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	490a      	ldr	r1, [pc, #40]	@ (800236c <HAL_RCC_ClockConfig+0x1c8>)
 8002344:	5ccb      	ldrb	r3, [r1, r3]
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	4a09      	ldr	r2, [pc, #36]	@ (8002370 <HAL_RCC_ClockConfig+0x1cc>)
 800234c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800234e:	4b09      	ldr	r3, [pc, #36]	@ (8002374 <HAL_RCC_ClockConfig+0x1d0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fca4 	bl	8000ca0 <HAL_InitTick>

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40022000 	.word	0x40022000
 8002368:	40021000 	.word	0x40021000
 800236c:	080046a8 	.word	0x080046a8
 8002370:	20000000 	.word	0x20000000
 8002374:	20000004 	.word	0x20000004

08002378 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002378:	b480      	push	{r7}
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002392:	4b1e      	ldr	r3, [pc, #120]	@ (800240c <HAL_RCC_GetSysClockFreq+0x94>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d002      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0x30>
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d003      	beq.n	80023ae <HAL_RCC_GetSysClockFreq+0x36>
 80023a6:	e027      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023a8:	4b19      	ldr	r3, [pc, #100]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x98>)
 80023aa:	613b      	str	r3, [r7, #16]
      break;
 80023ac:	e027      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	0c9b      	lsrs	r3, r3, #18
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	4a17      	ldr	r2, [pc, #92]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023b8:	5cd3      	ldrb	r3, [r2, r3]
 80023ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d010      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023c6:	4b11      	ldr	r3, [pc, #68]	@ (800240c <HAL_RCC_GetSysClockFreq+0x94>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	0c5b      	lsrs	r3, r3, #17
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	4a11      	ldr	r2, [pc, #68]	@ (8002418 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x98>)
 80023da:	fb03 f202 	mul.w	r2, r3, r2
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e004      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a0c      	ldr	r2, [pc, #48]	@ (800241c <HAL_RCC_GetSysClockFreq+0xa4>)
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	613b      	str	r3, [r7, #16]
      break;
 80023f6:	e002      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x98>)
 80023fa:	613b      	str	r3, [r7, #16]
      break;
 80023fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fe:	693b      	ldr	r3, [r7, #16]
}
 8002400:	4618      	mov	r0, r3
 8002402:	371c      	adds	r7, #28
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	007a1200 	.word	0x007a1200
 8002414:	080046c0 	.word	0x080046c0
 8002418:	080046d0 	.word	0x080046d0
 800241c:	003d0900 	.word	0x003d0900

08002420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002424:	4b02      	ldr	r3, [pc, #8]	@ (8002430 <HAL_RCC_GetHCLKFreq+0x10>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	20000000 	.word	0x20000000

08002434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002438:	f7ff fff2 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 800243c:	4602      	mov	r2, r0
 800243e:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	0a1b      	lsrs	r3, r3, #8
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4903      	ldr	r1, [pc, #12]	@ (8002458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800244a:	5ccb      	ldrb	r3, [r1, r3]
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40021000 	.word	0x40021000
 8002458:	080046b8 	.word	0x080046b8

0800245c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002460:	f7ff ffde 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b05      	ldr	r3, [pc, #20]	@ (800247c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	0adb      	lsrs	r3, r3, #11
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4903      	ldr	r1, [pc, #12]	@ (8002480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002472:	5ccb      	ldrb	r3, [r1, r3]
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	080046b8 	.word	0x080046b8

08002484 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800248c:	4b0a      	ldr	r3, [pc, #40]	@ (80024b8 <RCC_Delay+0x34>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0a      	ldr	r2, [pc, #40]	@ (80024bc <RCC_Delay+0x38>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0a5b      	lsrs	r3, r3, #9
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024a0:	bf00      	nop
  }
  while (Delay --);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1e5a      	subs	r2, r3, #1
 80024a6:	60fa      	str	r2, [r7, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f9      	bne.n	80024a0 <RCC_Delay+0x1c>
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	20000000 	.word	0x20000000
 80024bc:	10624dd3 	.word	0x10624dd3

080024c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e093      	b.n	80025fc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d106      	bne.n	80024ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7fe faaf 	bl	8000a4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2202      	movs	r2, #2
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002504:	f023 0307 	bic.w	r3, r3, #7
 8002508:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3304      	adds	r3, #4
 8002512:	4619      	mov	r1, r3
 8002514:	4610      	mov	r0, r2
 8002516:	f000 f903 	bl	8002720 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002542:	f023 0303 	bic.w	r3, r3, #3
 8002546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	4313      	orrs	r3, r2
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002560:	f023 030c 	bic.w	r3, r3, #12
 8002564:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800256c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002570:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	4313      	orrs	r3, r2
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	011a      	lsls	r2, r3, #4
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	031b      	lsls	r3, r3, #12
 8002590:	4313      	orrs	r3, r2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800259e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	4313      	orrs	r3, r2
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002614:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800261c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002624:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800262c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d110      	bne.n	8002656 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d102      	bne.n	8002640 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800263a:	7b7b      	ldrb	r3, [r7, #13]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d001      	beq.n	8002644 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e069      	b.n	8002718 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002654:	e031      	b.n	80026ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d110      	bne.n	800267e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800265c:	7bbb      	ldrb	r3, [r7, #14]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d102      	bne.n	8002668 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002662:	7b3b      	ldrb	r3, [r7, #12]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d001      	beq.n	800266c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e055      	b.n	8002718 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800267c:	e01d      	b.n	80026ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d108      	bne.n	8002696 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002684:	7bbb      	ldrb	r3, [r7, #14]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d105      	bne.n	8002696 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800268a:	7b7b      	ldrb	r3, [r7, #13]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d102      	bne.n	8002696 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002690:	7b3b      	ldrb	r3, [r7, #12]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d001      	beq.n	800269a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e03e      	b.n	8002718 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2202      	movs	r2, #2
 800269e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2202      	movs	r2, #2
 80026a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2202      	movs	r2, #2
 80026ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2202      	movs	r2, #2
 80026b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_TIM_Encoder_Start+0xc4>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d008      	beq.n	80026d8 <HAL_TIM_Encoder_Start+0xd4>
 80026c6:	e00f      	b.n	80026e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2201      	movs	r2, #1
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 f893 	bl	80027fc <TIM_CCxChannelCmd>
      break;
 80026d6:	e016      	b.n	8002706 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2201      	movs	r2, #1
 80026de:	2104      	movs	r1, #4
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 f88b 	bl	80027fc <TIM_CCxChannelCmd>
      break;
 80026e6:	e00e      	b.n	8002706 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2201      	movs	r2, #1
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 f883 	bl	80027fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2201      	movs	r2, #1
 80026fc:	2104      	movs	r1, #4
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f87c 	bl	80027fc <TIM_CCxChannelCmd>
      break;
 8002704:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a2f      	ldr	r2, [pc, #188]	@ (80027f0 <TIM_Base_SetConfig+0xd0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d00b      	beq.n	8002750 <TIM_Base_SetConfig+0x30>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800273e:	d007      	beq.n	8002750 <TIM_Base_SetConfig+0x30>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a2c      	ldr	r2, [pc, #176]	@ (80027f4 <TIM_Base_SetConfig+0xd4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d003      	beq.n	8002750 <TIM_Base_SetConfig+0x30>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a2b      	ldr	r2, [pc, #172]	@ (80027f8 <TIM_Base_SetConfig+0xd8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d108      	bne.n	8002762 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a22      	ldr	r2, [pc, #136]	@ (80027f0 <TIM_Base_SetConfig+0xd0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00b      	beq.n	8002782 <TIM_Base_SetConfig+0x62>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002770:	d007      	beq.n	8002782 <TIM_Base_SetConfig+0x62>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a1f      	ldr	r2, [pc, #124]	@ (80027f4 <TIM_Base_SetConfig+0xd4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d003      	beq.n	8002782 <TIM_Base_SetConfig+0x62>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a1e      	ldr	r2, [pc, #120]	@ (80027f8 <TIM_Base_SetConfig+0xd8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d108      	bne.n	8002794 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a0d      	ldr	r2, [pc, #52]	@ (80027f0 <TIM_Base_SetConfig+0xd0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d103      	bne.n	80027c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f023 0201 	bic.w	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	611a      	str	r2, [r3, #16]
  }
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	40012c00 	.word	0x40012c00
 80027f4:	40000400 	.word	0x40000400
 80027f8:	40000800 	.word	0x40000800

080027fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	2201      	movs	r2, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a1a      	ldr	r2, [r3, #32]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	43db      	mvns	r3, r3
 800281e:	401a      	ands	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a1a      	ldr	r2, [r3, #32]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	431a      	orrs	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	621a      	str	r2, [r3, #32]
}
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002858:	2302      	movs	r3, #2
 800285a:	e046      	b.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002882:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a16      	ldr	r2, [pc, #88]	@ (80028f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00e      	beq.n	80028be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a8:	d009      	beq.n	80028be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a12      	ldr	r2, [pc, #72]	@ (80028f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d004      	beq.n	80028be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a10      	ldr	r2, [pc, #64]	@ (80028fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d10c      	bne.n	80028d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	40012c00 	.word	0x40012c00
 80028f8:	40000400 	.word	0x40000400
 80028fc:	40000800 	.word	0x40000800

08002900 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e042      	b.n	8002998 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fe f8d0 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2224      	movs	r2, #36	@ 0x24
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002942:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f82b 	bl	80029a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002968:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002978:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80029da:	f023 030c 	bic.w	r3, r3, #12
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	68b9      	ldr	r1, [r7, #8]
 80029e4:	430b      	orrs	r3, r1
 80029e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a2c      	ldr	r2, [pc, #176]	@ (8002ab4 <UART_SetConfig+0x114>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d103      	bne.n	8002a10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a08:	f7ff fd28 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	e002      	b.n	8002a16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a10:	f7ff fd10 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8002a14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009a      	lsls	r2, r3, #2
 8002a20:	441a      	add	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2c:	4a22      	ldr	r2, [pc, #136]	@ (8002ab8 <UART_SetConfig+0x118>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	0119      	lsls	r1, r3, #4
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009a      	lsls	r2, r3, #2
 8002a40:	441a      	add	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab8 <UART_SetConfig+0x118>)
 8002a4e:	fba3 0302 	umull	r0, r3, r3, r2
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	2064      	movs	r0, #100	@ 0x64
 8002a56:	fb00 f303 	mul.w	r3, r0, r3
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	3332      	adds	r3, #50	@ 0x32
 8002a60:	4a15      	ldr	r2, [pc, #84]	@ (8002ab8 <UART_SetConfig+0x118>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a6c:	4419      	add	r1, r3
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	009a      	lsls	r2, r3, #2
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a84:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab8 <UART_SetConfig+0x118>)
 8002a86:	fba3 0302 	umull	r0, r3, r3, r2
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2064      	movs	r0, #100	@ 0x64
 8002a8e:	fb00 f303 	mul.w	r3, r0, r3
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	3332      	adds	r3, #50	@ 0x32
 8002a98:	4a07      	ldr	r2, [pc, #28]	@ (8002ab8 <UART_SetConfig+0x118>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	f003 020f 	and.w	r2, r3, #15
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	440a      	add	r2, r1
 8002aaa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40013800 	.word	0x40013800
 8002ab8:	51eb851f 	.word	0x51eb851f

08002abc <Opcion_Init>:
	};

//____________________________________________________________________________________________________

void Opcion_Init(Opcion_t* Salida, char* Etiqueta, void* Dato, unsigned char* Icono)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
	//Opcion_t *Output = (Opcion_t *) Salida;
	//Output->Etiqueta = Etiqueta;
//	Output->Valor = Dato;
	//Output->Icono = Icono;
	Salida->Etiqueta = Etiqueta;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	601a      	str	r2, [r3, #0]
	Salida->Icono = Icono;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	609a      	str	r2, [r3, #8]
	Salida->Valor = Dato;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	605a      	str	r2, [r3, #4]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <Menu_init>:

void Menu_init(void* Salida, char* Etiqueta, Opcion_t* Opciones, uint16_t Cantidad_De_Elementos)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b087      	sub	sp, #28
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	807b      	strh	r3, [r7, #2]
	Menu_t *Output = (Menu_t*) Salida;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	617b      	str	r3, [r7, #20]
	Output->Etiqueta = Etiqueta;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	601a      	str	r2, [r3, #0]
	Output->Opciones = (Opcion_t *) Opciones;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	605a      	str	r2, [r3, #4]
	Output->Opciones->Seleccionado = true; //Marca el primer elemento de la lista de opciones como seleccionado
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	731a      	strb	r2, [r3, #12]
	Output->Cantidad_De_Elementos = Cantidad_De_Elementos;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	887a      	ldrh	r2, [r7, #2]
 8002b10:	811a      	strh	r2, [r3, #8]

}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <Display_Menu_Ppal>:
	ssd1306_WriteString((Display_Data + Ultimo_Elemento)->Etiqueta , Font_6x8 , !((Display_Data + Ultimo_Elemento)->Seleccionado));
*/
	//ssd1306_WriteString("Guardar", Font_6x8, White);
}
void Display_Menu_Ppal(void* Opcion_Data)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	6078      	str	r0, [r7, #4]
	Opcion_t* Display_Data = (Opcion_t*) Opcion_Data;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	60fb      	str	r3, [r7, #12]
	ssd1306_Fill(Black);
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f000 fe3b 	bl	80037a4 <ssd1306_Fill>
	ssd1306_SetCursor( SSD1306_WIDTH/2 - LARGO_LETRA_MEDIANA* ((float)strlen(Display_Data->Etiqueta))/2, 0);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fb0a 	bl	800014c <strlen>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fbc4 	bl	80002c8 <__aeabi_ui2f>
 8002b40:	4603      	mov	r3, r0
 8002b42:	491a      	ldr	r1, [pc, #104]	@ (8002bac <Display_Menu_Ppal+0x90>)
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fd fc17 	bl	8000378 <__aeabi_fmul>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fd fcc5 	bl	80004e0 <__aeabi_fdiv>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f04f 4085 	mov.w	r0, #1115684864	@ 0x42800000
 8002b5e:	f7fd fb01 	bl	8000164 <__aeabi_fsub>
 8002b62:	4603      	mov	r3, r0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fd57 	bl	8000618 <__aeabi_f2uiz>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 ff61 	bl	8003a38 <ssd1306_SetCursor>
	ssd1306_WriteString((Display_Data)->Etiqueta, Font_11x18, White);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <Display_Menu_Ppal+0x94>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	9200      	str	r2, [sp, #0]
 8002b80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b82:	f000 ff33 	bl	80039ec <ssd1306_WriteString>
	ssd1306_SetCursor(0,ALTO_LETRA_MEDIANA);
 8002b86:	2112      	movs	r1, #18
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f000 ff55 	bl	8003a38 <ssd1306_SetCursor>
	ssd1306_DrawBitmap(41, 18, Display_Data->Icono, 43, 43, White);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	2301      	movs	r3, #1
 8002b94:	9301      	str	r3, [sp, #4]
 8002b96:	232b      	movs	r3, #43	@ 0x2b
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	232b      	movs	r3, #43	@ 0x2b
 8002b9c:	2112      	movs	r1, #18
 8002b9e:	2029      	movs	r0, #41	@ 0x29
 8002ba0:	f000 ffe9 	bl	8003b76 <ssd1306_DrawBitmap>
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	41300000 	.word	0x41300000
 8002bb0:	08006780 	.word	0x08006780

08002bb4 <Display_Temperatura>:

void Display_Temperatura(void* Opcion_Data, uint16_t Temperatura_Leida)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08c      	sub	sp, #48	@ 0x30
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
	Opcion_t* Display_Data = (Opcion_t*) Opcion_Data;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
	ssd1306_Fill(Black);
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f000 fded 	bl	80037a4 <ssd1306_Fill>
	ssd1306_SetCursor( SSD1306_WIDTH/2 - LARGO_LETRA_MEDIANA*strlen(Display_Data->Etiqueta)/2, 0);
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd fabc 	bl	800014c <strlen>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 ff23 	bl	8003a38 <ssd1306_SetCursor>
	ssd1306_WriteString((Display_Data)->Etiqueta, Font_11x18, White);
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	4b63      	ldr	r3, [pc, #396]	@ (8002d84 <Display_Temperatura+0x1d0>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	9200      	str	r2, [sp, #0]
 8002bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bfe:	f000 fef5 	bl	80039ec <ssd1306_WriteString>

	char buffer[] = {"000 C"};
 8002c02:	4a61      	ldr	r2, [pc, #388]	@ (8002d88 <Display_Temperatura+0x1d4>)
 8002c04:	f107 031c 	add.w	r3, r7, #28
 8002c08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c0c:	6018      	str	r0, [r3, #0]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	8019      	strh	r1, [r3, #0]
	sprintf(buffer, "0%hu C", Temperatura_Leida );
 8002c12:	887a      	ldrh	r2, [r7, #2]
 8002c14:	f107 031c 	add.w	r3, r7, #28
 8002c18:	495c      	ldr	r1, [pc, #368]	@ (8002d8c <Display_Temperatura+0x1d8>)
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f001 f838 	bl	8003c90 <siprintf>
	//sprintf(buffer, "0%hu C", *(( uint16_t *) ( Display_Data->Valor)) );
	if (Temperatura_Leida>=100)
 8002c20:	887b      	ldrh	r3, [r7, #2]
 8002c22:	2b63      	cmp	r3, #99	@ 0x63
 8002c24:	d927      	bls.n	8002c76 <Display_Temperatura+0xc2>
	{
		char buffer[] = {">100 C"};
 8002c26:	4a5a      	ldr	r2, [pc, #360]	@ (8002d90 <Display_Temperatura+0x1dc>)
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c30:	6018      	str	r0, [r3, #0]
 8002c32:	3304      	adds	r3, #4
 8002c34:	8019      	strh	r1, [r3, #0]
 8002c36:	3302      	adds	r3, #2
 8002c38:	0c0a      	lsrs	r2, r1, #16
 8002c3a:	701a      	strb	r2, [r3, #0]
		ssd1306_SetCursor( SSD1306_WIDTH/2 - (3.5*LARGO_LETRA_GRANDE), SSD1306_HEIGHT/2);
 8002c3c:	2120      	movs	r1, #32
 8002c3e:	2008      	movs	r0, #8
 8002c40:	f000 fefa 	bl	8003a38 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_16x24, White);
 8002c44:	4b53      	ldr	r3, [pc, #332]	@ (8002d94 <Display_Temperatura+0x1e0>)
 8002c46:	f107 0014 	add.w	r0, r7, #20
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	9200      	str	r2, [sp, #0]
 8002c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c50:	f000 fecc 	bl	80039ec <ssd1306_WriteString>
		ssd1306_DrawCircle(SSD1306_WIDTH/2 +LARGO_LETRA_GRANDE+2, SSD1306_HEIGHT/2, 3, White);
 8002c54:	2301      	movs	r3, #1
 8002c56:	2203      	movs	r2, #3
 8002c58:	2120      	movs	r1, #32
 8002c5a:	2052      	movs	r0, #82	@ 0x52
 8002c5c:	f000 ff04 	bl	8003a68 <ssd1306_DrawCircle>
		ssd1306_DrawBitmap(SSD1306_WIDTH/2 + 2.5*LARGO_LETRA_GRANDE + 2, SSD1306_HEIGHT/2, Sprite_Fuego_16x24, 16,24, White);
 8002c60:	2301      	movs	r3, #1
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	2318      	movs	r3, #24
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	2310      	movs	r3, #16
 8002c6a:	4a4b      	ldr	r2, [pc, #300]	@ (8002d98 <Display_Temperatura+0x1e4>)
 8002c6c:	2120      	movs	r1, #32
 8002c6e:	206a      	movs	r0, #106	@ 0x6a
 8002c70:	f000 ff81 	bl	8003b76 <ssd1306_DrawBitmap>
	{
	ssd1306_SetCursor( SSD1306_WIDTH/2 - (2.5*LARGO_LETRA_GRANDE), SSD1306_HEIGHT/2);
	ssd1306_WriteString(buffer, Font_16x24, White);
	ssd1306_DrawCircle(SSD1306_WIDTH/2 +LARGO_LETRA_GRANDE+2, SSD1306_HEIGHT/2, 3, White);
	}
}
 8002c74:	e081      	b.n	8002d7a <Display_Temperatura+0x1c6>
	} else if (Temperatura_Leida > *(( uint16_t *) ( Display_Data->Valor)) + RANGO_TEMPERATURA_ACEPTABLE)
 8002c76:	887a      	ldrh	r2, [r7, #2]
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	330a      	adds	r3, #10
 8002c80:	429a      	cmp	r2, r3
 8002c82:	dd1c      	ble.n	8002cbe <Display_Temperatura+0x10a>
		ssd1306_SetCursor( SSD1306_WIDTH/2 - (2.5*LARGO_LETRA_GRANDE), SSD1306_HEIGHT/2);
 8002c84:	2120      	movs	r1, #32
 8002c86:	2018      	movs	r0, #24
 8002c88:	f000 fed6 	bl	8003a38 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_16x24, White);
 8002c8c:	4b41      	ldr	r3, [pc, #260]	@ (8002d94 <Display_Temperatura+0x1e0>)
 8002c8e:	f107 001c 	add.w	r0, r7, #28
 8002c92:	2201      	movs	r2, #1
 8002c94:	9200      	str	r2, [sp, #0]
 8002c96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c98:	f000 fea8 	bl	80039ec <ssd1306_WriteString>
		ssd1306_DrawCircle(SSD1306_WIDTH/2 +LARGO_LETRA_GRANDE+2, SSD1306_HEIGHT/2, 3, White);
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	2120      	movs	r1, #32
 8002ca2:	2052      	movs	r0, #82	@ 0x52
 8002ca4:	f000 fee0 	bl	8003a68 <ssd1306_DrawCircle>
		ssd1306_DrawBitmap(SSD1306_WIDTH/2 + 2.5*LARGO_LETRA_GRANDE + 2, SSD1306_HEIGHT/2, Sprite_Fuego_16x24, 16,24, White);
 8002ca8:	2301      	movs	r3, #1
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	2318      	movs	r3, #24
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	2310      	movs	r3, #16
 8002cb2:	4a39      	ldr	r2, [pc, #228]	@ (8002d98 <Display_Temperatura+0x1e4>)
 8002cb4:	2120      	movs	r1, #32
 8002cb6:	206a      	movs	r0, #106	@ 0x6a
 8002cb8:	f000 ff5d 	bl	8003b76 <ssd1306_DrawBitmap>
}
 8002cbc:	e05d      	b.n	8002d7a <Display_Temperatura+0x1c6>
	} else if (Temperatura_Leida < *(( uint16_t *) ( Display_Data->Valor)) - RANGO_TEMPERATURA_ACEPTABLE)
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	3b0a      	subs	r3, #10
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	da1c      	bge.n	8002d06 <Display_Temperatura+0x152>
		ssd1306_SetCursor( SSD1306_WIDTH/2 - (2.5*LARGO_LETRA_GRANDE), SSD1306_HEIGHT/2);
 8002ccc:	2120      	movs	r1, #32
 8002cce:	2018      	movs	r0, #24
 8002cd0:	f000 feb2 	bl	8003a38 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_16x24, White);
 8002cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8002d94 <Display_Temperatura+0x1e0>)
 8002cd6:	f107 001c 	add.w	r0, r7, #28
 8002cda:	2201      	movs	r2, #1
 8002cdc:	9200      	str	r2, [sp, #0]
 8002cde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ce0:	f000 fe84 	bl	80039ec <ssd1306_WriteString>
		ssd1306_DrawCircle(SSD1306_WIDTH/2 +LARGO_LETRA_GRANDE+2, SSD1306_HEIGHT/2, 3, White);
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	2120      	movs	r1, #32
 8002cea:	2052      	movs	r0, #82	@ 0x52
 8002cec:	f000 febc 	bl	8003a68 <ssd1306_DrawCircle>
		ssd1306_DrawBitmap(SSD1306_WIDTH/2 + 2.5*LARGO_LETRA_GRANDE + 2, SSD1306_HEIGHT/2 - 2, Sprite_Hielo_16x24, 16,24, White);
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	9301      	str	r3, [sp, #4]
 8002cf4:	2318      	movs	r3, #24
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	2310      	movs	r3, #16
 8002cfa:	4a28      	ldr	r2, [pc, #160]	@ (8002d9c <Display_Temperatura+0x1e8>)
 8002cfc:	211e      	movs	r1, #30
 8002cfe:	206a      	movs	r0, #106	@ 0x6a
 8002d00:	f000 ff39 	bl	8003b76 <ssd1306_DrawBitmap>
}
 8002d04:	e039      	b.n	8002d7a <Display_Temperatura+0x1c6>
	}else if (Temperatura_Leida<=10)
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	2b0a      	cmp	r3, #10
 8002d0a:	d824      	bhi.n	8002d56 <Display_Temperatura+0x1a2>
		char buffer[] = {">10 C"};
 8002d0c:	4a24      	ldr	r2, [pc, #144]	@ (8002da0 <Display_Temperatura+0x1ec>)
 8002d0e:	f107 030c 	add.w	r3, r7, #12
 8002d12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d16:	6018      	str	r0, [r3, #0]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	8019      	strh	r1, [r3, #0]
		ssd1306_SetCursor( SSD1306_WIDTH/2 - (2.5*LARGO_LETRA_GRANDE), SSD1306_HEIGHT/2);
 8002d1c:	2120      	movs	r1, #32
 8002d1e:	2018      	movs	r0, #24
 8002d20:	f000 fe8a 	bl	8003a38 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_16x24, White);
 8002d24:	4b1b      	ldr	r3, [pc, #108]	@ (8002d94 <Display_Temperatura+0x1e0>)
 8002d26:	f107 000c 	add.w	r0, r7, #12
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	9200      	str	r2, [sp, #0]
 8002d2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d30:	f000 fe5c 	bl	80039ec <ssd1306_WriteString>
		ssd1306_DrawCircle(SSD1306_WIDTH/2 +LARGO_LETRA_GRANDE+2, SSD1306_HEIGHT/2, 3, White);
 8002d34:	2301      	movs	r3, #1
 8002d36:	2203      	movs	r2, #3
 8002d38:	2120      	movs	r1, #32
 8002d3a:	2052      	movs	r0, #82	@ 0x52
 8002d3c:	f000 fe94 	bl	8003a68 <ssd1306_DrawCircle>
		ssd1306_DrawBitmap(SSD1306_WIDTH/2 + 2.5*LARGO_LETRA_GRANDE + 2, SSD1306_HEIGHT/2, Sprite_Fuego_16x24, 16,24, White);
 8002d40:	2301      	movs	r3, #1
 8002d42:	9301      	str	r3, [sp, #4]
 8002d44:	2318      	movs	r3, #24
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	2310      	movs	r3, #16
 8002d4a:	4a13      	ldr	r2, [pc, #76]	@ (8002d98 <Display_Temperatura+0x1e4>)
 8002d4c:	2120      	movs	r1, #32
 8002d4e:	206a      	movs	r0, #106	@ 0x6a
 8002d50:	f000 ff11 	bl	8003b76 <ssd1306_DrawBitmap>
}
 8002d54:	e011      	b.n	8002d7a <Display_Temperatura+0x1c6>
	ssd1306_SetCursor( SSD1306_WIDTH/2 - (2.5*LARGO_LETRA_GRANDE), SSD1306_HEIGHT/2);
 8002d56:	2120      	movs	r1, #32
 8002d58:	2018      	movs	r0, #24
 8002d5a:	f000 fe6d 	bl	8003a38 <ssd1306_SetCursor>
	ssd1306_WriteString(buffer, Font_16x24, White);
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d94 <Display_Temperatura+0x1e0>)
 8002d60:	f107 001c 	add.w	r0, r7, #28
 8002d64:	2201      	movs	r2, #1
 8002d66:	9200      	str	r2, [sp, #0]
 8002d68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d6a:	f000 fe3f 	bl	80039ec <ssd1306_WriteString>
	ssd1306_DrawCircle(SSD1306_WIDTH/2 +LARGO_LETRA_GRANDE+2, SSD1306_HEIGHT/2, 3, White);
 8002d6e:	2301      	movs	r3, #1
 8002d70:	2203      	movs	r2, #3
 8002d72:	2120      	movs	r1, #32
 8002d74:	2052      	movs	r0, #82	@ 0x52
 8002d76:	f000 fe77 	bl	8003a68 <ssd1306_DrawCircle>
}
 8002d7a:	bf00      	nop
 8002d7c:	3728      	adds	r7, #40	@ 0x28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	08006780 	.word	0x08006780
 8002d88:	08004610 	.word	0x08004610
 8002d8c:	08004608 	.word	0x08004608
 8002d90:	08004618 	.word	0x08004618
 8002d94:	0800678c 	.word	0x0800678c
 8002d98:	08004704 	.word	0x08004704
 8002d9c:	080046d4 	.word	0x080046d4
 8002da0:	08004620 	.word	0x08004620

08002da4 <Display_Capacidad>:

void Display_Capacidad(void* Opcion_Data)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	6078      	str	r0, [r7, #4]
	Opcion_t* Display_Data = (Opcion_t*) Opcion_Data;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	617b      	str	r3, [r7, #20]
	ssd1306_Fill(Black);
 8002db0:	2000      	movs	r0, #0
 8002db2:	f000 fcf7 	bl	80037a4 <ssd1306_Fill>
	ssd1306_SetCursor( SSD1306_WIDTH/2 - LARGO_LETRA_MEDIANA*strlen(Display_Data->Etiqueta)/2, 0);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd f9c6 	bl	800014c <strlen>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	085b      	lsrs	r3, r3, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fe2d 	bl	8003a38 <ssd1306_SetCursor>
	ssd1306_WriteString((Display_Data)->Etiqueta, Font_11x18, White);
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	4b28      	ldr	r3, [pc, #160]	@ (8002e84 <Display_Capacidad+0xe0>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	9200      	str	r2, [sp, #0]
 8002de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dea:	f000 fdff 	bl	80039ec <ssd1306_WriteString>
	uint16_t Capacidad_Mate = *(( uint16_t *) ( Display_Data->Valor));
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	827b      	strh	r3, [r7, #18]

	char buffer[] = {"000 ml"};
 8002df6:	4a24      	ldr	r2, [pc, #144]	@ (8002e88 <Display_Capacidad+0xe4>)
 8002df8:	f107 0308 	add.w	r3, r7, #8
 8002dfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e00:	6018      	str	r0, [r3, #0]
 8002e02:	3304      	adds	r3, #4
 8002e04:	8019      	strh	r1, [r3, #0]
 8002e06:	3302      	adds	r3, #2
 8002e08:	0c0a      	lsrs	r2, r1, #16
 8002e0a:	701a      	strb	r2, [r3, #0]
	uint16_t Capacidad_Mayor_a_100 = Capacidad_Mate - Capacidad_Mate%100;
 8002e0c:	8a7b      	ldrh	r3, [r7, #18]
 8002e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002e8c <Display_Capacidad+0xe8>)
 8002e10:	fba2 1203 	umull	r1, r2, r2, r3
 8002e14:	0952      	lsrs	r2, r2, #5
 8002e16:	2164      	movs	r1, #100	@ 0x64
 8002e18:	fb01 f202 	mul.w	r2, r1, r2
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	8a7a      	ldrh	r2, [r7, #18]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	823b      	strh	r3, [r7, #16]

	switch (Capacidad_Mayor_a_100)
 8002e26:	8a3b      	ldrh	r3, [r7, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d113      	bne.n	8002e54 <Display_Capacidad+0xb0>
	{
	case 0:
		sprintf(buffer, "0%hu ml", Capacidad_Mate);
 8002e2c:	8a7a      	ldrh	r2, [r7, #18]
 8002e2e:	f107 0308 	add.w	r3, r7, #8
 8002e32:	4917      	ldr	r1, [pc, #92]	@ (8002e90 <Display_Capacidad+0xec>)
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 ff2b 	bl	8003c90 <siprintf>
		ssd1306_SetCursor( SSD1306_WIDTH/2 - (2.5*LARGO_LETRA_GRANDE), SSD1306_HEIGHT/2);
 8002e3a:	2120      	movs	r1, #32
 8002e3c:	2018      	movs	r0, #24
 8002e3e:	f000 fdfb 	bl	8003a38 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_16x24, White);
 8002e42:	4b14      	ldr	r3, [pc, #80]	@ (8002e94 <Display_Capacidad+0xf0>)
 8002e44:	f107 0008 	add.w	r0, r7, #8
 8002e48:	2201      	movs	r2, #1
 8002e4a:	9200      	str	r2, [sp, #0]
 8002e4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e4e:	f000 fdcd 	bl	80039ec <ssd1306_WriteString>
		break;
 8002e52:	e013      	b.n	8002e7c <Display_Capacidad+0xd8>

	default:
		sprintf(buffer, "%hu ml", Capacidad_Mate);
 8002e54:	8a7a      	ldrh	r2, [r7, #18]
 8002e56:	f107 0308 	add.w	r3, r7, #8
 8002e5a:	490f      	ldr	r1, [pc, #60]	@ (8002e98 <Display_Capacidad+0xf4>)
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 ff17 	bl	8003c90 <siprintf>
		ssd1306_SetCursor( SSD1306_WIDTH/2 - (2.5*LARGO_LETRA_GRANDE), SSD1306_HEIGHT/2);
 8002e62:	2120      	movs	r1, #32
 8002e64:	2018      	movs	r0, #24
 8002e66:	f000 fde7 	bl	8003a38 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_16x24, White);
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e94 <Display_Capacidad+0xf0>)
 8002e6c:	f107 0008 	add.w	r0, r7, #8
 8002e70:	2201      	movs	r2, #1
 8002e72:	9200      	str	r2, [sp, #0]
 8002e74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e76:	f000 fdb9 	bl	80039ec <ssd1306_WriteString>
		break;
 8002e7a:	bf00      	nop
	}

}
 8002e7c:	bf00      	nop
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	08006780 	.word	0x08006780
 8002e88:	08004638 	.word	0x08004638
 8002e8c:	51eb851f 	.word	0x51eb851f
 8002e90:	08004628 	.word	0x08004628
 8002e94:	0800678c 	.word	0x0800678c
 8002e98:	08004630 	.word	0x08004630

08002e9c <Display_Nivel>:

void Display_Nivel(void* Opcion_Data, uint16_t Nivel_De_Agua, unidad_display_t Unidad)
{
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b08f      	sub	sp, #60	@ 0x3c
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	807b      	strh	r3, [r7, #2]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	707b      	strb	r3, [r7, #1]
	Opcion_t* Display_Data = (Opcion_t*) Opcion_Data;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint16_t Nivel_En_Porcentaje = 100 * Nivel_De_Agua/ (*( (uint16_t *)Display_Data->Valor));
 8002eb0:	887b      	ldrh	r3, [r7, #2]
 8002eb2:	2264      	movs	r2, #100	@ 0x64
 8002eb4:	fb02 f303 	mul.w	r3, r2, r3
 8002eb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eba:	6852      	ldr	r2, [r2, #4]
 8002ebc:	8812      	ldrh	r2, [r2, #0]
 8002ebe:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ec2:	857b      	strh	r3, [r7, #42]	@ 0x2a
	ssd1306_Fill(Black);
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f000 fc6d 	bl	80037a4 <ssd1306_Fill>
	ssd1306_SetCursor( SSD1306_WIDTH/2 - LARGO_LETRA_MEDIANA*strlen(Display_Data->Etiqueta)/2, 0);
 8002eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd f93c 	bl	800014c <strlen>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	085b      	lsrs	r3, r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 fda3 	bl	8003a38 <ssd1306_SetCursor>
	ssd1306_WriteString((Display_Data)->Etiqueta, Font_11x18, White);
 8002ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	4bad      	ldr	r3, [pc, #692]	@ (80031ac <Display_Nivel+0x310>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	9200      	str	r2, [sp, #0]
 8002efc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002efe:	f000 fd75 	bl	80039ec <ssd1306_WriteString>


	uint16_t estado = Nivel_En_Porcentaje - Nivel_En_Porcentaje%20; //Nomas cambia de a 20 puntos
 8002f02:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002f04:	4baa      	ldr	r3, [pc, #680]	@ (80031b0 <Display_Nivel+0x314>)
 8002f06:	fba3 1302 	umull	r1, r3, r3, r2
 8002f0a:	0919      	lsrs	r1, r3, #4
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	853b      	strh	r3, [r7, #40]	@ 0x28
	char buffer[] = {" 100 %% "};
 8002f1e:	4aa5      	ldr	r2, [pc, #660]	@ (80031b4 <Display_Nivel+0x318>)
 8002f20:	f107 031c 	add.w	r3, r7, #28
 8002f24:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f26:	c303      	stmia	r3!, {r0, r1}
 8002f28:	701a      	strb	r2, [r3, #0]
	char* formatos[] = {"%hu ml", "%hu %%", "0%hu %%", "00%hu %%"};
 8002f2a:	4ba3      	ldr	r3, [pc, #652]	@ (80031b8 <Display_Nivel+0x31c>)
 8002f2c:	f107 040c 	add.w	r4, r7, #12
 8002f30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t Niveles[] = {Nivel_De_Agua, Nivel_En_Porcentaje};
 8002f36:	887b      	ldrh	r3, [r7, #2]
 8002f38:	813b      	strh	r3, [r7, #8]
 8002f3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002f3c:	817b      	strh	r3, [r7, #10]

	switch (estado)
 8002f3e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002f40:	2b64      	cmp	r3, #100	@ 0x64
 8002f42:	d019      	beq.n	8002f78 <Display_Nivel+0xdc>
 8002f44:	2b64      	cmp	r3, #100	@ 0x64
 8002f46:	f300 812c 	bgt.w	80031a2 <Display_Nivel+0x306>
 8002f4a:	2b50      	cmp	r3, #80	@ 0x50
 8002f4c:	d03d      	beq.n	8002fca <Display_Nivel+0x12e>
 8002f4e:	2b50      	cmp	r3, #80	@ 0x50
 8002f50:	f300 8127 	bgt.w	80031a2 <Display_Nivel+0x306>
 8002f54:	2b3c      	cmp	r3, #60	@ 0x3c
 8002f56:	d062      	beq.n	800301e <Display_Nivel+0x182>
 8002f58:	2b3c      	cmp	r3, #60	@ 0x3c
 8002f5a:	f300 8122 	bgt.w	80031a2 <Display_Nivel+0x306>
 8002f5e:	2b28      	cmp	r3, #40	@ 0x28
 8002f60:	f000 8087 	beq.w	8003072 <Display_Nivel+0x1d6>
 8002f64:	2b28      	cmp	r3, #40	@ 0x28
 8002f66:	f300 811c 	bgt.w	80031a2 <Display_Nivel+0x306>
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 80d5 	beq.w	800311a <Display_Nivel+0x27e>
 8002f70:	2b14      	cmp	r3, #20
 8002f72:	f000 80a8 	beq.w	80030c6 <Display_Nivel+0x22a>
		ssd1306_SetCursor( SSD1306_WIDTH/2 - (2.5*LARGO_LETRA_GRANDE), SSD1306_HEIGHT/2);
		ssd1306_WriteString(buffer, Font_16x24, White);
		ssd1306_DrawBitmap(SSD1306_WIDTH/2 + 2.5*LARGO_LETRA_GRANDE + 2, SSD1306_HEIGHT/2, Sprite_Termo_0_16x24, 16,24, White);
		break;
	}
}
 8002f76:	e114      	b.n	80031a2 <Display_Nivel+0x306>
		sprintf(buffer, formatos[Unidad], Niveles[Unidad] );
 8002f78:	787b      	ldrb	r3, [r7, #1]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	3330      	adds	r3, #48	@ 0x30
 8002f7e:	443b      	add	r3, r7
 8002f80:	f853 1c24 	ldr.w	r1, [r3, #-36]
 8002f84:	787b      	ldrb	r3, [r7, #1]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	3330      	adds	r3, #48	@ 0x30
 8002f8a:	443b      	add	r3, r7
 8002f8c:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8002f90:	461a      	mov	r2, r3
 8002f92:	f107 031c 	add.w	r3, r7, #28
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fe7a 	bl	8003c90 <siprintf>
		ssd1306_SetCursor( SSD1306_WIDTH/2 - (2.5*LARGO_LETRA_GRANDE), SSD1306_HEIGHT/2);
 8002f9c:	2120      	movs	r1, #32
 8002f9e:	2018      	movs	r0, #24
 8002fa0:	f000 fd4a 	bl	8003a38 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_16x24, White);
 8002fa4:	4b85      	ldr	r3, [pc, #532]	@ (80031bc <Display_Nivel+0x320>)
 8002fa6:	f107 001c 	add.w	r0, r7, #28
 8002faa:	2201      	movs	r2, #1
 8002fac:	9200      	str	r2, [sp, #0]
 8002fae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fb0:	f000 fd1c 	bl	80039ec <ssd1306_WriteString>
		ssd1306_DrawBitmap(SSD1306_WIDTH/2 + 2.5*LARGO_LETRA_GRANDE + 2, SSD1306_HEIGHT/2, Sprite_Termo_100_16x24, 16,24, White);
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	2318      	movs	r3, #24
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	4a80      	ldr	r2, [pc, #512]	@ (80031c0 <Display_Nivel+0x324>)
 8002fc0:	2120      	movs	r1, #32
 8002fc2:	206a      	movs	r0, #106	@ 0x6a
 8002fc4:	f000 fdd7 	bl	8003b76 <ssd1306_DrawBitmap>
		break;
 8002fc8:	e0eb      	b.n	80031a2 <Display_Nivel+0x306>
		sprintf(buffer, formatos[2*Unidad], Niveles[Unidad] );
 8002fca:	787b      	ldrb	r3, [r7, #1]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	3330      	adds	r3, #48	@ 0x30
 8002fd2:	443b      	add	r3, r7
 8002fd4:	f853 1c24 	ldr.w	r1, [r3, #-36]
 8002fd8:	787b      	ldrb	r3, [r7, #1]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	3330      	adds	r3, #48	@ 0x30
 8002fde:	443b      	add	r3, r7
 8002fe0:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f107 031c 	add.w	r3, r7, #28
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fe50 	bl	8003c90 <siprintf>
		ssd1306_SetCursor( SSD1306_WIDTH/2 - (2.5*LARGO_LETRA_GRANDE), SSD1306_HEIGHT/2);
 8002ff0:	2120      	movs	r1, #32
 8002ff2:	2018      	movs	r0, #24
 8002ff4:	f000 fd20 	bl	8003a38 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_16x24, White);
 8002ff8:	4b70      	ldr	r3, [pc, #448]	@ (80031bc <Display_Nivel+0x320>)
 8002ffa:	f107 001c 	add.w	r0, r7, #28
 8002ffe:	2201      	movs	r2, #1
 8003000:	9200      	str	r2, [sp, #0]
 8003002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003004:	f000 fcf2 	bl	80039ec <ssd1306_WriteString>
		ssd1306_DrawBitmap(SSD1306_WIDTH/2 + 2.5*LARGO_LETRA_GRANDE + 2, SSD1306_HEIGHT/2, Sprite_Termo_80_16x24, 16,24, White);
 8003008:	2301      	movs	r3, #1
 800300a:	9301      	str	r3, [sp, #4]
 800300c:	2318      	movs	r3, #24
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	2310      	movs	r3, #16
 8003012:	4a6c      	ldr	r2, [pc, #432]	@ (80031c4 <Display_Nivel+0x328>)
 8003014:	2120      	movs	r1, #32
 8003016:	206a      	movs	r0, #106	@ 0x6a
 8003018:	f000 fdad 	bl	8003b76 <ssd1306_DrawBitmap>
		break;
 800301c:	e0c1      	b.n	80031a2 <Display_Nivel+0x306>
		sprintf(buffer, formatos[2*Unidad], Niveles[Unidad] );
 800301e:	787b      	ldrb	r3, [r7, #1]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	3330      	adds	r3, #48	@ 0x30
 8003026:	443b      	add	r3, r7
 8003028:	f853 1c24 	ldr.w	r1, [r3, #-36]
 800302c:	787b      	ldrb	r3, [r7, #1]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	3330      	adds	r3, #48	@ 0x30
 8003032:	443b      	add	r3, r7
 8003034:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8003038:	461a      	mov	r2, r3
 800303a:	f107 031c 	add.w	r3, r7, #28
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fe26 	bl	8003c90 <siprintf>
		ssd1306_SetCursor( SSD1306_WIDTH/2 - (2.5*LARGO_LETRA_GRANDE), SSD1306_HEIGHT/2);
 8003044:	2120      	movs	r1, #32
 8003046:	2018      	movs	r0, #24
 8003048:	f000 fcf6 	bl	8003a38 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_16x24, White);
 800304c:	4b5b      	ldr	r3, [pc, #364]	@ (80031bc <Display_Nivel+0x320>)
 800304e:	f107 001c 	add.w	r0, r7, #28
 8003052:	2201      	movs	r2, #1
 8003054:	9200      	str	r2, [sp, #0]
 8003056:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003058:	f000 fcc8 	bl	80039ec <ssd1306_WriteString>
		ssd1306_DrawBitmap(SSD1306_WIDTH/2 + 2.5*LARGO_LETRA_GRANDE + 2, SSD1306_HEIGHT/2, Sprite_Termo_60_16x24, 16,24, White);
 800305c:	2301      	movs	r3, #1
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	2318      	movs	r3, #24
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	2310      	movs	r3, #16
 8003066:	4a58      	ldr	r2, [pc, #352]	@ (80031c8 <Display_Nivel+0x32c>)
 8003068:	2120      	movs	r1, #32
 800306a:	206a      	movs	r0, #106	@ 0x6a
 800306c:	f000 fd83 	bl	8003b76 <ssd1306_DrawBitmap>
		break;
 8003070:	e097      	b.n	80031a2 <Display_Nivel+0x306>
		sprintf(buffer, formatos[2*Unidad], Niveles[Unidad] );
 8003072:	787b      	ldrb	r3, [r7, #1]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	3330      	adds	r3, #48	@ 0x30
 800307a:	443b      	add	r3, r7
 800307c:	f853 1c24 	ldr.w	r1, [r3, #-36]
 8003080:	787b      	ldrb	r3, [r7, #1]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	3330      	adds	r3, #48	@ 0x30
 8003086:	443b      	add	r3, r7
 8003088:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800308c:	461a      	mov	r2, r3
 800308e:	f107 031c 	add.w	r3, r7, #28
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fdfc 	bl	8003c90 <siprintf>
		ssd1306_SetCursor( SSD1306_WIDTH/2 - (2.5*LARGO_LETRA_GRANDE), SSD1306_HEIGHT/2);
 8003098:	2120      	movs	r1, #32
 800309a:	2018      	movs	r0, #24
 800309c:	f000 fccc 	bl	8003a38 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_16x24, White);
 80030a0:	4b46      	ldr	r3, [pc, #280]	@ (80031bc <Display_Nivel+0x320>)
 80030a2:	f107 001c 	add.w	r0, r7, #28
 80030a6:	2201      	movs	r2, #1
 80030a8:	9200      	str	r2, [sp, #0]
 80030aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ac:	f000 fc9e 	bl	80039ec <ssd1306_WriteString>
		ssd1306_DrawBitmap(SSD1306_WIDTH/2 + 2.5*LARGO_LETRA_GRANDE + 2, SSD1306_HEIGHT/2, Sprite_Termo_40_16x24, 16,24, White);
 80030b0:	2301      	movs	r3, #1
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	2318      	movs	r3, #24
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	2310      	movs	r3, #16
 80030ba:	4a44      	ldr	r2, [pc, #272]	@ (80031cc <Display_Nivel+0x330>)
 80030bc:	2120      	movs	r1, #32
 80030be:	206a      	movs	r0, #106	@ 0x6a
 80030c0:	f000 fd59 	bl	8003b76 <ssd1306_DrawBitmap>
		break;
 80030c4:	e06d      	b.n	80031a2 <Display_Nivel+0x306>
		sprintf(buffer, formatos[2*Unidad], Niveles[Unidad] );
 80030c6:	787b      	ldrb	r3, [r7, #1]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	3330      	adds	r3, #48	@ 0x30
 80030ce:	443b      	add	r3, r7
 80030d0:	f853 1c24 	ldr.w	r1, [r3, #-36]
 80030d4:	787b      	ldrb	r3, [r7, #1]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	3330      	adds	r3, #48	@ 0x30
 80030da:	443b      	add	r3, r7
 80030dc:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80030e0:	461a      	mov	r2, r3
 80030e2:	f107 031c 	add.w	r3, r7, #28
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fdd2 	bl	8003c90 <siprintf>
		ssd1306_SetCursor( SSD1306_WIDTH/2 - (2.5*LARGO_LETRA_GRANDE), SSD1306_HEIGHT/2);
 80030ec:	2120      	movs	r1, #32
 80030ee:	2018      	movs	r0, #24
 80030f0:	f000 fca2 	bl	8003a38 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_16x24, White);
 80030f4:	4b31      	ldr	r3, [pc, #196]	@ (80031bc <Display_Nivel+0x320>)
 80030f6:	f107 001c 	add.w	r0, r7, #28
 80030fa:	2201      	movs	r2, #1
 80030fc:	9200      	str	r2, [sp, #0]
 80030fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003100:	f000 fc74 	bl	80039ec <ssd1306_WriteString>
		ssd1306_DrawBitmap(SSD1306_WIDTH/2 + 2.5*LARGO_LETRA_GRANDE + 2, SSD1306_HEIGHT/2, Sprite_Termo_20_16x24, 16,24, White);
 8003104:	2301      	movs	r3, #1
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	2318      	movs	r3, #24
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	2310      	movs	r3, #16
 800310e:	4a30      	ldr	r2, [pc, #192]	@ (80031d0 <Display_Nivel+0x334>)
 8003110:	2120      	movs	r1, #32
 8003112:	206a      	movs	r0, #106	@ 0x6a
 8003114:	f000 fd2f 	bl	8003b76 <ssd1306_DrawBitmap>
		break;
 8003118:	e043      	b.n	80031a2 <Display_Nivel+0x306>
		bool Mayor_Que_10 = Nivel_En_Porcentaje - Nivel_En_Porcentaje%10;
 800311a:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 800311c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800311e:	4b24      	ldr	r3, [pc, #144]	@ (80031b0 <Display_Nivel+0x314>)
 8003120:	fba3 1302 	umull	r1, r3, r3, r2
 8003124:	08d9      	lsrs	r1, r3, #3
 8003126:	460b      	mov	r3, r1
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	b29b      	uxth	r3, r3
 8003132:	1ac3      	subs	r3, r0, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf14      	ite	ne
 8003138:	2301      	movne	r3, #1
 800313a:	2300      	moveq	r3, #0
 800313c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		sprintf(buffer, formatos[(2+!Mayor_Que_10)*Unidad], Niveles[Unidad] );
 8003140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003144:	f083 0301 	eor.w	r3, r3, #1
 8003148:	b2db      	uxtb	r3, r3
 800314a:	3302      	adds	r3, #2
 800314c:	787a      	ldrb	r2, [r7, #1]
 800314e:	fb02 f303 	mul.w	r3, r2, r3
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	3330      	adds	r3, #48	@ 0x30
 8003156:	443b      	add	r3, r7
 8003158:	f853 1c24 	ldr.w	r1, [r3, #-36]
 800315c:	787b      	ldrb	r3, [r7, #1]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	3330      	adds	r3, #48	@ 0x30
 8003162:	443b      	add	r3, r7
 8003164:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8003168:	461a      	mov	r2, r3
 800316a:	f107 031c 	add.w	r3, r7, #28
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fd8e 	bl	8003c90 <siprintf>
		ssd1306_SetCursor( SSD1306_WIDTH/2 - (2.5*LARGO_LETRA_GRANDE), SSD1306_HEIGHT/2);
 8003174:	2120      	movs	r1, #32
 8003176:	2018      	movs	r0, #24
 8003178:	f000 fc5e 	bl	8003a38 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_16x24, White);
 800317c:	4b0f      	ldr	r3, [pc, #60]	@ (80031bc <Display_Nivel+0x320>)
 800317e:	f107 001c 	add.w	r0, r7, #28
 8003182:	2201      	movs	r2, #1
 8003184:	9200      	str	r2, [sp, #0]
 8003186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003188:	f000 fc30 	bl	80039ec <ssd1306_WriteString>
		ssd1306_DrawBitmap(SSD1306_WIDTH/2 + 2.5*LARGO_LETRA_GRANDE + 2, SSD1306_HEIGHT/2, Sprite_Termo_0_16x24, 16,24, White);
 800318c:	2301      	movs	r3, #1
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	2318      	movs	r3, #24
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	2310      	movs	r3, #16
 8003196:	4a0f      	ldr	r2, [pc, #60]	@ (80031d4 <Display_Nivel+0x338>)
 8003198:	2120      	movs	r1, #32
 800319a:	206a      	movs	r0, #106	@ 0x6a
 800319c:	f000 fceb 	bl	8003b76 <ssd1306_DrawBitmap>
		break;
 80031a0:	bf00      	nop
}
 80031a2:	bf00      	nop
 80031a4:	3734      	adds	r7, #52	@ 0x34
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd90      	pop	{r4, r7, pc}
 80031aa:	bf00      	nop
 80031ac:	08006780 	.word	0x08006780
 80031b0:	cccccccd 	.word	0xcccccccd
 80031b4:	08004640 	.word	0x08004640
 80031b8:	08004668 	.word	0x08004668
 80031bc:	0800678c 	.word	0x0800678c
 80031c0:	08004824 	.word	0x08004824
 80031c4:	080047f4 	.word	0x080047f4
 80031c8:	080047c4 	.word	0x080047c4
 80031cc:	08004794 	.word	0x08004794
 80031d0:	08004764 	.word	0x08004764
 80031d4:	08004734 	.word	0x08004734

080031d8 <Leer_Encoder_Init>:
# define CICLOS_DE_ESPERA 5



void Leer_Encoder_Init(void *param, void *timer)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]

Encoder_t *Encoder = (Encoder_t *) param;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	60fb      	str	r3, [r7, #12]

Encoder->Timer= (TIM_HandleTypeDef *) timer;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	601a      	str	r2, [r3, #0]
Encoder->Posicion=0;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	809a      	strh	r2, [r3, #4]
Encoder->Tick = 0;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	811a      	strh	r2, [r3, #8]

HAL_TIM_Encoder_Start(Encoder->Timer, TIM_CHANNEL_ALL);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	213c      	movs	r1, #60	@ 0x3c
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fa00 	bl	8002604 <HAL_TIM_Encoder_Start>

Encoder->Ultimo_Valor = __HAL_TIM_GET_COUNTER(Encoder->Timer);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	60da      	str	r2, [r3, #12]

}
 8003210:	bf00      	nop
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <Leer_Encoder_Update>:

//uint32_t Cuenta_Encoder = 0;


void Leer_Encoder_Update(void *param)
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
	// Cuenta_Encoder = (__HAL_TIM_GET_COUNTER(Encoder.Timer)/VALOR_DE_UN_PASO)%PASOS_ENCODER;

	// Se carga el puntero a estructura
	Encoder_t *Encoder = (Encoder_t *) param;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	617b      	str	r3, [r7, #20]

	// Se guardan valores pertimentes
	uint32_t Cuenta_Cruda = __HAL_TIM_GET_COUNTER(Encoder->Timer);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	613b      	str	r3, [r7, #16]
	uint16_t estado = Encoder->Estado;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	88db      	ldrh	r3, [r3, #6]
 8003232:	81fb      	strh	r3, [r7, #14]

	switch (estado)
 8003234:	89fb      	ldrh	r3, [r7, #14]
 8003236:	2b14      	cmp	r3, #20
 8003238:	f200 80d0 	bhi.w	80033dc <Leer_Encoder_Update+0x1c4>
 800323c:	a201      	add	r2, pc, #4	@ (adr r2, 8003244 <Leer_Encoder_Update+0x2c>)
 800323e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003242:	bf00      	nop
 8003244:	080032f9 	.word	0x080032f9
 8003248:	08003299 	.word	0x08003299
 800324c:	0800339f 	.word	0x0800339f
 8003250:	080033dd 	.word	0x080033dd
 8003254:	080033dd 	.word	0x080033dd
 8003258:	080033dd 	.word	0x080033dd
 800325c:	080033dd 	.word	0x080033dd
 8003260:	080033dd 	.word	0x080033dd
 8003264:	080033dd 	.word	0x080033dd
 8003268:	080033dd 	.word	0x080033dd
 800326c:	080033dd 	.word	0x080033dd
 8003270:	080033dd 	.word	0x080033dd
 8003274:	080033dd 	.word	0x080033dd
 8003278:	080033dd 	.word	0x080033dd
 800327c:	080033dd 	.word	0x080033dd
 8003280:	080033dd 	.word	0x080033dd
 8003284:	080033dd 	.word	0x080033dd
 8003288:	080033dd 	.word	0x080033dd
 800328c:	080033dd 	.word	0x080033dd
 8003290:	080033dd 	.word	0x080033dd
 8003294:	0800334b 	.word	0x0800334b
	{
	case VALOR_ENCODER_MEDIO :
		if (Cuenta_Cruda >= Encoder->Ultimo_Valor + VALOR_DE_UN_PASO)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	3302      	adds	r3, #2
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d30f      	bcc.n	80032c4 <Leer_Encoder_Update+0xac>
		{
			Encoder->Posicion++;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	889b      	ldrh	r3, [r3, #4]
 80032a8:	3301      	adds	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	809a      	strh	r2, [r3, #4]
			Encoder->Ultimo_Valor = Cuenta_Cruda;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	60da      	str	r2, [r3, #12]
			Encoder->Estado = ENCODER_EN_ESPERA;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2202      	movs	r2, #2
 80032ba:	80da      	strh	r2, [r3, #6]
			Encoder->Tick = 0;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2200      	movs	r2, #0
 80032c0:	811a      	strh	r2, [r3, #8]
			break;
 80032c2:	e08b      	b.n	80033dc <Leer_Encoder_Update+0x1c4>
		}
		else if (Cuenta_Cruda <= Encoder->Ultimo_Valor - VALOR_DE_UN_PASO)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	3b02      	subs	r3, #2
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d80f      	bhi.n	80032f0 <Leer_Encoder_Update+0xd8>
		{
			Encoder->Posicion--;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	889b      	ldrh	r3, [r3, #4]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	809a      	strh	r2, [r3, #4]
			Encoder->Ultimo_Valor = Cuenta_Cruda;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	60da      	str	r2, [r3, #12]
			Encoder->Estado = (uint16_t) ENCODER_EN_ESPERA;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2202      	movs	r2, #2
 80032e6:	80da      	strh	r2, [r3, #6]
			Encoder->Tick = 0;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2200      	movs	r2, #0
 80032ec:	811a      	strh	r2, [r3, #8]
			break;
 80032ee:	e075      	b.n	80033dc <Leer_Encoder_Update+0x1c4>
		}
		else
		{
			Encoder->Ultimo_Valor = Cuenta_Cruda;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	60da      	str	r2, [r3, #12]
			break;
 80032f6:	e071      	b.n	80033dc <Leer_Encoder_Update+0x1c4>
		}
	case VALOR_ENCODER_CERO :
			if (Cuenta_Cruda >= Encoder->Ultimo_Valor + VALOR_DE_UN_PASO)
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	3302      	adds	r3, #2
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	429a      	cmp	r2, r3
 8003302:	d30f      	bcc.n	8003324 <Leer_Encoder_Update+0x10c>
			{
				Encoder->Posicion++;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	889b      	ldrh	r3, [r3, #4]
 8003308:	3301      	adds	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	809a      	strh	r2, [r3, #4]
				Encoder->Ultimo_Valor = Cuenta_Cruda;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	60da      	str	r2, [r3, #12]
				Encoder->Estado = (uint16_t) ENCODER_EN_ESPERA;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2202      	movs	r2, #2
 800331a:	80da      	strh	r2, [r3, #6]
				Encoder->Tick = 0;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2200      	movs	r2, #0
 8003320:	811a      	strh	r2, [r3, #8]
				break;
 8003322:	e05b      	b.n	80033dc <Leer_Encoder_Update+0x1c4>
			}
			else if (Cuenta_Cruda <= Encoder->Ultimo_Valor - VALOR_DE_UN_PASO)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	3b02      	subs	r3, #2
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	429a      	cmp	r2, r3
 800332e:	d80c      	bhi.n	800334a <Leer_Encoder_Update+0x132>
			{
				Encoder->Posicion = VALOR_ENCODER_FINAL	-1;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2213      	movs	r2, #19
 8003334:	809a      	strh	r2, [r3, #4]
				Encoder->Ultimo_Valor = Cuenta_Cruda;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	60da      	str	r2, [r3, #12]
				Encoder->Estado = (uint16_t) ENCODER_EN_ESPERA;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2202      	movs	r2, #2
 8003340:	80da      	strh	r2, [r3, #6]
				Encoder->Tick = 0;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2200      	movs	r2, #0
 8003346:	811a      	strh	r2, [r3, #8]
				break;
 8003348:	e048      	b.n	80033dc <Leer_Encoder_Update+0x1c4>
			}
	case VALOR_ENCODER_FINAL :
			if (Cuenta_Cruda >= Encoder->Ultimo_Valor + VALOR_DE_UN_PASO)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	3302      	adds	r3, #2
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	429a      	cmp	r2, r3
 8003354:	d30c      	bcc.n	8003370 <Leer_Encoder_Update+0x158>
			{
				Encoder->Posicion = VALOR_ENCODER_CERO;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2200      	movs	r2, #0
 800335a:	809a      	strh	r2, [r3, #4]
				Encoder->Ultimo_Valor = Cuenta_Cruda;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	60da      	str	r2, [r3, #12]
				Encoder->Estado = ENCODER_EN_ESPERA;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2202      	movs	r2, #2
 8003366:	80da      	strh	r2, [r3, #6]
				Encoder->Tick = 0;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2200      	movs	r2, #0
 800336c:	811a      	strh	r2, [r3, #8]
				break;
 800336e:	e035      	b.n	80033dc <Leer_Encoder_Update+0x1c4>
			}
			else if (Cuenta_Cruda <= Encoder->Ultimo_Valor - VALOR_DE_UN_PASO)
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	3b02      	subs	r3, #2
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	429a      	cmp	r2, r3
 800337a:	d80c      	bhi.n	8003396 <Leer_Encoder_Update+0x17e>
			{
				Encoder->Posicion = 19;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2213      	movs	r2, #19
 8003380:	809a      	strh	r2, [r3, #4]
				Encoder->Ultimo_Valor = Cuenta_Cruda;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	60da      	str	r2, [r3, #12]
				Encoder->Estado = ENCODER_EN_ESPERA;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2202      	movs	r2, #2
 800338c:	80da      	strh	r2, [r3, #6]
				Encoder->Tick = 0;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2200      	movs	r2, #0
 8003392:	811a      	strh	r2, [r3, #8]
				break;
 8003394:	e022      	b.n	80033dc <Leer_Encoder_Update+0x1c4>
			}
			else
			{
				Encoder->Ultimo_Valor = Cuenta_Cruda;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	60da      	str	r2, [r3, #12]
				break;
 800339c:	e01e      	b.n	80033dc <Leer_Encoder_Update+0x1c4>
			}
	case ENCODER_EN_ESPERA:
		if (Encoder->Tick < CICLOS_DE_ESPERA)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	891b      	ldrh	r3, [r3, #8]
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d806      	bhi.n	80033b4 <Leer_Encoder_Update+0x19c>
		{
			Encoder->Tick++;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	891b      	ldrh	r3, [r3, #8]
 80033aa:	3301      	adds	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	811a      	strh	r2, [r3, #8]
			break;
		}
	}

	//Cuenta_Encoder = (__HAL_TIM_GET_COUNTER(&htim1)/VALOR_DE_UN_PASO)%PASOS_ENCODER;
}
 80033b2:	e013      	b.n	80033dc <Leer_Encoder_Update+0x1c4>
		else if(VALOR_ENCODER_CERO < Encoder->Posicion && Encoder->Posicion < VALOR_ENCODER_FINAL)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	889b      	ldrh	r3, [r3, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <Leer_Encoder_Update+0x1ba>
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	889b      	ldrh	r3, [r3, #4]
 80033c0:	2b13      	cmp	r3, #19
 80033c2:	d806      	bhi.n	80033d2 <Leer_Encoder_Update+0x1ba>
			Encoder->Estado = (uint16_t) VALOR_ENCODER_MEDIO;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2201      	movs	r2, #1
 80033c8:	80da      	strh	r2, [r3, #6]
			Encoder->Ultimo_Valor = Cuenta_Cruda;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	60da      	str	r2, [r3, #12]
			break;
 80033d0:	e004      	b.n	80033dc <Leer_Encoder_Update+0x1c4>
			Encoder->Estado = Encoder->Posicion;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	889a      	ldrh	r2, [r3, #4]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	80da      	strh	r2, [r3, #6]
			break;
 80033da:	bf00      	nop
}
 80033dc:	bf00      	nop
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop

080033e8 <app_init>:


// Funciones de la aplicación

void app_init(void)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0


	// INICIALIZA ENCODER
	Leer_Encoder_Init(&Encoder, &htim1);
 80033ee:	4919      	ldr	r1, [pc, #100]	@ (8003454 <app_init+0x6c>)
 80033f0:	4819      	ldr	r0, [pc, #100]	@ (8003458 <app_init+0x70>)
 80033f2:	f7ff fef1 	bl	80031d8 <Leer_Encoder_Init>
	Ultima_Posicion_Del_Encoder = Encoder.Posicion;
 80033f6:	4b18      	ldr	r3, [pc, #96]	@ (8003458 <app_init+0x70>)
 80033f8:	889a      	ldrh	r2, [r3, #4]
 80033fa:	4b18      	ldr	r3, [pc, #96]	@ (800345c <app_init+0x74>)
 80033fc:	801a      	strh	r2, [r3, #0]
	//INICIALIZA MENU Y DISPLAY
	ssd1306_Init();
 80033fe:	f000 f967 	bl	80036d0 <ssd1306_Init>
	for (int i = 0; i < CANTIDAD_DE_OPCIONES_MENU_PPAL; i++)
 8003402:	2300      	movs	r3, #0
 8003404:	607b      	str	r3, [r7, #4]
 8003406:	e014      	b.n	8003432 <app_init+0x4a>
		{
			Opcion_Init(Opciones_Menu_Ppal+i, Etiquetas_Menu_Ppal[i], &(Default_Data[i]), Iconos_Menu_Ppal[i]);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	4a14      	ldr	r2, [pc, #80]	@ (8003460 <app_init+0x78>)
 800340e:	1898      	adds	r0, r3, r2
 8003410:	4a14      	ldr	r2, [pc, #80]	@ (8003464 <app_init+0x7c>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4a12      	ldr	r2, [pc, #72]	@ (8003468 <app_init+0x80>)
 800341e:	441a      	add	r2, r3
 8003420:	4c12      	ldr	r4, [pc, #72]	@ (800346c <app_init+0x84>)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003428:	f7ff fb48 	bl	8002abc <Opcion_Init>
	for (int i = 0; i < CANTIDAD_DE_OPCIONES_MENU_PPAL; i++)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3301      	adds	r3, #1
 8003430:	607b      	str	r3, [r7, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d9e7      	bls.n	8003408 <app_init+0x20>
		}

	Menu_init(&Menu_Ppal, Etiqueta_De_Menu, Opciones_Menu_Ppal, CANTIDAD_DE_OPCIONES_MENU_PPAL);
 8003438:	4b0d      	ldr	r3, [pc, #52]	@ (8003470 <app_init+0x88>)
 800343a:	6819      	ldr	r1, [r3, #0]
 800343c:	2303      	movs	r3, #3
 800343e:	4a08      	ldr	r2, [pc, #32]	@ (8003460 <app_init+0x78>)
 8003440:	480c      	ldr	r0, [pc, #48]	@ (8003474 <app_init+0x8c>)
 8003442:	f7ff fb50 	bl	8002ae6 <Menu_init>
	Menu_Es_No_Ppal = true;
 8003446:	4b0c      	ldr	r3, [pc, #48]	@ (8003478 <app_init+0x90>)
 8003448:	2201      	movs	r2, #1
 800344a:	701a      	strb	r2, [r3, #0]

}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	bd90      	pop	{r4, r7, pc}
 8003454:	20000400 	.word	0x20000400
 8003458:	20000498 	.word	0x20000498
 800345c:	200004e8 	.word	0x200004e8
 8003460:	200004a8 	.word	0x200004a8
 8003464:	20000320 	.word	0x20000320
 8003468:	20000318 	.word	0x20000318
 800346c:	20000330 	.word	0x20000330
 8003470:	2000032c 	.word	0x2000032c
 8003474:	200004d8 	.word	0x200004d8
 8003478:	200004e7 	.word	0x200004e7

0800347c <app_update>:

void app_update(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
	Leer_Encoder_Update(&Encoder);
 8003480:	486c      	ldr	r0, [pc, #432]	@ (8003634 <app_update+0x1b8>)
 8003482:	f7ff fec9 	bl	8003218 <Leer_Encoder_Update>
	Posicion_Menu = (Encoder.Posicion)%3;
 8003486:	4b6b      	ldr	r3, [pc, #428]	@ (8003634 <app_update+0x1b8>)
 8003488:	889a      	ldrh	r2, [r3, #4]
 800348a:	4b6b      	ldr	r3, [pc, #428]	@ (8003638 <app_update+0x1bc>)
 800348c:	fba3 1302 	umull	r1, r3, r3, r2
 8003490:	0859      	lsrs	r1, r3, #1
 8003492:	460b      	mov	r3, r1
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	440b      	add	r3, r1
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	b29b      	uxth	r3, r3
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4b67      	ldr	r3, [pc, #412]	@ (800363c <app_update+0x1c0>)
 80034a0:	701a      	strb	r2, [r3, #0]


	if(!HAL_GPIO_ReadPin(GPIOC, B1_Pin))
 80034a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80034a6:	4866      	ldr	r0, [pc, #408]	@ (8003640 <app_update+0x1c4>)
 80034a8:	f7fd fefc 	bl	80012a4 <HAL_GPIO_ReadPin>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d112      	bne.n	80034d8 <app_update+0x5c>
	{
		Menu_Es_No_Ppal = !Menu_Es_No_Ppal;
 80034b2:	4b64      	ldr	r3, [pc, #400]	@ (8003644 <app_update+0x1c8>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bf14      	ite	ne
 80034ba:	2301      	movne	r3, #1
 80034bc:	2300      	moveq	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f083 0301 	eor.w	r3, r3, #1
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	4b5d      	ldr	r3, [pc, #372]	@ (8003644 <app_update+0x1c8>)
 80034ce:	701a      	strb	r2, [r3, #0]
		Posicion_En_Cambio = Posicion_Menu;
 80034d0:	4b5a      	ldr	r3, [pc, #360]	@ (800363c <app_update+0x1c0>)
 80034d2:	781a      	ldrb	r2, [r3, #0]
 80034d4:	4b5c      	ldr	r3, [pc, #368]	@ (8003648 <app_update+0x1cc>)
 80034d6:	701a      	strb	r2, [r3, #0]

	}
	Navegacion_Menu = Menu_Es_No_Ppal*(Posicion_Menu+1);
 80034d8:	4b5a      	ldr	r3, [pc, #360]	@ (8003644 <app_update+0x1c8>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	4b57      	ldr	r3, [pc, #348]	@ (800363c <app_update+0x1c0>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	3301      	adds	r3, #1
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	fb02 f303 	mul.w	r3, r2, r3
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	4b57      	ldr	r3, [pc, #348]	@ (800364c <app_update+0x1d0>)
 80034ee:	701a      	strb	r2, [r3, #0]


	switch(Navegacion_Menu)
 80034f0:	4b56      	ldr	r3, [pc, #344]	@ (800364c <app_update+0x1d0>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	f200 8095 	bhi.w	8003624 <app_update+0x1a8>
 80034fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003500 <app_update+0x84>)
 80034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003500:	08003511 	.word	0x08003511
 8003504:	08003525 	.word	0x08003525
 8003508:	08003579 	.word	0x08003579
 800350c:	080035c5 	.word	0x080035c5
	{
	case MENU_PPAL:
		Display_Menu_Ppal((Menu_Ppal.Opciones) + Posicion_Menu);
 8003510:	4b4f      	ldr	r3, [pc, #316]	@ (8003650 <app_update+0x1d4>)
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	4b49      	ldr	r3, [pc, #292]	@ (800363c <app_update+0x1c0>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	4413      	add	r3, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fafd 	bl	8002b1c <Display_Menu_Ppal>
		break;
 8003522:	e07f      	b.n	8003624 <app_update+0x1a8>
	case MENU_TEMPERATURA:
		if (Posicion_Menu != Posicion_En_Cambio)
 8003524:	4b45      	ldr	r3, [pc, #276]	@ (800363c <app_update+0x1c0>)
 8003526:	781a      	ldrb	r2, [r3, #0]
 8003528:	4b47      	ldr	r3, [pc, #284]	@ (8003648 <app_update+0x1cc>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d01a      	beq.n	8003566 <app_update+0xea>
		{
			*((uint16_t*)(Menu_Ppal.Opciones->Valor)) += (Encoder.Posicion - Ultima_Posicion_Del_Encoder);
 8003530:	4b47      	ldr	r3, [pc, #284]	@ (8003650 <app_update+0x1d4>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	8819      	ldrh	r1, [r3, #0]
 8003538:	4b3e      	ldr	r3, [pc, #248]	@ (8003634 <app_update+0x1b8>)
 800353a:	889a      	ldrh	r2, [r3, #4]
 800353c:	4b45      	ldr	r3, [pc, #276]	@ (8003654 <app_update+0x1d8>)
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	b29a      	uxth	r2, r3
 8003544:	4b42      	ldr	r3, [pc, #264]	@ (8003650 <app_update+0x1d4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	440a      	add	r2, r1
 800354c:	b292      	uxth	r2, r2
 800354e:	801a      	strh	r2, [r3, #0]
			Display_Temperatura(Menu_Ppal.Opciones, *((uint16_t*)(Menu_Ppal.Opciones)->Valor));
 8003550:	4b3f      	ldr	r3, [pc, #252]	@ (8003650 <app_update+0x1d4>)
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	4b3e      	ldr	r3, [pc, #248]	@ (8003650 <app_update+0x1d4>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	4619      	mov	r1, r3
 800355e:	4610      	mov	r0, r2
 8003560:	f7ff fb28 	bl	8002bb4 <Display_Temperatura>
			break;
 8003564:	e05e      	b.n	8003624 <app_update+0x1a8>
		}else{Display_Temperatura(Menu_Ppal.Opciones, Temperatura_Medida_Por_Sensor);break;}
 8003566:	4b3a      	ldr	r3, [pc, #232]	@ (8003650 <app_update+0x1d4>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	4a3b      	ldr	r2, [pc, #236]	@ (8003658 <app_update+0x1dc>)
 800356c:	8812      	ldrh	r2, [r2, #0]
 800356e:	4611      	mov	r1, r2
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fb1f 	bl	8002bb4 <Display_Temperatura>
 8003576:	e055      	b.n	8003624 <app_update+0x1a8>
	case MENU_CAPACIDAD:
		if (Posicion_Menu != Posicion_En_Cambio)
 8003578:	4b30      	ldr	r3, [pc, #192]	@ (800363c <app_update+0x1c0>)
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	4b32      	ldr	r3, [pc, #200]	@ (8003648 <app_update+0x1cc>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d018      	beq.n	80035b6 <app_update+0x13a>
		{
			*( (uint16_t*)( ( (Menu_Ppal.Opciones) +1) ->Valor) ) += (Encoder.Posicion - Ultima_Posicion_Del_Encoder);
 8003584:	4b32      	ldr	r3, [pc, #200]	@ (8003650 <app_update+0x1d4>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	3310      	adds	r3, #16
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	8819      	ldrh	r1, [r3, #0]
 800358e:	4b29      	ldr	r3, [pc, #164]	@ (8003634 <app_update+0x1b8>)
 8003590:	889a      	ldrh	r2, [r3, #4]
 8003592:	4b30      	ldr	r3, [pc, #192]	@ (8003654 <app_update+0x1d8>)
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	b29a      	uxth	r2, r3
 800359a:	4b2d      	ldr	r3, [pc, #180]	@ (8003650 <app_update+0x1d4>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	3310      	adds	r3, #16
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	440a      	add	r2, r1
 80035a4:	b292      	uxth	r2, r2
 80035a6:	801a      	strh	r2, [r3, #0]
			Display_Capacidad((Menu_Ppal.Opciones)+1);
 80035a8:	4b29      	ldr	r3, [pc, #164]	@ (8003650 <app_update+0x1d4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	3310      	adds	r3, #16
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fbf8 	bl	8002da4 <Display_Capacidad>
			break;
 80035b4:	e036      	b.n	8003624 <app_update+0x1a8>
		}else{Display_Capacidad((Menu_Ppal.Opciones)+1);break;}
 80035b6:	4b26      	ldr	r3, [pc, #152]	@ (8003650 <app_update+0x1d4>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	3310      	adds	r3, #16
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fbf1 	bl	8002da4 <Display_Capacidad>
 80035c2:	e02f      	b.n	8003624 <app_update+0x1a8>
		break;
	case MENU_NIVEL:
		if (Posicion_Menu != Posicion_En_Cambio)
 80035c4:	4b1d      	ldr	r3, [pc, #116]	@ (800363c <app_update+0x1c0>)
 80035c6:	781a      	ldrb	r2, [r3, #0]
 80035c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003648 <app_update+0x1cc>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d01f      	beq.n	8003610 <app_update+0x194>
		{
			*((uint16_t*)(((Menu_Ppal.Opciones)+2)->Valor)) += (Encoder.Posicion - Ultima_Posicion_Del_Encoder);
 80035d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003650 <app_update+0x1d4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	3320      	adds	r3, #32
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	8819      	ldrh	r1, [r3, #0]
 80035da:	4b16      	ldr	r3, [pc, #88]	@ (8003634 <app_update+0x1b8>)
 80035dc:	889a      	ldrh	r2, [r3, #4]
 80035de:	4b1d      	ldr	r3, [pc, #116]	@ (8003654 <app_update+0x1d8>)
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003650 <app_update+0x1d4>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	3320      	adds	r3, #32
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	440a      	add	r2, r1
 80035f0:	b292      	uxth	r2, r2
 80035f2:	801a      	strh	r2, [r3, #0]
			Display_Nivel((Menu_Ppal.Opciones)+2, *((uint16_t*)(((Menu_Ppal.Opciones)+2)->Valor)), LITROS);
 80035f4:	4b16      	ldr	r3, [pc, #88]	@ (8003650 <app_update+0x1d4>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f103 0020 	add.w	r0, r3, #32
 80035fc:	4b14      	ldr	r3, [pc, #80]	@ (8003650 <app_update+0x1d4>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	3320      	adds	r3, #32
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	2200      	movs	r2, #0
 8003608:	4619      	mov	r1, r3
 800360a:	f7ff fc47 	bl	8002e9c <Display_Nivel>
			break;
 800360e:	e009      	b.n	8003624 <app_update+0x1a8>
		}else{Display_Nivel((Menu_Ppal.Opciones)+2, Nivel_De_Agua_Medido, PORCENTAJE);break;}
 8003610:	4b0f      	ldr	r3, [pc, #60]	@ (8003650 <app_update+0x1d4>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	3320      	adds	r3, #32
 8003616:	4a11      	ldr	r2, [pc, #68]	@ (800365c <app_update+0x1e0>)
 8003618:	8811      	ldrh	r1, [r2, #0]
 800361a:	2201      	movs	r2, #1
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fc3d 	bl	8002e9c <Display_Nivel>
 8003622:	bf00      	nop
		break;
	break;

	}
	Ultima_Posicion_Del_Encoder = Encoder.Posicion;
 8003624:	4b03      	ldr	r3, [pc, #12]	@ (8003634 <app_update+0x1b8>)
 8003626:	889a      	ldrh	r2, [r3, #4]
 8003628:	4b0a      	ldr	r3, [pc, #40]	@ (8003654 <app_update+0x1d8>)
 800362a:	801a      	strh	r2, [r3, #0]
	ssd1306_UpdateScreen();
 800362c:	f000 f8d2 	bl	80037d4 <ssd1306_UpdateScreen>
}
 8003630:	bf00      	nop
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20000498 	.word	0x20000498
 8003638:	aaaaaaab 	.word	0xaaaaaaab
 800363c:	200004e5 	.word	0x200004e5
 8003640:	40011000 	.word	0x40011000
 8003644:	200004e7 	.word	0x200004e7
 8003648:	200004e6 	.word	0x200004e6
 800364c:	200004e4 	.word	0x200004e4
 8003650:	200004d8 	.word	0x200004d8
 8003654:	200004e8 	.word	0x200004e8
 8003658:	2000033c 	.word	0x2000033c
 800365c:	2000033e 	.word	0x2000033e

08003660 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af04      	add	r7, sp, #16
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003676:	f04f 33ff 	mov.w	r3, #4294967295
 800367a:	9302      	str	r3, [sp, #8]
 800367c:	2301      	movs	r3, #1
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	1dfb      	adds	r3, r7, #7
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2301      	movs	r3, #1
 8003686:	2200      	movs	r2, #0
 8003688:	2178      	movs	r1, #120	@ 0x78
 800368a:	4803      	ldr	r0, [pc, #12]	@ (8003698 <ssd1306_WriteCommand+0x2c>)
 800368c:	f7fd ffa0 	bl	80015d0 <HAL_I2C_Mem_Write>
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	200003ac 	.word	0x200003ac

0800369c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af04      	add	r7, sp, #16
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f04f 32ff 	mov.w	r2, #4294967295
 80036ae:	9202      	str	r2, [sp, #8]
 80036b0:	9301      	str	r3, [sp, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	2301      	movs	r3, #1
 80036b8:	2240      	movs	r2, #64	@ 0x40
 80036ba:	2178      	movs	r1, #120	@ 0x78
 80036bc:	4803      	ldr	r0, [pc, #12]	@ (80036cc <ssd1306_WriteData+0x30>)
 80036be:	f7fd ff87 	bl	80015d0 <HAL_I2C_Mem_Write>
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200003ac 	.word	0x200003ac

080036d0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80036d4:	f7ff ffc4 	bl	8003660 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80036d8:	2064      	movs	r0, #100	@ 0x64
 80036da:	f7fd fb2d 	bl	8000d38 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80036de:	2000      	movs	r0, #0
 80036e0:	f000 fab8 	bl	8003c54 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80036e4:	2020      	movs	r0, #32
 80036e6:	f7ff ffc1 	bl	800366c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80036ea:	2000      	movs	r0, #0
 80036ec:	f7ff ffbe 	bl	800366c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80036f0:	20b0      	movs	r0, #176	@ 0xb0
 80036f2:	f7ff ffbb 	bl	800366c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80036f6:	20c8      	movs	r0, #200	@ 0xc8
 80036f8:	f7ff ffb8 	bl	800366c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80036fc:	2000      	movs	r0, #0
 80036fe:	f7ff ffb5 	bl	800366c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003702:	2010      	movs	r0, #16
 8003704:	f7ff ffb2 	bl	800366c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003708:	2040      	movs	r0, #64	@ 0x40
 800370a:	f7ff ffaf 	bl	800366c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800370e:	20ff      	movs	r0, #255	@ 0xff
 8003710:	f000 fa8c 	bl	8003c2c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003714:	20a1      	movs	r0, #161	@ 0xa1
 8003716:	f7ff ffa9 	bl	800366c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800371a:	20a6      	movs	r0, #166	@ 0xa6
 800371c:	f7ff ffa6 	bl	800366c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003720:	20a8      	movs	r0, #168	@ 0xa8
 8003722:	f7ff ffa3 	bl	800366c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003726:	203f      	movs	r0, #63	@ 0x3f
 8003728:	f7ff ffa0 	bl	800366c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800372c:	20a4      	movs	r0, #164	@ 0xa4
 800372e:	f7ff ff9d 	bl	800366c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003732:	20d3      	movs	r0, #211	@ 0xd3
 8003734:	f7ff ff9a 	bl	800366c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003738:	2000      	movs	r0, #0
 800373a:	f7ff ff97 	bl	800366c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800373e:	20d5      	movs	r0, #213	@ 0xd5
 8003740:	f7ff ff94 	bl	800366c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003744:	20f0      	movs	r0, #240	@ 0xf0
 8003746:	f7ff ff91 	bl	800366c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800374a:	20d9      	movs	r0, #217	@ 0xd9
 800374c:	f7ff ff8e 	bl	800366c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003750:	2022      	movs	r0, #34	@ 0x22
 8003752:	f7ff ff8b 	bl	800366c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003756:	20da      	movs	r0, #218	@ 0xda
 8003758:	f7ff ff88 	bl	800366c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800375c:	2012      	movs	r0, #18
 800375e:	f7ff ff85 	bl	800366c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003762:	20db      	movs	r0, #219	@ 0xdb
 8003764:	f7ff ff82 	bl	800366c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003768:	2020      	movs	r0, #32
 800376a:	f7ff ff7f 	bl	800366c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800376e:	208d      	movs	r0, #141	@ 0x8d
 8003770:	f7ff ff7c 	bl	800366c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003774:	2014      	movs	r0, #20
 8003776:	f7ff ff79 	bl	800366c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800377a:	2001      	movs	r0, #1
 800377c:	f000 fa6a 	bl	8003c54 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003780:	2000      	movs	r0, #0
 8003782:	f000 f80f 	bl	80037a4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003786:	f000 f825 	bl	80037d4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800378a:	4b05      	ldr	r3, [pc, #20]	@ (80037a0 <ssd1306_Init+0xd0>)
 800378c:	2200      	movs	r2, #0
 800378e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003790:	4b03      	ldr	r3, [pc, #12]	@ (80037a0 <ssd1306_Init+0xd0>)
 8003792:	2200      	movs	r2, #0
 8003794:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003796:	4b02      	ldr	r3, [pc, #8]	@ (80037a0 <ssd1306_Init+0xd0>)
 8003798:	2201      	movs	r2, #1
 800379a:	711a      	strb	r2, [r3, #4]
}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	200008ec 	.word	0x200008ec

080037a4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <ssd1306_Fill+0x14>
 80037b4:	2300      	movs	r3, #0
 80037b6:	e000      	b.n	80037ba <ssd1306_Fill+0x16>
 80037b8:	23ff      	movs	r3, #255	@ 0xff
 80037ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037be:	4619      	mov	r1, r3
 80037c0:	4803      	ldr	r0, [pc, #12]	@ (80037d0 <ssd1306_Fill+0x2c>)
 80037c2:	f000 faa1 	bl	8003d08 <memset>
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	200004ec 	.word	0x200004ec

080037d4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80037da:	2300      	movs	r3, #0
 80037dc:	71fb      	strb	r3, [r7, #7]
 80037de:	e016      	b.n	800380e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	3b50      	subs	r3, #80	@ 0x50
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff ff40 	bl	800366c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80037ec:	2000      	movs	r0, #0
 80037ee:	f7ff ff3d 	bl	800366c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80037f2:	2010      	movs	r0, #16
 80037f4:	f7ff ff3a 	bl	800366c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	01db      	lsls	r3, r3, #7
 80037fc:	4a08      	ldr	r2, [pc, #32]	@ (8003820 <ssd1306_UpdateScreen+0x4c>)
 80037fe:	4413      	add	r3, r2
 8003800:	2180      	movs	r1, #128	@ 0x80
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff ff4a 	bl	800369c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	3301      	adds	r3, #1
 800380c:	71fb      	strb	r3, [r7, #7]
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	2b07      	cmp	r3, #7
 8003812:	d9e5      	bls.n	80037e0 <ssd1306_UpdateScreen+0xc>
    }
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200004ec 	.word	0x200004ec

08003824 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]
 800382e:	460b      	mov	r3, r1
 8003830:	71bb      	strb	r3, [r7, #6]
 8003832:	4613      	mov	r3, r2
 8003834:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	2b00      	cmp	r3, #0
 800383c:	db3d      	blt.n	80038ba <ssd1306_DrawPixel+0x96>
 800383e:	79bb      	ldrb	r3, [r7, #6]
 8003840:	2b3f      	cmp	r3, #63	@ 0x3f
 8003842:	d83a      	bhi.n	80038ba <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003844:	797b      	ldrb	r3, [r7, #5]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d11a      	bne.n	8003880 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800384a:	79fa      	ldrb	r2, [r7, #7]
 800384c:	79bb      	ldrb	r3, [r7, #6]
 800384e:	08db      	lsrs	r3, r3, #3
 8003850:	b2d8      	uxtb	r0, r3
 8003852:	4603      	mov	r3, r0
 8003854:	01db      	lsls	r3, r3, #7
 8003856:	4413      	add	r3, r2
 8003858:	4a1a      	ldr	r2, [pc, #104]	@ (80038c4 <ssd1306_DrawPixel+0xa0>)
 800385a:	5cd3      	ldrb	r3, [r2, r3]
 800385c:	b25a      	sxtb	r2, r3
 800385e:	79bb      	ldrb	r3, [r7, #6]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	2101      	movs	r1, #1
 8003866:	fa01 f303 	lsl.w	r3, r1, r3
 800386a:	b25b      	sxtb	r3, r3
 800386c:	4313      	orrs	r3, r2
 800386e:	b259      	sxtb	r1, r3
 8003870:	79fa      	ldrb	r2, [r7, #7]
 8003872:	4603      	mov	r3, r0
 8003874:	01db      	lsls	r3, r3, #7
 8003876:	4413      	add	r3, r2
 8003878:	b2c9      	uxtb	r1, r1
 800387a:	4a12      	ldr	r2, [pc, #72]	@ (80038c4 <ssd1306_DrawPixel+0xa0>)
 800387c:	54d1      	strb	r1, [r2, r3]
 800387e:	e01d      	b.n	80038bc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003880:	79fa      	ldrb	r2, [r7, #7]
 8003882:	79bb      	ldrb	r3, [r7, #6]
 8003884:	08db      	lsrs	r3, r3, #3
 8003886:	b2d8      	uxtb	r0, r3
 8003888:	4603      	mov	r3, r0
 800388a:	01db      	lsls	r3, r3, #7
 800388c:	4413      	add	r3, r2
 800388e:	4a0d      	ldr	r2, [pc, #52]	@ (80038c4 <ssd1306_DrawPixel+0xa0>)
 8003890:	5cd3      	ldrb	r3, [r2, r3]
 8003892:	b25a      	sxtb	r2, r3
 8003894:	79bb      	ldrb	r3, [r7, #6]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	2101      	movs	r1, #1
 800389c:	fa01 f303 	lsl.w	r3, r1, r3
 80038a0:	b25b      	sxtb	r3, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	b25b      	sxtb	r3, r3
 80038a6:	4013      	ands	r3, r2
 80038a8:	b259      	sxtb	r1, r3
 80038aa:	79fa      	ldrb	r2, [r7, #7]
 80038ac:	4603      	mov	r3, r0
 80038ae:	01db      	lsls	r3, r3, #7
 80038b0:	4413      	add	r3, r2
 80038b2:	b2c9      	uxtb	r1, r1
 80038b4:	4a03      	ldr	r2, [pc, #12]	@ (80038c4 <ssd1306_DrawPixel+0xa0>)
 80038b6:	54d1      	strb	r1, [r2, r3]
 80038b8:	e000      	b.n	80038bc <ssd1306_DrawPixel+0x98>
        return;
 80038ba:	bf00      	nop
    }
}
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr
 80038c4:	200004ec 	.word	0x200004ec

080038c8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80038c8:	b590      	push	{r4, r7, lr}
 80038ca:	b089      	sub	sp, #36	@ 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4604      	mov	r4, r0
 80038d0:	4638      	mov	r0, r7
 80038d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80038d6:	4623      	mov	r3, r4
 80038d8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	2b1f      	cmp	r3, #31
 80038de:	d902      	bls.n	80038e6 <ssd1306_WriteChar+0x1e>
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b7e      	cmp	r3, #126	@ 0x7e
 80038e4:	d901      	bls.n	80038ea <ssd1306_WriteChar+0x22>
        return 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e079      	b.n	80039de <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <ssd1306_WriteChar+0x34>
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	3b20      	subs	r3, #32
 80038f6:	4413      	add	r3, r2
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	e000      	b.n	80038fe <ssd1306_WriteChar+0x36>
 80038fc:	783b      	ldrb	r3, [r7, #0]
 80038fe:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8003900:	4b39      	ldr	r3, [pc, #228]	@ (80039e8 <ssd1306_WriteChar+0x120>)
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	4413      	add	r3, r2
 800390a:	2b80      	cmp	r3, #128	@ 0x80
 800390c:	dc06      	bgt.n	800391c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800390e:	4b36      	ldr	r3, [pc, #216]	@ (80039e8 <ssd1306_WriteChar+0x120>)
 8003910:	885b      	ldrh	r3, [r3, #2]
 8003912:	461a      	mov	r2, r3
 8003914:	787b      	ldrb	r3, [r7, #1]
 8003916:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8003918:	2b40      	cmp	r3, #64	@ 0x40
 800391a:	dd01      	ble.n	8003920 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 800391c:	2300      	movs	r3, #0
 800391e:	e05e      	b.n	80039de <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8003920:	2300      	movs	r3, #0
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	e04d      	b.n	80039c2 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	3b20      	subs	r3, #32
 800392c:	7879      	ldrb	r1, [r7, #1]
 800392e:	fb01 f303 	mul.w	r3, r1, r3
 8003932:	4619      	mov	r1, r3
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	440b      	add	r3, r1
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	4413      	add	r3, r2
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8003940:	2300      	movs	r3, #0
 8003942:	61bb      	str	r3, [r7, #24]
 8003944:	e036      	b.n	80039b4 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d013      	beq.n	800397e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003956:	4b24      	ldr	r3, [pc, #144]	@ (80039e8 <ssd1306_WriteChar+0x120>)
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	b2da      	uxtb	r2, r3
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	b2db      	uxtb	r3, r3
 8003960:	4413      	add	r3, r2
 8003962:	b2d8      	uxtb	r0, r3
 8003964:	4b20      	ldr	r3, [pc, #128]	@ (80039e8 <ssd1306_WriteChar+0x120>)
 8003966:	885b      	ldrh	r3, [r3, #2]
 8003968:	b2da      	uxtb	r2, r3
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	4413      	add	r3, r2
 8003970:	b2db      	uxtb	r3, r3
 8003972:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003976:	4619      	mov	r1, r3
 8003978:	f7ff ff54 	bl	8003824 <ssd1306_DrawPixel>
 800397c:	e017      	b.n	80039ae <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800397e:	4b1a      	ldr	r3, [pc, #104]	@ (80039e8 <ssd1306_WriteChar+0x120>)
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	b2da      	uxtb	r2, r3
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	4413      	add	r3, r2
 800398a:	b2d8      	uxtb	r0, r3
 800398c:	4b16      	ldr	r3, [pc, #88]	@ (80039e8 <ssd1306_WriteChar+0x120>)
 800398e:	885b      	ldrh	r3, [r3, #2]
 8003990:	b2da      	uxtb	r2, r3
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	4413      	add	r3, r2
 8003998:	b2d9      	uxtb	r1, r3
 800399a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bf0c      	ite	eq
 80039a2:	2301      	moveq	r3, #1
 80039a4:	2300      	movne	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	f7ff ff3b 	bl	8003824 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	3301      	adds	r3, #1
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d3c4      	bcc.n	8003946 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	3301      	adds	r3, #1
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	787b      	ldrb	r3, [r7, #1]
 80039c4:	461a      	mov	r2, r3
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d3ac      	bcc.n	8003926 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80039cc:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <ssd1306_WriteChar+0x120>)
 80039ce:	881a      	ldrh	r2, [r3, #0]
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	4413      	add	r3, r2
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	4b03      	ldr	r3, [pc, #12]	@ (80039e8 <ssd1306_WriteChar+0x120>)
 80039da:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3724      	adds	r7, #36	@ 0x24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd90      	pop	{r4, r7, pc}
 80039e6:	bf00      	nop
 80039e8:	200008ec 	.word	0x200008ec

080039ec <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	4638      	mov	r0, r7
 80039f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80039fa:	e013      	b.n	8003a24 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	7818      	ldrb	r0, [r3, #0]
 8003a00:	7e3b      	ldrb	r3, [r7, #24]
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	463b      	mov	r3, r7
 8003a06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a08:	f7ff ff5e 	bl	80038c8 <ssd1306_WriteChar>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d002      	beq.n	8003a1e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	e008      	b.n	8003a30 <ssd1306_WriteString+0x44>
        }
        str++;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	3301      	adds	r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e7      	bne.n	80039fc <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	460a      	mov	r2, r1
 8003a42:	71fb      	strb	r3, [r7, #7]
 8003a44:	4613      	mov	r3, r2
 8003a46:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <ssd1306_SetCursor+0x2c>)
 8003a4e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003a50:	79bb      	ldrb	r3, [r7, #6]
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	4b03      	ldr	r3, [pc, #12]	@ (8003a64 <ssd1306_SetCursor+0x2c>)
 8003a56:	805a      	strh	r2, [r3, #2]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	200008ec 	.word	0x200008ec

08003a68 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4604      	mov	r4, r0
 8003a70:	4608      	mov	r0, r1
 8003a72:	4611      	mov	r1, r2
 8003a74:	461a      	mov	r2, r3
 8003a76:	4623      	mov	r3, r4
 8003a78:	71fb      	strb	r3, [r7, #7]
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	71bb      	strb	r3, [r7, #6]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	717b      	strb	r3, [r7, #5]
 8003a82:	4613      	mov	r3, r2
 8003a84:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8003a86:	797b      	ldrb	r3, [r7, #5]
 8003a88:	425b      	negs	r3, r3
 8003a8a:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8003a90:	797b      	ldrb	r3, [r7, #5]
 8003a92:	f1c3 0301 	rsb	r3, r3, #1
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8003a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	db65      	blt.n	8003b6e <ssd1306_DrawCircle+0x106>
 8003aa2:	79bb      	ldrb	r3, [r7, #6]
 8003aa4:	2b3f      	cmp	r3, #63	@ 0x3f
 8003aa6:	d862      	bhi.n	8003b6e <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	79fa      	ldrb	r2, [r7, #7]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	b2d8      	uxtb	r0, r3
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	79bb      	ldrb	r3, [r7, #6]
 8003ab8:	4413      	add	r3, r2
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	793a      	ldrb	r2, [r7, #4]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	f7ff feb0 	bl	8003824 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	4413      	add	r3, r2
 8003acc:	b2d8      	uxtb	r0, r3
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	79bb      	ldrb	r3, [r7, #6]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	793a      	ldrb	r2, [r7, #4]
 8003ada:	4619      	mov	r1, r3
 8003adc:	f7ff fea2 	bl	8003824 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	b2d8      	uxtb	r0, r3
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	79ba      	ldrb	r2, [r7, #6]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	793a      	ldrb	r2, [r7, #4]
 8003af6:	4619      	mov	r1, r3
 8003af8:	f7ff fe94 	bl	8003824 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	79fa      	ldrb	r2, [r7, #7]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	b2d8      	uxtb	r0, r3
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	79ba      	ldrb	r2, [r7, #6]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	793a      	ldrb	r2, [r7, #4]
 8003b12:	4619      	mov	r1, r3
 8003b14:	f7ff fe86 	bl	8003824 <ssd1306_DrawPixel>
        e2 = err;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	dc13      	bgt.n	8003b4c <ssd1306_DrawCircle+0xe4>
            y++;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	3301      	adds	r3, #1
 8003b28:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	3301      	adds	r3, #1
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	425b      	negs	r3, r3
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d105      	bne.n	8003b4c <ssd1306_DrawCircle+0xe4>
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	dc01      	bgt.n	8003b4c <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	dd08      	ble.n	8003b66 <ssd1306_DrawCircle+0xfe>
            x++;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	3301      	adds	r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	3301      	adds	r3, #1
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	dd9d      	ble.n	8003aa8 <ssd1306_DrawCircle+0x40>

    return;
 8003b6c:	e000      	b.n	8003b70 <ssd1306_DrawCircle+0x108>
        return;
 8003b6e:	bf00      	nop
}
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd90      	pop	{r4, r7, pc}

08003b76 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	603a      	str	r2, [r7, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4603      	mov	r3, r0
 8003b82:	71fb      	strb	r3, [r7, #7]
 8003b84:	460b      	mov	r3, r1
 8003b86:	71bb      	strb	r3, [r7, #6]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8003b8c:	797b      	ldrb	r3, [r7, #5]
 8003b8e:	3307      	adds	r3, #7
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	da00      	bge.n	8003b96 <ssd1306_DrawBitmap+0x20>
 8003b94:	3307      	adds	r3, #7
 8003b96:	10db      	asrs	r3, r3, #3
 8003b98:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	db3e      	blt.n	8003c24 <ssd1306_DrawBitmap+0xae>
 8003ba6:	79bb      	ldrb	r3, [r7, #6]
 8003ba8:	2b3f      	cmp	r3, #63	@ 0x3f
 8003baa:	d83b      	bhi.n	8003c24 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8003bac:	2300      	movs	r3, #0
 8003bae:	73bb      	strb	r3, [r7, #14]
 8003bb0:	e033      	b.n	8003c1a <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	737b      	strb	r3, [r7, #13]
 8003bb6:	e026      	b.n	8003c06 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8003bb8:	7b7b      	ldrb	r3, [r7, #13]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
 8003bc8:	e00d      	b.n	8003be6 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8003bca:	7bbb      	ldrb	r3, [r7, #14]
 8003bcc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003bd0:	fb02 f303 	mul.w	r3, r2, r3
 8003bd4:	7b7a      	ldrb	r2, [r7, #13]
 8003bd6:	08d2      	lsrs	r2, r2, #3
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	4413      	add	r3, r2
 8003bdc:	461a      	mov	r2, r3
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	4413      	add	r3, r2
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8003be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	da08      	bge.n	8003c00 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8003bee:	79fa      	ldrb	r2, [r7, #7]
 8003bf0:	7b7b      	ldrb	r3, [r7, #13]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	7f3a      	ldrb	r2, [r7, #28]
 8003bf8:	79b9      	ldrb	r1, [r7, #6]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff fe12 	bl	8003824 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8003c00:	7b7b      	ldrb	r3, [r7, #13]
 8003c02:	3301      	adds	r3, #1
 8003c04:	737b      	strb	r3, [r7, #13]
 8003c06:	7b7a      	ldrb	r2, [r7, #13]
 8003c08:	797b      	ldrb	r3, [r7, #5]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d3d4      	bcc.n	8003bb8 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8003c0e:	7bbb      	ldrb	r3, [r7, #14]
 8003c10:	3301      	adds	r3, #1
 8003c12:	73bb      	strb	r3, [r7, #14]
 8003c14:	79bb      	ldrb	r3, [r7, #6]
 8003c16:	3301      	adds	r3, #1
 8003c18:	71bb      	strb	r3, [r7, #6]
 8003c1a:	7bba      	ldrb	r2, [r7, #14]
 8003c1c:	7e3b      	ldrb	r3, [r7, #24]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d3c7      	bcc.n	8003bb2 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8003c22:	e000      	b.n	8003c26 <ssd1306_DrawBitmap+0xb0>
        return;
 8003c24:	bf00      	nop
}
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003c36:	2381      	movs	r3, #129	@ 0x81
 8003c38:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fd15 	bl	800366c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fd11 	bl	800366c <ssd1306_WriteCommand>
}
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003c64:	23af      	movs	r3, #175	@ 0xaf
 8003c66:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003c68:	4b08      	ldr	r3, [pc, #32]	@ (8003c8c <ssd1306_SetDisplayOn+0x38>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	715a      	strb	r2, [r3, #5]
 8003c6e:	e004      	b.n	8003c7a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003c70:	23ae      	movs	r3, #174	@ 0xae
 8003c72:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003c74:	4b05      	ldr	r3, [pc, #20]	@ (8003c8c <ssd1306_SetDisplayOn+0x38>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff fcf5 	bl	800366c <ssd1306_WriteCommand>
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	200008ec 	.word	0x200008ec

08003c90 <siprintf>:
 8003c90:	b40e      	push	{r1, r2, r3}
 8003c92:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003c96:	b510      	push	{r4, lr}
 8003c98:	2400      	movs	r4, #0
 8003c9a:	b09d      	sub	sp, #116	@ 0x74
 8003c9c:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003c9e:	9002      	str	r0, [sp, #8]
 8003ca0:	9006      	str	r0, [sp, #24]
 8003ca2:	9107      	str	r1, [sp, #28]
 8003ca4:	9104      	str	r1, [sp, #16]
 8003ca6:	4809      	ldr	r0, [pc, #36]	@ (8003ccc <siprintf+0x3c>)
 8003ca8:	4909      	ldr	r1, [pc, #36]	@ (8003cd0 <siprintf+0x40>)
 8003caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cae:	9105      	str	r1, [sp, #20]
 8003cb0:	6800      	ldr	r0, [r0, #0]
 8003cb2:	a902      	add	r1, sp, #8
 8003cb4:	9301      	str	r3, [sp, #4]
 8003cb6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003cb8:	f000 f9ba 	bl	8004030 <_svfiprintf_r>
 8003cbc:	9b02      	ldr	r3, [sp, #8]
 8003cbe:	701c      	strb	r4, [r3, #0]
 8003cc0:	b01d      	add	sp, #116	@ 0x74
 8003cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cc6:	b003      	add	sp, #12
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	20000340 	.word	0x20000340
 8003cd0:	ffff0208 	.word	0xffff0208

08003cd4 <memmove>:
 8003cd4:	4288      	cmp	r0, r1
 8003cd6:	b510      	push	{r4, lr}
 8003cd8:	eb01 0402 	add.w	r4, r1, r2
 8003cdc:	d902      	bls.n	8003ce4 <memmove+0x10>
 8003cde:	4284      	cmp	r4, r0
 8003ce0:	4623      	mov	r3, r4
 8003ce2:	d807      	bhi.n	8003cf4 <memmove+0x20>
 8003ce4:	1e43      	subs	r3, r0, #1
 8003ce6:	42a1      	cmp	r1, r4
 8003ce8:	d008      	beq.n	8003cfc <memmove+0x28>
 8003cea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cf2:	e7f8      	b.n	8003ce6 <memmove+0x12>
 8003cf4:	4601      	mov	r1, r0
 8003cf6:	4402      	add	r2, r0
 8003cf8:	428a      	cmp	r2, r1
 8003cfa:	d100      	bne.n	8003cfe <memmove+0x2a>
 8003cfc:	bd10      	pop	{r4, pc}
 8003cfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d06:	e7f7      	b.n	8003cf8 <memmove+0x24>

08003d08 <memset>:
 8003d08:	4603      	mov	r3, r0
 8003d0a:	4402      	add	r2, r0
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d100      	bne.n	8003d12 <memset+0xa>
 8003d10:	4770      	bx	lr
 8003d12:	f803 1b01 	strb.w	r1, [r3], #1
 8003d16:	e7f9      	b.n	8003d0c <memset+0x4>

08003d18 <__errno>:
 8003d18:	4b01      	ldr	r3, [pc, #4]	@ (8003d20 <__errno+0x8>)
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000340 	.word	0x20000340

08003d24 <__libc_init_array>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	2600      	movs	r6, #0
 8003d28:	4d0c      	ldr	r5, [pc, #48]	@ (8003d5c <__libc_init_array+0x38>)
 8003d2a:	4c0d      	ldr	r4, [pc, #52]	@ (8003d60 <__libc_init_array+0x3c>)
 8003d2c:	1b64      	subs	r4, r4, r5
 8003d2e:	10a4      	asrs	r4, r4, #2
 8003d30:	42a6      	cmp	r6, r4
 8003d32:	d109      	bne.n	8003d48 <__libc_init_array+0x24>
 8003d34:	f000 fc5c 	bl	80045f0 <_init>
 8003d38:	2600      	movs	r6, #0
 8003d3a:	4d0a      	ldr	r5, [pc, #40]	@ (8003d64 <__libc_init_array+0x40>)
 8003d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8003d68 <__libc_init_array+0x44>)
 8003d3e:	1b64      	subs	r4, r4, r5
 8003d40:	10a4      	asrs	r4, r4, #2
 8003d42:	42a6      	cmp	r6, r4
 8003d44:	d105      	bne.n	8003d52 <__libc_init_array+0x2e>
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4c:	4798      	blx	r3
 8003d4e:	3601      	adds	r6, #1
 8003d50:	e7ee      	b.n	8003d30 <__libc_init_array+0xc>
 8003d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d56:	4798      	blx	r3
 8003d58:	3601      	adds	r6, #1
 8003d5a:	e7f2      	b.n	8003d42 <__libc_init_array+0x1e>
 8003d5c:	080067d4 	.word	0x080067d4
 8003d60:	080067d4 	.word	0x080067d4
 8003d64:	080067d4 	.word	0x080067d4
 8003d68:	080067d8 	.word	0x080067d8

08003d6c <__retarget_lock_acquire_recursive>:
 8003d6c:	4770      	bx	lr

08003d6e <__retarget_lock_release_recursive>:
 8003d6e:	4770      	bx	lr

08003d70 <memcpy>:
 8003d70:	440a      	add	r2, r1
 8003d72:	4291      	cmp	r1, r2
 8003d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d78:	d100      	bne.n	8003d7c <memcpy+0xc>
 8003d7a:	4770      	bx	lr
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d82:	4291      	cmp	r1, r2
 8003d84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d88:	d1f9      	bne.n	8003d7e <memcpy+0xe>
 8003d8a:	bd10      	pop	{r4, pc}

08003d8c <_free_r>:
 8003d8c:	b538      	push	{r3, r4, r5, lr}
 8003d8e:	4605      	mov	r5, r0
 8003d90:	2900      	cmp	r1, #0
 8003d92:	d040      	beq.n	8003e16 <_free_r+0x8a>
 8003d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d98:	1f0c      	subs	r4, r1, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	bfb8      	it	lt
 8003d9e:	18e4      	addlt	r4, r4, r3
 8003da0:	f000 f8de 	bl	8003f60 <__malloc_lock>
 8003da4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e18 <_free_r+0x8c>)
 8003da6:	6813      	ldr	r3, [r2, #0]
 8003da8:	b933      	cbnz	r3, 8003db8 <_free_r+0x2c>
 8003daa:	6063      	str	r3, [r4, #4]
 8003dac:	6014      	str	r4, [r2, #0]
 8003dae:	4628      	mov	r0, r5
 8003db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003db4:	f000 b8da 	b.w	8003f6c <__malloc_unlock>
 8003db8:	42a3      	cmp	r3, r4
 8003dba:	d908      	bls.n	8003dce <_free_r+0x42>
 8003dbc:	6820      	ldr	r0, [r4, #0]
 8003dbe:	1821      	adds	r1, r4, r0
 8003dc0:	428b      	cmp	r3, r1
 8003dc2:	bf01      	itttt	eq
 8003dc4:	6819      	ldreq	r1, [r3, #0]
 8003dc6:	685b      	ldreq	r3, [r3, #4]
 8003dc8:	1809      	addeq	r1, r1, r0
 8003dca:	6021      	streq	r1, [r4, #0]
 8003dcc:	e7ed      	b.n	8003daa <_free_r+0x1e>
 8003dce:	461a      	mov	r2, r3
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	b10b      	cbz	r3, 8003dd8 <_free_r+0x4c>
 8003dd4:	42a3      	cmp	r3, r4
 8003dd6:	d9fa      	bls.n	8003dce <_free_r+0x42>
 8003dd8:	6811      	ldr	r1, [r2, #0]
 8003dda:	1850      	adds	r0, r2, r1
 8003ddc:	42a0      	cmp	r0, r4
 8003dde:	d10b      	bne.n	8003df8 <_free_r+0x6c>
 8003de0:	6820      	ldr	r0, [r4, #0]
 8003de2:	4401      	add	r1, r0
 8003de4:	1850      	adds	r0, r2, r1
 8003de6:	4283      	cmp	r3, r0
 8003de8:	6011      	str	r1, [r2, #0]
 8003dea:	d1e0      	bne.n	8003dae <_free_r+0x22>
 8003dec:	6818      	ldr	r0, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4408      	add	r0, r1
 8003df2:	6010      	str	r0, [r2, #0]
 8003df4:	6053      	str	r3, [r2, #4]
 8003df6:	e7da      	b.n	8003dae <_free_r+0x22>
 8003df8:	d902      	bls.n	8003e00 <_free_r+0x74>
 8003dfa:	230c      	movs	r3, #12
 8003dfc:	602b      	str	r3, [r5, #0]
 8003dfe:	e7d6      	b.n	8003dae <_free_r+0x22>
 8003e00:	6820      	ldr	r0, [r4, #0]
 8003e02:	1821      	adds	r1, r4, r0
 8003e04:	428b      	cmp	r3, r1
 8003e06:	bf01      	itttt	eq
 8003e08:	6819      	ldreq	r1, [r3, #0]
 8003e0a:	685b      	ldreq	r3, [r3, #4]
 8003e0c:	1809      	addeq	r1, r1, r0
 8003e0e:	6021      	streq	r1, [r4, #0]
 8003e10:	6063      	str	r3, [r4, #4]
 8003e12:	6054      	str	r4, [r2, #4]
 8003e14:	e7cb      	b.n	8003dae <_free_r+0x22>
 8003e16:	bd38      	pop	{r3, r4, r5, pc}
 8003e18:	20000a38 	.word	0x20000a38

08003e1c <sbrk_aligned>:
 8003e1c:	b570      	push	{r4, r5, r6, lr}
 8003e1e:	4e0f      	ldr	r6, [pc, #60]	@ (8003e5c <sbrk_aligned+0x40>)
 8003e20:	460c      	mov	r4, r1
 8003e22:	6831      	ldr	r1, [r6, #0]
 8003e24:	4605      	mov	r5, r0
 8003e26:	b911      	cbnz	r1, 8003e2e <sbrk_aligned+0x12>
 8003e28:	f000 fb8e 	bl	8004548 <_sbrk_r>
 8003e2c:	6030      	str	r0, [r6, #0]
 8003e2e:	4621      	mov	r1, r4
 8003e30:	4628      	mov	r0, r5
 8003e32:	f000 fb89 	bl	8004548 <_sbrk_r>
 8003e36:	1c43      	adds	r3, r0, #1
 8003e38:	d103      	bne.n	8003e42 <sbrk_aligned+0x26>
 8003e3a:	f04f 34ff 	mov.w	r4, #4294967295
 8003e3e:	4620      	mov	r0, r4
 8003e40:	bd70      	pop	{r4, r5, r6, pc}
 8003e42:	1cc4      	adds	r4, r0, #3
 8003e44:	f024 0403 	bic.w	r4, r4, #3
 8003e48:	42a0      	cmp	r0, r4
 8003e4a:	d0f8      	beq.n	8003e3e <sbrk_aligned+0x22>
 8003e4c:	1a21      	subs	r1, r4, r0
 8003e4e:	4628      	mov	r0, r5
 8003e50:	f000 fb7a 	bl	8004548 <_sbrk_r>
 8003e54:	3001      	adds	r0, #1
 8003e56:	d1f2      	bne.n	8003e3e <sbrk_aligned+0x22>
 8003e58:	e7ef      	b.n	8003e3a <sbrk_aligned+0x1e>
 8003e5a:	bf00      	nop
 8003e5c:	20000a34 	.word	0x20000a34

08003e60 <_malloc_r>:
 8003e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e64:	1ccd      	adds	r5, r1, #3
 8003e66:	f025 0503 	bic.w	r5, r5, #3
 8003e6a:	3508      	adds	r5, #8
 8003e6c:	2d0c      	cmp	r5, #12
 8003e6e:	bf38      	it	cc
 8003e70:	250c      	movcc	r5, #12
 8003e72:	2d00      	cmp	r5, #0
 8003e74:	4606      	mov	r6, r0
 8003e76:	db01      	blt.n	8003e7c <_malloc_r+0x1c>
 8003e78:	42a9      	cmp	r1, r5
 8003e7a:	d904      	bls.n	8003e86 <_malloc_r+0x26>
 8003e7c:	230c      	movs	r3, #12
 8003e7e:	6033      	str	r3, [r6, #0]
 8003e80:	2000      	movs	r0, #0
 8003e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f5c <_malloc_r+0xfc>
 8003e8a:	f000 f869 	bl	8003f60 <__malloc_lock>
 8003e8e:	f8d8 3000 	ldr.w	r3, [r8]
 8003e92:	461c      	mov	r4, r3
 8003e94:	bb44      	cbnz	r4, 8003ee8 <_malloc_r+0x88>
 8003e96:	4629      	mov	r1, r5
 8003e98:	4630      	mov	r0, r6
 8003e9a:	f7ff ffbf 	bl	8003e1c <sbrk_aligned>
 8003e9e:	1c43      	adds	r3, r0, #1
 8003ea0:	4604      	mov	r4, r0
 8003ea2:	d158      	bne.n	8003f56 <_malloc_r+0xf6>
 8003ea4:	f8d8 4000 	ldr.w	r4, [r8]
 8003ea8:	4627      	mov	r7, r4
 8003eaa:	2f00      	cmp	r7, #0
 8003eac:	d143      	bne.n	8003f36 <_malloc_r+0xd6>
 8003eae:	2c00      	cmp	r4, #0
 8003eb0:	d04b      	beq.n	8003f4a <_malloc_r+0xea>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	4639      	mov	r1, r7
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	eb04 0903 	add.w	r9, r4, r3
 8003ebc:	f000 fb44 	bl	8004548 <_sbrk_r>
 8003ec0:	4581      	cmp	r9, r0
 8003ec2:	d142      	bne.n	8003f4a <_malloc_r+0xea>
 8003ec4:	6821      	ldr	r1, [r4, #0]
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	1a6d      	subs	r5, r5, r1
 8003eca:	4629      	mov	r1, r5
 8003ecc:	f7ff ffa6 	bl	8003e1c <sbrk_aligned>
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	d03a      	beq.n	8003f4a <_malloc_r+0xea>
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	442b      	add	r3, r5
 8003ed8:	6023      	str	r3, [r4, #0]
 8003eda:	f8d8 3000 	ldr.w	r3, [r8]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	bb62      	cbnz	r2, 8003f3c <_malloc_r+0xdc>
 8003ee2:	f8c8 7000 	str.w	r7, [r8]
 8003ee6:	e00f      	b.n	8003f08 <_malloc_r+0xa8>
 8003ee8:	6822      	ldr	r2, [r4, #0]
 8003eea:	1b52      	subs	r2, r2, r5
 8003eec:	d420      	bmi.n	8003f30 <_malloc_r+0xd0>
 8003eee:	2a0b      	cmp	r2, #11
 8003ef0:	d917      	bls.n	8003f22 <_malloc_r+0xc2>
 8003ef2:	1961      	adds	r1, r4, r5
 8003ef4:	42a3      	cmp	r3, r4
 8003ef6:	6025      	str	r5, [r4, #0]
 8003ef8:	bf18      	it	ne
 8003efa:	6059      	strne	r1, [r3, #4]
 8003efc:	6863      	ldr	r3, [r4, #4]
 8003efe:	bf08      	it	eq
 8003f00:	f8c8 1000 	streq.w	r1, [r8]
 8003f04:	5162      	str	r2, [r4, r5]
 8003f06:	604b      	str	r3, [r1, #4]
 8003f08:	4630      	mov	r0, r6
 8003f0a:	f000 f82f 	bl	8003f6c <__malloc_unlock>
 8003f0e:	f104 000b 	add.w	r0, r4, #11
 8003f12:	1d23      	adds	r3, r4, #4
 8003f14:	f020 0007 	bic.w	r0, r0, #7
 8003f18:	1ac2      	subs	r2, r0, r3
 8003f1a:	bf1c      	itt	ne
 8003f1c:	1a1b      	subne	r3, r3, r0
 8003f1e:	50a3      	strne	r3, [r4, r2]
 8003f20:	e7af      	b.n	8003e82 <_malloc_r+0x22>
 8003f22:	6862      	ldr	r2, [r4, #4]
 8003f24:	42a3      	cmp	r3, r4
 8003f26:	bf0c      	ite	eq
 8003f28:	f8c8 2000 	streq.w	r2, [r8]
 8003f2c:	605a      	strne	r2, [r3, #4]
 8003f2e:	e7eb      	b.n	8003f08 <_malloc_r+0xa8>
 8003f30:	4623      	mov	r3, r4
 8003f32:	6864      	ldr	r4, [r4, #4]
 8003f34:	e7ae      	b.n	8003e94 <_malloc_r+0x34>
 8003f36:	463c      	mov	r4, r7
 8003f38:	687f      	ldr	r7, [r7, #4]
 8003f3a:	e7b6      	b.n	8003eaa <_malloc_r+0x4a>
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	42a3      	cmp	r3, r4
 8003f42:	d1fb      	bne.n	8003f3c <_malloc_r+0xdc>
 8003f44:	2300      	movs	r3, #0
 8003f46:	6053      	str	r3, [r2, #4]
 8003f48:	e7de      	b.n	8003f08 <_malloc_r+0xa8>
 8003f4a:	230c      	movs	r3, #12
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	6033      	str	r3, [r6, #0]
 8003f50:	f000 f80c 	bl	8003f6c <__malloc_unlock>
 8003f54:	e794      	b.n	8003e80 <_malloc_r+0x20>
 8003f56:	6005      	str	r5, [r0, #0]
 8003f58:	e7d6      	b.n	8003f08 <_malloc_r+0xa8>
 8003f5a:	bf00      	nop
 8003f5c:	20000a38 	.word	0x20000a38

08003f60 <__malloc_lock>:
 8003f60:	4801      	ldr	r0, [pc, #4]	@ (8003f68 <__malloc_lock+0x8>)
 8003f62:	f7ff bf03 	b.w	8003d6c <__retarget_lock_acquire_recursive>
 8003f66:	bf00      	nop
 8003f68:	20000a30 	.word	0x20000a30

08003f6c <__malloc_unlock>:
 8003f6c:	4801      	ldr	r0, [pc, #4]	@ (8003f74 <__malloc_unlock+0x8>)
 8003f6e:	f7ff befe 	b.w	8003d6e <__retarget_lock_release_recursive>
 8003f72:	bf00      	nop
 8003f74:	20000a30 	.word	0x20000a30

08003f78 <__ssputs_r>:
 8003f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f7c:	461f      	mov	r7, r3
 8003f7e:	688e      	ldr	r6, [r1, #8]
 8003f80:	4682      	mov	sl, r0
 8003f82:	42be      	cmp	r6, r7
 8003f84:	460c      	mov	r4, r1
 8003f86:	4690      	mov	r8, r2
 8003f88:	680b      	ldr	r3, [r1, #0]
 8003f8a:	d82d      	bhi.n	8003fe8 <__ssputs_r+0x70>
 8003f8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f94:	d026      	beq.n	8003fe4 <__ssputs_r+0x6c>
 8003f96:	6965      	ldr	r5, [r4, #20]
 8003f98:	6909      	ldr	r1, [r1, #16]
 8003f9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f9e:	eba3 0901 	sub.w	r9, r3, r1
 8003fa2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fa6:	1c7b      	adds	r3, r7, #1
 8003fa8:	444b      	add	r3, r9
 8003faa:	106d      	asrs	r5, r5, #1
 8003fac:	429d      	cmp	r5, r3
 8003fae:	bf38      	it	cc
 8003fb0:	461d      	movcc	r5, r3
 8003fb2:	0553      	lsls	r3, r2, #21
 8003fb4:	d527      	bpl.n	8004006 <__ssputs_r+0x8e>
 8003fb6:	4629      	mov	r1, r5
 8003fb8:	f7ff ff52 	bl	8003e60 <_malloc_r>
 8003fbc:	4606      	mov	r6, r0
 8003fbe:	b360      	cbz	r0, 800401a <__ssputs_r+0xa2>
 8003fc0:	464a      	mov	r2, r9
 8003fc2:	6921      	ldr	r1, [r4, #16]
 8003fc4:	f7ff fed4 	bl	8003d70 <memcpy>
 8003fc8:	89a3      	ldrh	r3, [r4, #12]
 8003fca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fd2:	81a3      	strh	r3, [r4, #12]
 8003fd4:	6126      	str	r6, [r4, #16]
 8003fd6:	444e      	add	r6, r9
 8003fd8:	6026      	str	r6, [r4, #0]
 8003fda:	463e      	mov	r6, r7
 8003fdc:	6165      	str	r5, [r4, #20]
 8003fde:	eba5 0509 	sub.w	r5, r5, r9
 8003fe2:	60a5      	str	r5, [r4, #8]
 8003fe4:	42be      	cmp	r6, r7
 8003fe6:	d900      	bls.n	8003fea <__ssputs_r+0x72>
 8003fe8:	463e      	mov	r6, r7
 8003fea:	4632      	mov	r2, r6
 8003fec:	4641      	mov	r1, r8
 8003fee:	6820      	ldr	r0, [r4, #0]
 8003ff0:	f7ff fe70 	bl	8003cd4 <memmove>
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	68a3      	ldr	r3, [r4, #8]
 8003ff8:	1b9b      	subs	r3, r3, r6
 8003ffa:	60a3      	str	r3, [r4, #8]
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	4433      	add	r3, r6
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004006:	462a      	mov	r2, r5
 8004008:	f000 fabc 	bl	8004584 <_realloc_r>
 800400c:	4606      	mov	r6, r0
 800400e:	2800      	cmp	r0, #0
 8004010:	d1e0      	bne.n	8003fd4 <__ssputs_r+0x5c>
 8004012:	4650      	mov	r0, sl
 8004014:	6921      	ldr	r1, [r4, #16]
 8004016:	f7ff feb9 	bl	8003d8c <_free_r>
 800401a:	230c      	movs	r3, #12
 800401c:	f8ca 3000 	str.w	r3, [sl]
 8004020:	89a3      	ldrh	r3, [r4, #12]
 8004022:	f04f 30ff 	mov.w	r0, #4294967295
 8004026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800402a:	81a3      	strh	r3, [r4, #12]
 800402c:	e7e9      	b.n	8004002 <__ssputs_r+0x8a>
	...

08004030 <_svfiprintf_r>:
 8004030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004034:	4698      	mov	r8, r3
 8004036:	898b      	ldrh	r3, [r1, #12]
 8004038:	4607      	mov	r7, r0
 800403a:	061b      	lsls	r3, r3, #24
 800403c:	460d      	mov	r5, r1
 800403e:	4614      	mov	r4, r2
 8004040:	b09d      	sub	sp, #116	@ 0x74
 8004042:	d510      	bpl.n	8004066 <_svfiprintf_r+0x36>
 8004044:	690b      	ldr	r3, [r1, #16]
 8004046:	b973      	cbnz	r3, 8004066 <_svfiprintf_r+0x36>
 8004048:	2140      	movs	r1, #64	@ 0x40
 800404a:	f7ff ff09 	bl	8003e60 <_malloc_r>
 800404e:	6028      	str	r0, [r5, #0]
 8004050:	6128      	str	r0, [r5, #16]
 8004052:	b930      	cbnz	r0, 8004062 <_svfiprintf_r+0x32>
 8004054:	230c      	movs	r3, #12
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	f04f 30ff 	mov.w	r0, #4294967295
 800405c:	b01d      	add	sp, #116	@ 0x74
 800405e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004062:	2340      	movs	r3, #64	@ 0x40
 8004064:	616b      	str	r3, [r5, #20]
 8004066:	2300      	movs	r3, #0
 8004068:	9309      	str	r3, [sp, #36]	@ 0x24
 800406a:	2320      	movs	r3, #32
 800406c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004070:	2330      	movs	r3, #48	@ 0x30
 8004072:	f04f 0901 	mov.w	r9, #1
 8004076:	f8cd 800c 	str.w	r8, [sp, #12]
 800407a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004214 <_svfiprintf_r+0x1e4>
 800407e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004082:	4623      	mov	r3, r4
 8004084:	469a      	mov	sl, r3
 8004086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800408a:	b10a      	cbz	r2, 8004090 <_svfiprintf_r+0x60>
 800408c:	2a25      	cmp	r2, #37	@ 0x25
 800408e:	d1f9      	bne.n	8004084 <_svfiprintf_r+0x54>
 8004090:	ebba 0b04 	subs.w	fp, sl, r4
 8004094:	d00b      	beq.n	80040ae <_svfiprintf_r+0x7e>
 8004096:	465b      	mov	r3, fp
 8004098:	4622      	mov	r2, r4
 800409a:	4629      	mov	r1, r5
 800409c:	4638      	mov	r0, r7
 800409e:	f7ff ff6b 	bl	8003f78 <__ssputs_r>
 80040a2:	3001      	adds	r0, #1
 80040a4:	f000 80a7 	beq.w	80041f6 <_svfiprintf_r+0x1c6>
 80040a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040aa:	445a      	add	r2, fp
 80040ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80040ae:	f89a 3000 	ldrb.w	r3, [sl]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 809f 	beq.w	80041f6 <_svfiprintf_r+0x1c6>
 80040b8:	2300      	movs	r3, #0
 80040ba:	f04f 32ff 	mov.w	r2, #4294967295
 80040be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040c2:	f10a 0a01 	add.w	sl, sl, #1
 80040c6:	9304      	str	r3, [sp, #16]
 80040c8:	9307      	str	r3, [sp, #28]
 80040ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80040d0:	4654      	mov	r4, sl
 80040d2:	2205      	movs	r2, #5
 80040d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040d8:	484e      	ldr	r0, [pc, #312]	@ (8004214 <_svfiprintf_r+0x1e4>)
 80040da:	f000 fa45 	bl	8004568 <memchr>
 80040de:	9a04      	ldr	r2, [sp, #16]
 80040e0:	b9d8      	cbnz	r0, 800411a <_svfiprintf_r+0xea>
 80040e2:	06d0      	lsls	r0, r2, #27
 80040e4:	bf44      	itt	mi
 80040e6:	2320      	movmi	r3, #32
 80040e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040ec:	0711      	lsls	r1, r2, #28
 80040ee:	bf44      	itt	mi
 80040f0:	232b      	movmi	r3, #43	@ 0x2b
 80040f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040f6:	f89a 3000 	ldrb.w	r3, [sl]
 80040fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80040fc:	d015      	beq.n	800412a <_svfiprintf_r+0xfa>
 80040fe:	4654      	mov	r4, sl
 8004100:	2000      	movs	r0, #0
 8004102:	f04f 0c0a 	mov.w	ip, #10
 8004106:	9a07      	ldr	r2, [sp, #28]
 8004108:	4621      	mov	r1, r4
 800410a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800410e:	3b30      	subs	r3, #48	@ 0x30
 8004110:	2b09      	cmp	r3, #9
 8004112:	d94b      	bls.n	80041ac <_svfiprintf_r+0x17c>
 8004114:	b1b0      	cbz	r0, 8004144 <_svfiprintf_r+0x114>
 8004116:	9207      	str	r2, [sp, #28]
 8004118:	e014      	b.n	8004144 <_svfiprintf_r+0x114>
 800411a:	eba0 0308 	sub.w	r3, r0, r8
 800411e:	fa09 f303 	lsl.w	r3, r9, r3
 8004122:	4313      	orrs	r3, r2
 8004124:	46a2      	mov	sl, r4
 8004126:	9304      	str	r3, [sp, #16]
 8004128:	e7d2      	b.n	80040d0 <_svfiprintf_r+0xa0>
 800412a:	9b03      	ldr	r3, [sp, #12]
 800412c:	1d19      	adds	r1, r3, #4
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	9103      	str	r1, [sp, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	bfbb      	ittet	lt
 8004136:	425b      	neglt	r3, r3
 8004138:	f042 0202 	orrlt.w	r2, r2, #2
 800413c:	9307      	strge	r3, [sp, #28]
 800413e:	9307      	strlt	r3, [sp, #28]
 8004140:	bfb8      	it	lt
 8004142:	9204      	strlt	r2, [sp, #16]
 8004144:	7823      	ldrb	r3, [r4, #0]
 8004146:	2b2e      	cmp	r3, #46	@ 0x2e
 8004148:	d10a      	bne.n	8004160 <_svfiprintf_r+0x130>
 800414a:	7863      	ldrb	r3, [r4, #1]
 800414c:	2b2a      	cmp	r3, #42	@ 0x2a
 800414e:	d132      	bne.n	80041b6 <_svfiprintf_r+0x186>
 8004150:	9b03      	ldr	r3, [sp, #12]
 8004152:	3402      	adds	r4, #2
 8004154:	1d1a      	adds	r2, r3, #4
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	9203      	str	r2, [sp, #12]
 800415a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800415e:	9305      	str	r3, [sp, #20]
 8004160:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004218 <_svfiprintf_r+0x1e8>
 8004164:	2203      	movs	r2, #3
 8004166:	4650      	mov	r0, sl
 8004168:	7821      	ldrb	r1, [r4, #0]
 800416a:	f000 f9fd 	bl	8004568 <memchr>
 800416e:	b138      	cbz	r0, 8004180 <_svfiprintf_r+0x150>
 8004170:	2240      	movs	r2, #64	@ 0x40
 8004172:	9b04      	ldr	r3, [sp, #16]
 8004174:	eba0 000a 	sub.w	r0, r0, sl
 8004178:	4082      	lsls	r2, r0
 800417a:	4313      	orrs	r3, r2
 800417c:	3401      	adds	r4, #1
 800417e:	9304      	str	r3, [sp, #16]
 8004180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004184:	2206      	movs	r2, #6
 8004186:	4825      	ldr	r0, [pc, #148]	@ (800421c <_svfiprintf_r+0x1ec>)
 8004188:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800418c:	f000 f9ec 	bl	8004568 <memchr>
 8004190:	2800      	cmp	r0, #0
 8004192:	d036      	beq.n	8004202 <_svfiprintf_r+0x1d2>
 8004194:	4b22      	ldr	r3, [pc, #136]	@ (8004220 <_svfiprintf_r+0x1f0>)
 8004196:	bb1b      	cbnz	r3, 80041e0 <_svfiprintf_r+0x1b0>
 8004198:	9b03      	ldr	r3, [sp, #12]
 800419a:	3307      	adds	r3, #7
 800419c:	f023 0307 	bic.w	r3, r3, #7
 80041a0:	3308      	adds	r3, #8
 80041a2:	9303      	str	r3, [sp, #12]
 80041a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041a6:	4433      	add	r3, r6
 80041a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80041aa:	e76a      	b.n	8004082 <_svfiprintf_r+0x52>
 80041ac:	460c      	mov	r4, r1
 80041ae:	2001      	movs	r0, #1
 80041b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80041b4:	e7a8      	b.n	8004108 <_svfiprintf_r+0xd8>
 80041b6:	2300      	movs	r3, #0
 80041b8:	f04f 0c0a 	mov.w	ip, #10
 80041bc:	4619      	mov	r1, r3
 80041be:	3401      	adds	r4, #1
 80041c0:	9305      	str	r3, [sp, #20]
 80041c2:	4620      	mov	r0, r4
 80041c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041c8:	3a30      	subs	r2, #48	@ 0x30
 80041ca:	2a09      	cmp	r2, #9
 80041cc:	d903      	bls.n	80041d6 <_svfiprintf_r+0x1a6>
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0c6      	beq.n	8004160 <_svfiprintf_r+0x130>
 80041d2:	9105      	str	r1, [sp, #20]
 80041d4:	e7c4      	b.n	8004160 <_svfiprintf_r+0x130>
 80041d6:	4604      	mov	r4, r0
 80041d8:	2301      	movs	r3, #1
 80041da:	fb0c 2101 	mla	r1, ip, r1, r2
 80041de:	e7f0      	b.n	80041c2 <_svfiprintf_r+0x192>
 80041e0:	ab03      	add	r3, sp, #12
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	462a      	mov	r2, r5
 80041e6:	4638      	mov	r0, r7
 80041e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004224 <_svfiprintf_r+0x1f4>)
 80041ea:	a904      	add	r1, sp, #16
 80041ec:	f3af 8000 	nop.w
 80041f0:	1c42      	adds	r2, r0, #1
 80041f2:	4606      	mov	r6, r0
 80041f4:	d1d6      	bne.n	80041a4 <_svfiprintf_r+0x174>
 80041f6:	89ab      	ldrh	r3, [r5, #12]
 80041f8:	065b      	lsls	r3, r3, #25
 80041fa:	f53f af2d 	bmi.w	8004058 <_svfiprintf_r+0x28>
 80041fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004200:	e72c      	b.n	800405c <_svfiprintf_r+0x2c>
 8004202:	ab03      	add	r3, sp, #12
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	462a      	mov	r2, r5
 8004208:	4638      	mov	r0, r7
 800420a:	4b06      	ldr	r3, [pc, #24]	@ (8004224 <_svfiprintf_r+0x1f4>)
 800420c:	a904      	add	r1, sp, #16
 800420e:	f000 f87d 	bl	800430c <_printf_i>
 8004212:	e7ed      	b.n	80041f0 <_svfiprintf_r+0x1c0>
 8004214:	08006798 	.word	0x08006798
 8004218:	0800679e 	.word	0x0800679e
 800421c:	080067a2 	.word	0x080067a2
 8004220:	00000000 	.word	0x00000000
 8004224:	08003f79 	.word	0x08003f79

08004228 <_printf_common>:
 8004228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800422c:	4616      	mov	r6, r2
 800422e:	4698      	mov	r8, r3
 8004230:	688a      	ldr	r2, [r1, #8]
 8004232:	690b      	ldr	r3, [r1, #16]
 8004234:	4607      	mov	r7, r0
 8004236:	4293      	cmp	r3, r2
 8004238:	bfb8      	it	lt
 800423a:	4613      	movlt	r3, r2
 800423c:	6033      	str	r3, [r6, #0]
 800423e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004242:	460c      	mov	r4, r1
 8004244:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004248:	b10a      	cbz	r2, 800424e <_printf_common+0x26>
 800424a:	3301      	adds	r3, #1
 800424c:	6033      	str	r3, [r6, #0]
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	0699      	lsls	r1, r3, #26
 8004252:	bf42      	ittt	mi
 8004254:	6833      	ldrmi	r3, [r6, #0]
 8004256:	3302      	addmi	r3, #2
 8004258:	6033      	strmi	r3, [r6, #0]
 800425a:	6825      	ldr	r5, [r4, #0]
 800425c:	f015 0506 	ands.w	r5, r5, #6
 8004260:	d106      	bne.n	8004270 <_printf_common+0x48>
 8004262:	f104 0a19 	add.w	sl, r4, #25
 8004266:	68e3      	ldr	r3, [r4, #12]
 8004268:	6832      	ldr	r2, [r6, #0]
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	42ab      	cmp	r3, r5
 800426e:	dc2b      	bgt.n	80042c8 <_printf_common+0xa0>
 8004270:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004274:	6822      	ldr	r2, [r4, #0]
 8004276:	3b00      	subs	r3, #0
 8004278:	bf18      	it	ne
 800427a:	2301      	movne	r3, #1
 800427c:	0692      	lsls	r2, r2, #26
 800427e:	d430      	bmi.n	80042e2 <_printf_common+0xba>
 8004280:	4641      	mov	r1, r8
 8004282:	4638      	mov	r0, r7
 8004284:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004288:	47c8      	blx	r9
 800428a:	3001      	adds	r0, #1
 800428c:	d023      	beq.n	80042d6 <_printf_common+0xae>
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	6922      	ldr	r2, [r4, #16]
 8004292:	f003 0306 	and.w	r3, r3, #6
 8004296:	2b04      	cmp	r3, #4
 8004298:	bf14      	ite	ne
 800429a:	2500      	movne	r5, #0
 800429c:	6833      	ldreq	r3, [r6, #0]
 800429e:	f04f 0600 	mov.w	r6, #0
 80042a2:	bf08      	it	eq
 80042a4:	68e5      	ldreq	r5, [r4, #12]
 80042a6:	f104 041a 	add.w	r4, r4, #26
 80042aa:	bf08      	it	eq
 80042ac:	1aed      	subeq	r5, r5, r3
 80042ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80042b2:	bf08      	it	eq
 80042b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042b8:	4293      	cmp	r3, r2
 80042ba:	bfc4      	itt	gt
 80042bc:	1a9b      	subgt	r3, r3, r2
 80042be:	18ed      	addgt	r5, r5, r3
 80042c0:	42b5      	cmp	r5, r6
 80042c2:	d11a      	bne.n	80042fa <_printf_common+0xd2>
 80042c4:	2000      	movs	r0, #0
 80042c6:	e008      	b.n	80042da <_printf_common+0xb2>
 80042c8:	2301      	movs	r3, #1
 80042ca:	4652      	mov	r2, sl
 80042cc:	4641      	mov	r1, r8
 80042ce:	4638      	mov	r0, r7
 80042d0:	47c8      	blx	r9
 80042d2:	3001      	adds	r0, #1
 80042d4:	d103      	bne.n	80042de <_printf_common+0xb6>
 80042d6:	f04f 30ff 	mov.w	r0, #4294967295
 80042da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042de:	3501      	adds	r5, #1
 80042e0:	e7c1      	b.n	8004266 <_printf_common+0x3e>
 80042e2:	2030      	movs	r0, #48	@ 0x30
 80042e4:	18e1      	adds	r1, r4, r3
 80042e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042f0:	4422      	add	r2, r4
 80042f2:	3302      	adds	r3, #2
 80042f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042f8:	e7c2      	b.n	8004280 <_printf_common+0x58>
 80042fa:	2301      	movs	r3, #1
 80042fc:	4622      	mov	r2, r4
 80042fe:	4641      	mov	r1, r8
 8004300:	4638      	mov	r0, r7
 8004302:	47c8      	blx	r9
 8004304:	3001      	adds	r0, #1
 8004306:	d0e6      	beq.n	80042d6 <_printf_common+0xae>
 8004308:	3601      	adds	r6, #1
 800430a:	e7d9      	b.n	80042c0 <_printf_common+0x98>

0800430c <_printf_i>:
 800430c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004310:	7e0f      	ldrb	r7, [r1, #24]
 8004312:	4691      	mov	r9, r2
 8004314:	2f78      	cmp	r7, #120	@ 0x78
 8004316:	4680      	mov	r8, r0
 8004318:	460c      	mov	r4, r1
 800431a:	469a      	mov	sl, r3
 800431c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800431e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004322:	d807      	bhi.n	8004334 <_printf_i+0x28>
 8004324:	2f62      	cmp	r7, #98	@ 0x62
 8004326:	d80a      	bhi.n	800433e <_printf_i+0x32>
 8004328:	2f00      	cmp	r7, #0
 800432a:	f000 80d1 	beq.w	80044d0 <_printf_i+0x1c4>
 800432e:	2f58      	cmp	r7, #88	@ 0x58
 8004330:	f000 80b8 	beq.w	80044a4 <_printf_i+0x198>
 8004334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004338:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800433c:	e03a      	b.n	80043b4 <_printf_i+0xa8>
 800433e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004342:	2b15      	cmp	r3, #21
 8004344:	d8f6      	bhi.n	8004334 <_printf_i+0x28>
 8004346:	a101      	add	r1, pc, #4	@ (adr r1, 800434c <_printf_i+0x40>)
 8004348:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800434c:	080043a5 	.word	0x080043a5
 8004350:	080043b9 	.word	0x080043b9
 8004354:	08004335 	.word	0x08004335
 8004358:	08004335 	.word	0x08004335
 800435c:	08004335 	.word	0x08004335
 8004360:	08004335 	.word	0x08004335
 8004364:	080043b9 	.word	0x080043b9
 8004368:	08004335 	.word	0x08004335
 800436c:	08004335 	.word	0x08004335
 8004370:	08004335 	.word	0x08004335
 8004374:	08004335 	.word	0x08004335
 8004378:	080044b7 	.word	0x080044b7
 800437c:	080043e3 	.word	0x080043e3
 8004380:	08004471 	.word	0x08004471
 8004384:	08004335 	.word	0x08004335
 8004388:	08004335 	.word	0x08004335
 800438c:	080044d9 	.word	0x080044d9
 8004390:	08004335 	.word	0x08004335
 8004394:	080043e3 	.word	0x080043e3
 8004398:	08004335 	.word	0x08004335
 800439c:	08004335 	.word	0x08004335
 80043a0:	08004479 	.word	0x08004479
 80043a4:	6833      	ldr	r3, [r6, #0]
 80043a6:	1d1a      	adds	r2, r3, #4
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6032      	str	r2, [r6, #0]
 80043ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043b4:	2301      	movs	r3, #1
 80043b6:	e09c      	b.n	80044f2 <_printf_i+0x1e6>
 80043b8:	6833      	ldr	r3, [r6, #0]
 80043ba:	6820      	ldr	r0, [r4, #0]
 80043bc:	1d19      	adds	r1, r3, #4
 80043be:	6031      	str	r1, [r6, #0]
 80043c0:	0606      	lsls	r6, r0, #24
 80043c2:	d501      	bpl.n	80043c8 <_printf_i+0xbc>
 80043c4:	681d      	ldr	r5, [r3, #0]
 80043c6:	e003      	b.n	80043d0 <_printf_i+0xc4>
 80043c8:	0645      	lsls	r5, r0, #25
 80043ca:	d5fb      	bpl.n	80043c4 <_printf_i+0xb8>
 80043cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043d0:	2d00      	cmp	r5, #0
 80043d2:	da03      	bge.n	80043dc <_printf_i+0xd0>
 80043d4:	232d      	movs	r3, #45	@ 0x2d
 80043d6:	426d      	negs	r5, r5
 80043d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043dc:	230a      	movs	r3, #10
 80043de:	4858      	ldr	r0, [pc, #352]	@ (8004540 <_printf_i+0x234>)
 80043e0:	e011      	b.n	8004406 <_printf_i+0xfa>
 80043e2:	6821      	ldr	r1, [r4, #0]
 80043e4:	6833      	ldr	r3, [r6, #0]
 80043e6:	0608      	lsls	r0, r1, #24
 80043e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80043ec:	d402      	bmi.n	80043f4 <_printf_i+0xe8>
 80043ee:	0649      	lsls	r1, r1, #25
 80043f0:	bf48      	it	mi
 80043f2:	b2ad      	uxthmi	r5, r5
 80043f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80043f6:	6033      	str	r3, [r6, #0]
 80043f8:	bf14      	ite	ne
 80043fa:	230a      	movne	r3, #10
 80043fc:	2308      	moveq	r3, #8
 80043fe:	4850      	ldr	r0, [pc, #320]	@ (8004540 <_printf_i+0x234>)
 8004400:	2100      	movs	r1, #0
 8004402:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004406:	6866      	ldr	r6, [r4, #4]
 8004408:	2e00      	cmp	r6, #0
 800440a:	60a6      	str	r6, [r4, #8]
 800440c:	db05      	blt.n	800441a <_printf_i+0x10e>
 800440e:	6821      	ldr	r1, [r4, #0]
 8004410:	432e      	orrs	r6, r5
 8004412:	f021 0104 	bic.w	r1, r1, #4
 8004416:	6021      	str	r1, [r4, #0]
 8004418:	d04b      	beq.n	80044b2 <_printf_i+0x1a6>
 800441a:	4616      	mov	r6, r2
 800441c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004420:	fb03 5711 	mls	r7, r3, r1, r5
 8004424:	5dc7      	ldrb	r7, [r0, r7]
 8004426:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800442a:	462f      	mov	r7, r5
 800442c:	42bb      	cmp	r3, r7
 800442e:	460d      	mov	r5, r1
 8004430:	d9f4      	bls.n	800441c <_printf_i+0x110>
 8004432:	2b08      	cmp	r3, #8
 8004434:	d10b      	bne.n	800444e <_printf_i+0x142>
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	07df      	lsls	r7, r3, #31
 800443a:	d508      	bpl.n	800444e <_printf_i+0x142>
 800443c:	6923      	ldr	r3, [r4, #16]
 800443e:	6861      	ldr	r1, [r4, #4]
 8004440:	4299      	cmp	r1, r3
 8004442:	bfde      	ittt	le
 8004444:	2330      	movle	r3, #48	@ 0x30
 8004446:	f806 3c01 	strble.w	r3, [r6, #-1]
 800444a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800444e:	1b92      	subs	r2, r2, r6
 8004450:	6122      	str	r2, [r4, #16]
 8004452:	464b      	mov	r3, r9
 8004454:	4621      	mov	r1, r4
 8004456:	4640      	mov	r0, r8
 8004458:	f8cd a000 	str.w	sl, [sp]
 800445c:	aa03      	add	r2, sp, #12
 800445e:	f7ff fee3 	bl	8004228 <_printf_common>
 8004462:	3001      	adds	r0, #1
 8004464:	d14a      	bne.n	80044fc <_printf_i+0x1f0>
 8004466:	f04f 30ff 	mov.w	r0, #4294967295
 800446a:	b004      	add	sp, #16
 800446c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	f043 0320 	orr.w	r3, r3, #32
 8004476:	6023      	str	r3, [r4, #0]
 8004478:	2778      	movs	r7, #120	@ 0x78
 800447a:	4832      	ldr	r0, [pc, #200]	@ (8004544 <_printf_i+0x238>)
 800447c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	6831      	ldr	r1, [r6, #0]
 8004484:	061f      	lsls	r7, r3, #24
 8004486:	f851 5b04 	ldr.w	r5, [r1], #4
 800448a:	d402      	bmi.n	8004492 <_printf_i+0x186>
 800448c:	065f      	lsls	r7, r3, #25
 800448e:	bf48      	it	mi
 8004490:	b2ad      	uxthmi	r5, r5
 8004492:	6031      	str	r1, [r6, #0]
 8004494:	07d9      	lsls	r1, r3, #31
 8004496:	bf44      	itt	mi
 8004498:	f043 0320 	orrmi.w	r3, r3, #32
 800449c:	6023      	strmi	r3, [r4, #0]
 800449e:	b11d      	cbz	r5, 80044a8 <_printf_i+0x19c>
 80044a0:	2310      	movs	r3, #16
 80044a2:	e7ad      	b.n	8004400 <_printf_i+0xf4>
 80044a4:	4826      	ldr	r0, [pc, #152]	@ (8004540 <_printf_i+0x234>)
 80044a6:	e7e9      	b.n	800447c <_printf_i+0x170>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	f023 0320 	bic.w	r3, r3, #32
 80044ae:	6023      	str	r3, [r4, #0]
 80044b0:	e7f6      	b.n	80044a0 <_printf_i+0x194>
 80044b2:	4616      	mov	r6, r2
 80044b4:	e7bd      	b.n	8004432 <_printf_i+0x126>
 80044b6:	6833      	ldr	r3, [r6, #0]
 80044b8:	6825      	ldr	r5, [r4, #0]
 80044ba:	1d18      	adds	r0, r3, #4
 80044bc:	6961      	ldr	r1, [r4, #20]
 80044be:	6030      	str	r0, [r6, #0]
 80044c0:	062e      	lsls	r6, r5, #24
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	d501      	bpl.n	80044ca <_printf_i+0x1be>
 80044c6:	6019      	str	r1, [r3, #0]
 80044c8:	e002      	b.n	80044d0 <_printf_i+0x1c4>
 80044ca:	0668      	lsls	r0, r5, #25
 80044cc:	d5fb      	bpl.n	80044c6 <_printf_i+0x1ba>
 80044ce:	8019      	strh	r1, [r3, #0]
 80044d0:	2300      	movs	r3, #0
 80044d2:	4616      	mov	r6, r2
 80044d4:	6123      	str	r3, [r4, #16]
 80044d6:	e7bc      	b.n	8004452 <_printf_i+0x146>
 80044d8:	6833      	ldr	r3, [r6, #0]
 80044da:	2100      	movs	r1, #0
 80044dc:	1d1a      	adds	r2, r3, #4
 80044de:	6032      	str	r2, [r6, #0]
 80044e0:	681e      	ldr	r6, [r3, #0]
 80044e2:	6862      	ldr	r2, [r4, #4]
 80044e4:	4630      	mov	r0, r6
 80044e6:	f000 f83f 	bl	8004568 <memchr>
 80044ea:	b108      	cbz	r0, 80044f0 <_printf_i+0x1e4>
 80044ec:	1b80      	subs	r0, r0, r6
 80044ee:	6060      	str	r0, [r4, #4]
 80044f0:	6863      	ldr	r3, [r4, #4]
 80044f2:	6123      	str	r3, [r4, #16]
 80044f4:	2300      	movs	r3, #0
 80044f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044fa:	e7aa      	b.n	8004452 <_printf_i+0x146>
 80044fc:	4632      	mov	r2, r6
 80044fe:	4649      	mov	r1, r9
 8004500:	4640      	mov	r0, r8
 8004502:	6923      	ldr	r3, [r4, #16]
 8004504:	47d0      	blx	sl
 8004506:	3001      	adds	r0, #1
 8004508:	d0ad      	beq.n	8004466 <_printf_i+0x15a>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	079b      	lsls	r3, r3, #30
 800450e:	d413      	bmi.n	8004538 <_printf_i+0x22c>
 8004510:	68e0      	ldr	r0, [r4, #12]
 8004512:	9b03      	ldr	r3, [sp, #12]
 8004514:	4298      	cmp	r0, r3
 8004516:	bfb8      	it	lt
 8004518:	4618      	movlt	r0, r3
 800451a:	e7a6      	b.n	800446a <_printf_i+0x15e>
 800451c:	2301      	movs	r3, #1
 800451e:	4632      	mov	r2, r6
 8004520:	4649      	mov	r1, r9
 8004522:	4640      	mov	r0, r8
 8004524:	47d0      	blx	sl
 8004526:	3001      	adds	r0, #1
 8004528:	d09d      	beq.n	8004466 <_printf_i+0x15a>
 800452a:	3501      	adds	r5, #1
 800452c:	68e3      	ldr	r3, [r4, #12]
 800452e:	9903      	ldr	r1, [sp, #12]
 8004530:	1a5b      	subs	r3, r3, r1
 8004532:	42ab      	cmp	r3, r5
 8004534:	dcf2      	bgt.n	800451c <_printf_i+0x210>
 8004536:	e7eb      	b.n	8004510 <_printf_i+0x204>
 8004538:	2500      	movs	r5, #0
 800453a:	f104 0619 	add.w	r6, r4, #25
 800453e:	e7f5      	b.n	800452c <_printf_i+0x220>
 8004540:	080067a9 	.word	0x080067a9
 8004544:	080067ba 	.word	0x080067ba

08004548 <_sbrk_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	2300      	movs	r3, #0
 800454c:	4d05      	ldr	r5, [pc, #20]	@ (8004564 <_sbrk_r+0x1c>)
 800454e:	4604      	mov	r4, r0
 8004550:	4608      	mov	r0, r1
 8004552:	602b      	str	r3, [r5, #0]
 8004554:	f7fc fb2c 	bl	8000bb0 <_sbrk>
 8004558:	1c43      	adds	r3, r0, #1
 800455a:	d102      	bne.n	8004562 <_sbrk_r+0x1a>
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	b103      	cbz	r3, 8004562 <_sbrk_r+0x1a>
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	bd38      	pop	{r3, r4, r5, pc}
 8004564:	20000a2c 	.word	0x20000a2c

08004568 <memchr>:
 8004568:	4603      	mov	r3, r0
 800456a:	b510      	push	{r4, lr}
 800456c:	b2c9      	uxtb	r1, r1
 800456e:	4402      	add	r2, r0
 8004570:	4293      	cmp	r3, r2
 8004572:	4618      	mov	r0, r3
 8004574:	d101      	bne.n	800457a <memchr+0x12>
 8004576:	2000      	movs	r0, #0
 8004578:	e003      	b.n	8004582 <memchr+0x1a>
 800457a:	7804      	ldrb	r4, [r0, #0]
 800457c:	3301      	adds	r3, #1
 800457e:	428c      	cmp	r4, r1
 8004580:	d1f6      	bne.n	8004570 <memchr+0x8>
 8004582:	bd10      	pop	{r4, pc}

08004584 <_realloc_r>:
 8004584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004588:	4607      	mov	r7, r0
 800458a:	4614      	mov	r4, r2
 800458c:	460d      	mov	r5, r1
 800458e:	b921      	cbnz	r1, 800459a <_realloc_r+0x16>
 8004590:	4611      	mov	r1, r2
 8004592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004596:	f7ff bc63 	b.w	8003e60 <_malloc_r>
 800459a:	b92a      	cbnz	r2, 80045a8 <_realloc_r+0x24>
 800459c:	f7ff fbf6 	bl	8003d8c <_free_r>
 80045a0:	4625      	mov	r5, r4
 80045a2:	4628      	mov	r0, r5
 80045a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045a8:	f000 f81a 	bl	80045e0 <_malloc_usable_size_r>
 80045ac:	4284      	cmp	r4, r0
 80045ae:	4606      	mov	r6, r0
 80045b0:	d802      	bhi.n	80045b8 <_realloc_r+0x34>
 80045b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045b6:	d8f4      	bhi.n	80045a2 <_realloc_r+0x1e>
 80045b8:	4621      	mov	r1, r4
 80045ba:	4638      	mov	r0, r7
 80045bc:	f7ff fc50 	bl	8003e60 <_malloc_r>
 80045c0:	4680      	mov	r8, r0
 80045c2:	b908      	cbnz	r0, 80045c8 <_realloc_r+0x44>
 80045c4:	4645      	mov	r5, r8
 80045c6:	e7ec      	b.n	80045a2 <_realloc_r+0x1e>
 80045c8:	42b4      	cmp	r4, r6
 80045ca:	4622      	mov	r2, r4
 80045cc:	4629      	mov	r1, r5
 80045ce:	bf28      	it	cs
 80045d0:	4632      	movcs	r2, r6
 80045d2:	f7ff fbcd 	bl	8003d70 <memcpy>
 80045d6:	4629      	mov	r1, r5
 80045d8:	4638      	mov	r0, r7
 80045da:	f7ff fbd7 	bl	8003d8c <_free_r>
 80045de:	e7f1      	b.n	80045c4 <_realloc_r+0x40>

080045e0 <_malloc_usable_size_r>:
 80045e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045e4:	1f18      	subs	r0, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bfbc      	itt	lt
 80045ea:	580b      	ldrlt	r3, [r1, r0]
 80045ec:	18c0      	addlt	r0, r0, r3
 80045ee:	4770      	bx	lr

080045f0 <_init>:
 80045f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f2:	bf00      	nop
 80045f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045f6:	bc08      	pop	{r3}
 80045f8:	469e      	mov	lr, r3
 80045fa:	4770      	bx	lr

080045fc <_fini>:
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	bf00      	nop
 8004600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004602:	bc08      	pop	{r3}
 8004604:	469e      	mov	lr, r3
 8004606:	4770      	bx	lr
