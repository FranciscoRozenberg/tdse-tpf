
tdse-tpf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e84  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013fc  08002f90  08002f90  00003f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800438c  0800438c  00006028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800438c  0800438c  0000538c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004394  08004394  00006028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004394  08004394  00005394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004398  08004398  00005398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  0800439c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000055c  20000028  080043c4  00006028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  080043c4  00006584  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe70  00000000  00000000  00006051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000240e  00000000  00000000  00015ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  000182d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3d  00000000  00000000  00019260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001823c  00000000  00000000  00019e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141ab  00000000  00000000  000320d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d9f8  00000000  00000000  00046284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3c7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004164  00000000  00000000  000d3cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d7e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f78 	.word	0x08002f78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08002f78 	.word	0x08002f78

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fad4 	bl	800070c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f80d 	bl	8000182 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8fc 	bl	8000364 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800016c:	f000 f8d0 	bl	8000310 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000170:	f000 f876 	bl	8000260 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000174:	f000 f846 	bl	8000204 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 8000178:	f002 fb8c 	bl	8002894 <app_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  app_update();
 800017c:	f002 fbd4 	bl	8002928 <app_update>
 8000180:	e7fc      	b.n	800017c <main+0x20>

08000182 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000182:	b580      	push	{r7, lr}
 8000184:	b090      	sub	sp, #64	@ 0x40
 8000186:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000188:	f107 0318 	add.w	r3, r7, #24
 800018c:	2228      	movs	r2, #40	@ 0x28
 800018e:	2100      	movs	r1, #0
 8000190:	4618      	mov	r0, r3
 8000192:	f002 fec5 	bl	8002f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
 800019c:	605a      	str	r2, [r3, #4]
 800019e:	609a      	str	r2, [r3, #8]
 80001a0:	60da      	str	r2, [r3, #12]
 80001a2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a4:	2302      	movs	r3, #2
 80001a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a8:	2301      	movs	r3, #1
 80001aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ac:	2310      	movs	r3, #16
 80001ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b0:	2302      	movs	r3, #2
 80001b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b4:	2300      	movs	r3, #0
 80001b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b8:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001be:	f107 0318 	add.w	r3, r7, #24
 80001c2:	4618      	mov	r0, r3
 80001c4:	f001 faa0 	bl	8001708 <HAL_RCC_OscConfig>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d001      	beq.n	80001d2 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001ce:	f000 f937 	bl	8000440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d2:	230f      	movs	r3, #15
 80001d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d6:	2302      	movs	r3, #2
 80001d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2102      	movs	r1, #2
 80001ec:	4618      	mov	r0, r3
 80001ee:	f001 fd0d 	bl	8001c0c <HAL_RCC_ClockConfig>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f8:	f000 f922 	bl	8000440 <Error_Handler>
  }
}
 80001fc:	bf00      	nop
 80001fe:	3740      	adds	r7, #64	@ 0x40
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000208:	4b12      	ldr	r3, [pc, #72]	@ (8000254 <MX_I2C1_Init+0x50>)
 800020a:	4a13      	ldr	r2, [pc, #76]	@ (8000258 <MX_I2C1_Init+0x54>)
 800020c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800020e:	4b11      	ldr	r3, [pc, #68]	@ (8000254 <MX_I2C1_Init+0x50>)
 8000210:	4a12      	ldr	r2, [pc, #72]	@ (800025c <MX_I2C1_Init+0x58>)
 8000212:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000214:	4b0f      	ldr	r3, [pc, #60]	@ (8000254 <MX_I2C1_Init+0x50>)
 8000216:	2200      	movs	r2, #0
 8000218:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800021a:	4b0e      	ldr	r3, [pc, #56]	@ (8000254 <MX_I2C1_Init+0x50>)
 800021c:	2200      	movs	r2, #0
 800021e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000220:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <MX_I2C1_Init+0x50>)
 8000222:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000226:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000228:	4b0a      	ldr	r3, [pc, #40]	@ (8000254 <MX_I2C1_Init+0x50>)
 800022a:	2200      	movs	r2, #0
 800022c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800022e:	4b09      	ldr	r3, [pc, #36]	@ (8000254 <MX_I2C1_Init+0x50>)
 8000230:	2200      	movs	r2, #0
 8000232:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000234:	4b07      	ldr	r3, [pc, #28]	@ (8000254 <MX_I2C1_Init+0x50>)
 8000236:	2200      	movs	r2, #0
 8000238:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800023a:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <MX_I2C1_Init+0x50>)
 800023c:	2200      	movs	r2, #0
 800023e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000240:	4804      	ldr	r0, [pc, #16]	@ (8000254 <MX_I2C1_Init+0x50>)
 8000242:	f000 fdb5 	bl	8000db0 <HAL_I2C_Init>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800024c:	f000 f8f8 	bl	8000440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000044 	.word	0x20000044
 8000258:	40005400 	.word	0x40005400
 800025c:	000186a0 	.word	0x000186a0

08000260 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b08c      	sub	sp, #48	@ 0x30
 8000264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000266:	f107 030c 	add.w	r3, r7, #12
 800026a:	2224      	movs	r2, #36	@ 0x24
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f002 fe56 	bl	8002f20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800027c:	4b22      	ldr	r3, [pc, #136]	@ (8000308 <MX_TIM1_Init+0xa8>)
 800027e:	4a23      	ldr	r2, [pc, #140]	@ (800030c <MX_TIM1_Init+0xac>)
 8000280:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000282:	4b21      	ldr	r3, [pc, #132]	@ (8000308 <MX_TIM1_Init+0xa8>)
 8000284:	2200      	movs	r2, #0
 8000286:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000288:	4b1f      	ldr	r3, [pc, #124]	@ (8000308 <MX_TIM1_Init+0xa8>)
 800028a:	2200      	movs	r2, #0
 800028c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800028e:	4b1e      	ldr	r3, [pc, #120]	@ (8000308 <MX_TIM1_Init+0xa8>)
 8000290:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000294:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000296:	4b1c      	ldr	r3, [pc, #112]	@ (8000308 <MX_TIM1_Init+0xa8>)
 8000298:	2200      	movs	r2, #0
 800029a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800029c:	4b1a      	ldr	r3, [pc, #104]	@ (8000308 <MX_TIM1_Init+0xa8>)
 800029e:	2200      	movs	r2, #0
 80002a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002a2:	4b19      	ldr	r3, [pc, #100]	@ (8000308 <MX_TIM1_Init+0xa8>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80002a8:	2301      	movs	r3, #1
 80002aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80002ac:	2300      	movs	r3, #0
 80002ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80002b0:	2301      	movs	r3, #1
 80002b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80002bc:	2300      	movs	r3, #0
 80002be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80002c0:	2301      	movs	r3, #1
 80002c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80002cc:	f107 030c 	add.w	r3, r7, #12
 80002d0:	4619      	mov	r1, r3
 80002d2:	480d      	ldr	r0, [pc, #52]	@ (8000308 <MX_TIM1_Init+0xa8>)
 80002d4:	f001 fe28 	bl	8001f28 <HAL_TIM_Encoder_Init>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80002de:	f000 f8af 	bl	8000440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002e2:	2300      	movs	r3, #0
 80002e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002e6:	2300      	movs	r3, #0
 80002e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4619      	mov	r1, r3
 80002ee:	4806      	ldr	r0, [pc, #24]	@ (8000308 <MX_TIM1_Init+0xa8>)
 80002f0:	f001 ffdc 	bl	80022ac <HAL_TIMEx_MasterConfigSynchronization>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80002fa:	f000 f8a1 	bl	8000440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80002fe:	bf00      	nop
 8000300:	3730      	adds	r7, #48	@ 0x30
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000098 	.word	0x20000098
 800030c:	40012c00 	.word	0x40012c00

08000310 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000314:	4b11      	ldr	r3, [pc, #68]	@ (800035c <MX_USART2_UART_Init+0x4c>)
 8000316:	4a12      	ldr	r2, [pc, #72]	@ (8000360 <MX_USART2_UART_Init+0x50>)
 8000318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800031a:	4b10      	ldr	r3, [pc, #64]	@ (800035c <MX_USART2_UART_Init+0x4c>)
 800031c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000322:	4b0e      	ldr	r3, [pc, #56]	@ (800035c <MX_USART2_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000328:	4b0c      	ldr	r3, [pc, #48]	@ (800035c <MX_USART2_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800032e:	4b0b      	ldr	r3, [pc, #44]	@ (800035c <MX_USART2_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000334:	4b09      	ldr	r3, [pc, #36]	@ (800035c <MX_USART2_UART_Init+0x4c>)
 8000336:	220c      	movs	r2, #12
 8000338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033a:	4b08      	ldr	r3, [pc, #32]	@ (800035c <MX_USART2_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000340:	4b06      	ldr	r3, [pc, #24]	@ (800035c <MX_USART2_UART_Init+0x4c>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000346:	4805      	ldr	r0, [pc, #20]	@ (800035c <MX_USART2_UART_Init+0x4c>)
 8000348:	f002 f80e 	bl	8002368 <HAL_UART_Init>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000352:	f000 f875 	bl	8000440 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	200000e0 	.word	0x200000e0
 8000360:	40004400 	.word	0x40004400

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b088      	sub	sp, #32
 8000368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000378:	4b2d      	ldr	r3, [pc, #180]	@ (8000430 <MX_GPIO_Init+0xcc>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a2c      	ldr	r2, [pc, #176]	@ (8000430 <MX_GPIO_Init+0xcc>)
 800037e:	f043 0310 	orr.w	r3, r3, #16
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b2a      	ldr	r3, [pc, #168]	@ (8000430 <MX_GPIO_Init+0xcc>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0310 	and.w	r3, r3, #16
 800038c:	60fb      	str	r3, [r7, #12]
 800038e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000390:	4b27      	ldr	r3, [pc, #156]	@ (8000430 <MX_GPIO_Init+0xcc>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a26      	ldr	r2, [pc, #152]	@ (8000430 <MX_GPIO_Init+0xcc>)
 8000396:	f043 0320 	orr.w	r3, r3, #32
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b24      	ldr	r3, [pc, #144]	@ (8000430 <MX_GPIO_Init+0xcc>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0320 	and.w	r3, r3, #32
 80003a4:	60bb      	str	r3, [r7, #8]
 80003a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <MX_GPIO_Init+0xcc>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a20      	ldr	r2, [pc, #128]	@ (8000430 <MX_GPIO_Init+0xcc>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000430 <MX_GPIO_Init+0xcc>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0304 	and.w	r3, r3, #4
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000430 <MX_GPIO_Init+0xcc>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000430 <MX_GPIO_Init+0xcc>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b18      	ldr	r3, [pc, #96]	@ (8000430 <MX_GPIO_Init+0xcc>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0308 	and.w	r3, r3, #8
 80003d4:	603b      	str	r3, [r7, #0]
 80003d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2120      	movs	r1, #32
 80003dc:	4815      	ldr	r0, [pc, #84]	@ (8000434 <MX_GPIO_Init+0xd0>)
 80003de:	f000 fcad 	bl	8000d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003e8:	4b13      	ldr	r3, [pc, #76]	@ (8000438 <MX_GPIO_Init+0xd4>)
 80003ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	4619      	mov	r1, r3
 80003f6:	4811      	ldr	r0, [pc, #68]	@ (800043c <MX_GPIO_Init+0xd8>)
 80003f8:	f000 fb1c 	bl	8000a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003fc:	2320      	movs	r3, #32
 80003fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000400:	2301      	movs	r3, #1
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000408:	2302      	movs	r3, #2
 800040a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	4619      	mov	r1, r3
 8000412:	4808      	ldr	r0, [pc, #32]	@ (8000434 <MX_GPIO_Init+0xd0>)
 8000414:	f000 fb0e 	bl	8000a34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000418:	2200      	movs	r2, #0
 800041a:	2100      	movs	r1, #0
 800041c:	2028      	movs	r0, #40	@ 0x28
 800041e:	f000 fad2 	bl	80009c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000422:	2028      	movs	r0, #40	@ 0x28
 8000424:	f000 faeb 	bl	80009fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000428:	bf00      	nop
 800042a:	3720      	adds	r7, #32
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40021000 	.word	0x40021000
 8000434:	40010800 	.word	0x40010800
 8000438:	10110000 	.word	0x10110000
 800043c:	40011000 	.word	0x40011000

08000440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000444:	b672      	cpsid	i
}
 8000446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000448:	bf00      	nop
 800044a:	e7fd      	b.n	8000448 <Error_Handler+0x8>

0800044c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000452:	4b15      	ldr	r3, [pc, #84]	@ (80004a8 <HAL_MspInit+0x5c>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a14      	ldr	r2, [pc, #80]	@ (80004a8 <HAL_MspInit+0x5c>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b12      	ldr	r3, [pc, #72]	@ (80004a8 <HAL_MspInit+0x5c>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046a:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <HAL_MspInit+0x5c>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a0e      	ldr	r2, [pc, #56]	@ (80004a8 <HAL_MspInit+0x5c>)
 8000470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <HAL_MspInit+0x5c>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000482:	4b0a      	ldr	r3, [pc, #40]	@ (80004ac <HAL_MspInit+0x60>)
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	4a04      	ldr	r2, [pc, #16]	@ (80004ac <HAL_MspInit+0x60>)
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010000 	.word	0x40010000

080004b0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b08a      	sub	sp, #40	@ 0x28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b8:	f107 0314 	add.w	r3, r7, #20
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a1d      	ldr	r2, [pc, #116]	@ (8000540 <HAL_I2C_MspInit+0x90>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d132      	bne.n	8000536 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000544 <HAL_I2C_MspInit+0x94>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000544 <HAL_I2C_MspInit+0x94>)
 80004d6:	f043 0308 	orr.w	r3, r3, #8
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b19      	ldr	r3, [pc, #100]	@ (8000544 <HAL_I2C_MspInit+0x94>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0308 	and.w	r3, r3, #8
 80004e4:	613b      	str	r3, [r7, #16]
 80004e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80004e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80004ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004ee:	2312      	movs	r3, #18
 80004f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f2:	2303      	movs	r3, #3
 80004f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	4619      	mov	r1, r3
 80004fc:	4812      	ldr	r0, [pc, #72]	@ (8000548 <HAL_I2C_MspInit+0x98>)
 80004fe:	f000 fa99 	bl	8000a34 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000502:	4b12      	ldr	r3, [pc, #72]	@ (800054c <HAL_I2C_MspInit+0x9c>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	627b      	str	r3, [r7, #36]	@ 0x24
 8000508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800050a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800050e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000512:	f043 0302 	orr.w	r3, r3, #2
 8000516:	627b      	str	r3, [r7, #36]	@ 0x24
 8000518:	4a0c      	ldr	r2, [pc, #48]	@ (800054c <HAL_I2C_MspInit+0x9c>)
 800051a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800051c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800051e:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <HAL_I2C_MspInit+0x94>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a08      	ldr	r2, [pc, #32]	@ (8000544 <HAL_I2C_MspInit+0x94>)
 8000524:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000528:	61d3      	str	r3, [r2, #28]
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <HAL_I2C_MspInit+0x94>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000536:	bf00      	nop
 8000538:	3728      	adds	r7, #40	@ 0x28
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40005400 	.word	0x40005400
 8000544:	40021000 	.word	0x40021000
 8000548:	40010c00 	.word	0x40010c00
 800054c:	40010000 	.word	0x40010000

08000550 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a16      	ldr	r2, [pc, #88]	@ (80005c4 <HAL_TIM_Encoder_MspInit+0x74>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d124      	bne.n	80005ba <HAL_TIM_Encoder_MspInit+0x6a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000570:	4b15      	ldr	r3, [pc, #84]	@ (80005c8 <HAL_TIM_Encoder_MspInit+0x78>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a14      	ldr	r2, [pc, #80]	@ (80005c8 <HAL_TIM_Encoder_MspInit+0x78>)
 8000576:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <HAL_TIM_Encoder_MspInit+0x78>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <HAL_TIM_Encoder_MspInit+0x78>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a0e      	ldr	r2, [pc, #56]	@ (80005c8 <HAL_TIM_Encoder_MspInit+0x78>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <HAL_TIM_Encoder_MspInit+0x78>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80005a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ae:	f107 0310 	add.w	r3, r7, #16
 80005b2:	4619      	mov	r1, r3
 80005b4:	4805      	ldr	r0, [pc, #20]	@ (80005cc <HAL_TIM_Encoder_MspInit+0x7c>)
 80005b6:	f000 fa3d 	bl	8000a34 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80005ba:	bf00      	nop
 80005bc:	3720      	adds	r7, #32
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40012c00 	.word	0x40012c00
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010800 	.word	0x40010800

080005d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a15      	ldr	r2, [pc, #84]	@ (8000640 <HAL_UART_MspInit+0x70>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d123      	bne.n	8000638 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005f0:	4b14      	ldr	r3, [pc, #80]	@ (8000644 <HAL_UART_MspInit+0x74>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	4a13      	ldr	r2, [pc, #76]	@ (8000644 <HAL_UART_MspInit+0x74>)
 80005f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005fa:	61d3      	str	r3, [r2, #28]
 80005fc:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <HAL_UART_MspInit+0x74>)
 80005fe:	69db      	ldr	r3, [r3, #28]
 8000600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <HAL_UART_MspInit+0x74>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a0d      	ldr	r2, [pc, #52]	@ (8000644 <HAL_UART_MspInit+0x74>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <HAL_UART_MspInit+0x74>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000620:	230c      	movs	r3, #12
 8000622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2302      	movs	r3, #2
 800062a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4619      	mov	r1, r3
 8000632:	4805      	ldr	r0, [pc, #20]	@ (8000648 <HAL_UART_MspInit+0x78>)
 8000634:	f000 f9fe 	bl	8000a34 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40004400 	.word	0x40004400
 8000644:	40021000 	.word	0x40021000
 8000648:	40010800 	.word	0x40010800

0800064c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <NMI_Handler+0x4>

08000654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <HardFault_Handler+0x4>

0800065c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <MemManage_Handler+0x4>

08000664 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <UsageFault_Handler+0x4>

08000674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069c:	f000 f87c 	bl	8000798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006a8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80006ac:	f000 fb5e 	bl	8000d6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006c0:	f7ff fff8 	bl	80006b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c4:	480b      	ldr	r0, [pc, #44]	@ (80006f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006c6:	490c      	ldr	r1, [pc, #48]	@ (80006f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006c8:	4a0c      	ldr	r2, [pc, #48]	@ (80006fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006cc:	e002      	b.n	80006d4 <LoopCopyDataInit>

080006ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d2:	3304      	adds	r3, #4

080006d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d8:	d3f9      	bcc.n	80006ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006da:	4a09      	ldr	r2, [pc, #36]	@ (8000700 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006dc:	4c09      	ldr	r4, [pc, #36]	@ (8000704 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e0:	e001      	b.n	80006e6 <LoopFillZerobss>

080006e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e4:	3204      	adds	r2, #4

080006e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e8:	d3fb      	bcc.n	80006e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ea:	f002 fc21 	bl	8002f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ee:	f7ff fd35 	bl	800015c <main>
  bx lr
 80006f2:	4770      	bx	lr
  ldr r0, =_sdata
 80006f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f8:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80006fc:	0800439c 	.word	0x0800439c
  ldr r2, =_sbss
 8000700:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000704:	20000584 	.word	0x20000584

08000708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000708:	e7fe      	b.n	8000708 <ADC1_2_IRQHandler>
	...

0800070c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000710:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <HAL_Init+0x28>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a07      	ldr	r2, [pc, #28]	@ (8000734 <HAL_Init+0x28>)
 8000716:	f043 0310 	orr.w	r3, r3, #16
 800071a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800071c:	2003      	movs	r0, #3
 800071e:	f000 f947 	bl	80009b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000722:	2000      	movs	r0, #0
 8000724:	f000 f808 	bl	8000738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000728:	f7ff fe90 	bl	800044c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40022000 	.word	0x40022000

08000738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <HAL_InitTick+0x54>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <HAL_InitTick+0x58>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800074e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000752:	fbb2 f3f3 	udiv	r3, r2, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f95f 	bl	8000a1a <HAL_SYSTICK_Config>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	e00e      	b.n	8000784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b0f      	cmp	r3, #15
 800076a:	d80a      	bhi.n	8000782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800076c:	2200      	movs	r2, #0
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f000 f927 	bl	80009c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000778:	4a06      	ldr	r2, [pc, #24]	@ (8000794 <HAL_InitTick+0x5c>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800077e:	2300      	movs	r3, #0
 8000780:	e000      	b.n	8000784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000000 	.word	0x20000000
 8000790:	20000008 	.word	0x20000008
 8000794:	20000004 	.word	0x20000004

08000798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800079c:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <HAL_IncTick+0x1c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <HAL_IncTick+0x20>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	4a03      	ldr	r2, [pc, #12]	@ (80007b8 <HAL_IncTick+0x20>)
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	20000008 	.word	0x20000008
 80007b8:	20000128 	.word	0x20000128

080007bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return uwTick;
 80007c0:	4b02      	ldr	r3, [pc, #8]	@ (80007cc <HAL_GetTick+0x10>)
 80007c2:	681b      	ldr	r3, [r3, #0]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	20000128 	.word	0x20000128

080007d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007d8:	f7ff fff0 	bl	80007bc <HAL_GetTick>
 80007dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007e8:	d005      	beq.n	80007f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <HAL_Delay+0x44>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	461a      	mov	r2, r3
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	4413      	add	r3, r2
 80007f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007f6:	bf00      	nop
 80007f8:	f7ff ffe0 	bl	80007bc <HAL_GetTick>
 80007fc:	4602      	mov	r2, r0
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	429a      	cmp	r2, r3
 8000806:	d8f7      	bhi.n	80007f8 <HAL_Delay+0x28>
  {
  }
}
 8000808:	bf00      	nop
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000008 	.word	0x20000008

08000818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <__NVIC_SetPriorityGrouping+0x44>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000840:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800084a:	4a04      	ldr	r2, [pc, #16]	@ (800085c <__NVIC_SetPriorityGrouping+0x44>)
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	60d3      	str	r3, [r2, #12]
}
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000864:	4b04      	ldr	r3, [pc, #16]	@ (8000878 <__NVIC_GetPriorityGrouping+0x18>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	f003 0307 	and.w	r3, r3, #7
}
 800086e:	4618      	mov	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	2b00      	cmp	r3, #0
 800088c:	db0b      	blt.n	80008a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	f003 021f 	and.w	r2, r3, #31
 8000894:	4906      	ldr	r1, [pc, #24]	@ (80008b0 <__NVIC_EnableIRQ+0x34>)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	095b      	lsrs	r3, r3, #5
 800089c:	2001      	movs	r0, #1
 800089e:	fa00 f202 	lsl.w	r2, r0, r2
 80008a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr
 80008b0:	e000e100 	.word	0xe000e100

080008b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	6039      	str	r1, [r7, #0]
 80008be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	db0a      	blt.n	80008de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	490c      	ldr	r1, [pc, #48]	@ (8000900 <__NVIC_SetPriority+0x4c>)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	0112      	lsls	r2, r2, #4
 80008d4:	b2d2      	uxtb	r2, r2
 80008d6:	440b      	add	r3, r1
 80008d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008dc:	e00a      	b.n	80008f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4908      	ldr	r1, [pc, #32]	@ (8000904 <__NVIC_SetPriority+0x50>)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	f003 030f 	and.w	r3, r3, #15
 80008ea:	3b04      	subs	r3, #4
 80008ec:	0112      	lsls	r2, r2, #4
 80008ee:	b2d2      	uxtb	r2, r2
 80008f0:	440b      	add	r3, r1
 80008f2:	761a      	strb	r2, [r3, #24]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000e100 	.word	0xe000e100
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000908:	b480      	push	{r7}
 800090a:	b089      	sub	sp, #36	@ 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	f1c3 0307 	rsb	r3, r3, #7
 8000922:	2b04      	cmp	r3, #4
 8000924:	bf28      	it	cs
 8000926:	2304      	movcs	r3, #4
 8000928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3304      	adds	r3, #4
 800092e:	2b06      	cmp	r3, #6
 8000930:	d902      	bls.n	8000938 <NVIC_EncodePriority+0x30>
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3b03      	subs	r3, #3
 8000936:	e000      	b.n	800093a <NVIC_EncodePriority+0x32>
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	f04f 32ff 	mov.w	r2, #4294967295
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	43da      	mvns	r2, r3
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	401a      	ands	r2, r3
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000950:	f04f 31ff 	mov.w	r1, #4294967295
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	fa01 f303 	lsl.w	r3, r1, r3
 800095a:	43d9      	mvns	r1, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	4313      	orrs	r3, r2
         );
}
 8000962:	4618      	mov	r0, r3
 8000964:	3724      	adds	r7, #36	@ 0x24
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800097c:	d301      	bcc.n	8000982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097e:	2301      	movs	r3, #1
 8000980:	e00f      	b.n	80009a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000982:	4a0a      	ldr	r2, [pc, #40]	@ (80009ac <SysTick_Config+0x40>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098a:	210f      	movs	r1, #15
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f7ff ff90 	bl	80008b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <SysTick_Config+0x40>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099a:	4b04      	ldr	r3, [pc, #16]	@ (80009ac <SysTick_Config+0x40>)
 800099c:	2207      	movs	r2, #7
 800099e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff2d 	bl	8000818 <__NVIC_SetPriorityGrouping>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d8:	f7ff ff42 	bl	8000860 <__NVIC_GetPriorityGrouping>
 80009dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	6978      	ldr	r0, [r7, #20]
 80009e4:	f7ff ff90 	bl	8000908 <NVIC_EncodePriority>
 80009e8:	4602      	mov	r2, r0
 80009ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff5f 	bl	80008b4 <__NVIC_SetPriority>
}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff35 	bl	800087c <__NVIC_EnableIRQ>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ffa2 	bl	800096c <SysTick_Config>
 8000a28:	4603      	mov	r3, r0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b08b      	sub	sp, #44	@ 0x2c
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a46:	e169      	b.n	8000d1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	69fa      	ldr	r2, [r7, #28]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	f040 8158 	bne.w	8000d16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	4a9a      	ldr	r2, [pc, #616]	@ (8000cd4 <HAL_GPIO_Init+0x2a0>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d05e      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000a70:	4a98      	ldr	r2, [pc, #608]	@ (8000cd4 <HAL_GPIO_Init+0x2a0>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d875      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000a76:	4a98      	ldr	r2, [pc, #608]	@ (8000cd8 <HAL_GPIO_Init+0x2a4>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d058      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000a7c:	4a96      	ldr	r2, [pc, #600]	@ (8000cd8 <HAL_GPIO_Init+0x2a4>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d86f      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000a82:	4a96      	ldr	r2, [pc, #600]	@ (8000cdc <HAL_GPIO_Init+0x2a8>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d052      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000a88:	4a94      	ldr	r2, [pc, #592]	@ (8000cdc <HAL_GPIO_Init+0x2a8>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d869      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000a8e:	4a94      	ldr	r2, [pc, #592]	@ (8000ce0 <HAL_GPIO_Init+0x2ac>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d04c      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000a94:	4a92      	ldr	r2, [pc, #584]	@ (8000ce0 <HAL_GPIO_Init+0x2ac>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d863      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000a9a:	4a92      	ldr	r2, [pc, #584]	@ (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d046      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000aa0:	4a90      	ldr	r2, [pc, #576]	@ (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d85d      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000aa6:	2b12      	cmp	r3, #18
 8000aa8:	d82a      	bhi.n	8000b00 <HAL_GPIO_Init+0xcc>
 8000aaa:	2b12      	cmp	r3, #18
 8000aac:	d859      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000aae:	a201      	add	r2, pc, #4	@ (adr r2, 8000ab4 <HAL_GPIO_Init+0x80>)
 8000ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab4:	08000b2f 	.word	0x08000b2f
 8000ab8:	08000b09 	.word	0x08000b09
 8000abc:	08000b1b 	.word	0x08000b1b
 8000ac0:	08000b5d 	.word	0x08000b5d
 8000ac4:	08000b63 	.word	0x08000b63
 8000ac8:	08000b63 	.word	0x08000b63
 8000acc:	08000b63 	.word	0x08000b63
 8000ad0:	08000b63 	.word	0x08000b63
 8000ad4:	08000b63 	.word	0x08000b63
 8000ad8:	08000b63 	.word	0x08000b63
 8000adc:	08000b63 	.word	0x08000b63
 8000ae0:	08000b63 	.word	0x08000b63
 8000ae4:	08000b63 	.word	0x08000b63
 8000ae8:	08000b63 	.word	0x08000b63
 8000aec:	08000b63 	.word	0x08000b63
 8000af0:	08000b63 	.word	0x08000b63
 8000af4:	08000b63 	.word	0x08000b63
 8000af8:	08000b11 	.word	0x08000b11
 8000afc:	08000b25 	.word	0x08000b25
 8000b00:	4a79      	ldr	r2, [pc, #484]	@ (8000ce8 <HAL_GPIO_Init+0x2b4>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d013      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b06:	e02c      	b.n	8000b62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	623b      	str	r3, [r7, #32]
          break;
 8000b0e:	e029      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	3304      	adds	r3, #4
 8000b16:	623b      	str	r3, [r7, #32]
          break;
 8000b18:	e024      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	3308      	adds	r3, #8
 8000b20:	623b      	str	r3, [r7, #32]
          break;
 8000b22:	e01f      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	330c      	adds	r3, #12
 8000b2a:	623b      	str	r3, [r7, #32]
          break;
 8000b2c:	e01a      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d102      	bne.n	8000b3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b36:	2304      	movs	r3, #4
 8000b38:	623b      	str	r3, [r7, #32]
          break;
 8000b3a:	e013      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d105      	bne.n	8000b50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b44:	2308      	movs	r3, #8
 8000b46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	69fa      	ldr	r2, [r7, #28]
 8000b4c:	611a      	str	r2, [r3, #16]
          break;
 8000b4e:	e009      	b.n	8000b64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b50:	2308      	movs	r3, #8
 8000b52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	69fa      	ldr	r2, [r7, #28]
 8000b58:	615a      	str	r2, [r3, #20]
          break;
 8000b5a:	e003      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
          break;
 8000b60:	e000      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          break;
 8000b62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	2bff      	cmp	r3, #255	@ 0xff
 8000b68:	d801      	bhi.n	8000b6e <HAL_GPIO_Init+0x13a>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	e001      	b.n	8000b72 <HAL_GPIO_Init+0x13e>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3304      	adds	r3, #4
 8000b72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	2bff      	cmp	r3, #255	@ 0xff
 8000b78:	d802      	bhi.n	8000b80 <HAL_GPIO_Init+0x14c>
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	e002      	b.n	8000b86 <HAL_GPIO_Init+0x152>
 8000b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b82:	3b08      	subs	r3, #8
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	210f      	movs	r1, #15
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	401a      	ands	r2, r3
 8000b98:	6a39      	ldr	r1, [r7, #32]
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 80b1 	beq.w	8000d16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8000cec <HAL_GPIO_Init+0x2b8>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a4c      	ldr	r2, [pc, #304]	@ (8000cec <HAL_GPIO_Init+0x2b8>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b4a      	ldr	r3, [pc, #296]	@ (8000cec <HAL_GPIO_Init+0x2b8>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bcc:	4a48      	ldr	r2, [pc, #288]	@ (8000cf0 <HAL_GPIO_Init+0x2bc>)
 8000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	220f      	movs	r2, #15
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	4013      	ands	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a40      	ldr	r2, [pc, #256]	@ (8000cf4 <HAL_GPIO_Init+0x2c0>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d013      	beq.n	8000c20 <HAL_GPIO_Init+0x1ec>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a3f      	ldr	r2, [pc, #252]	@ (8000cf8 <HAL_GPIO_Init+0x2c4>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d00d      	beq.n	8000c1c <HAL_GPIO_Init+0x1e8>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a3e      	ldr	r2, [pc, #248]	@ (8000cfc <HAL_GPIO_Init+0x2c8>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d007      	beq.n	8000c18 <HAL_GPIO_Init+0x1e4>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a3d      	ldr	r2, [pc, #244]	@ (8000d00 <HAL_GPIO_Init+0x2cc>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d101      	bne.n	8000c14 <HAL_GPIO_Init+0x1e0>
 8000c10:	2303      	movs	r3, #3
 8000c12:	e006      	b.n	8000c22 <HAL_GPIO_Init+0x1ee>
 8000c14:	2304      	movs	r3, #4
 8000c16:	e004      	b.n	8000c22 <HAL_GPIO_Init+0x1ee>
 8000c18:	2302      	movs	r3, #2
 8000c1a:	e002      	b.n	8000c22 <HAL_GPIO_Init+0x1ee>
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e000      	b.n	8000c22 <HAL_GPIO_Init+0x1ee>
 8000c20:	2300      	movs	r3, #0
 8000c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c24:	f002 0203 	and.w	r2, r2, #3
 8000c28:	0092      	lsls	r2, r2, #2
 8000c2a:	4093      	lsls	r3, r2
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c32:	492f      	ldr	r1, [pc, #188]	@ (8000cf0 <HAL_GPIO_Init+0x2bc>)
 8000c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c36:	089b      	lsrs	r3, r3, #2
 8000c38:	3302      	adds	r3, #2
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d006      	beq.n	8000c5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	492c      	ldr	r1, [pc, #176]	@ (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	608b      	str	r3, [r1, #8]
 8000c58:	e006      	b.n	8000c68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	43db      	mvns	r3, r3
 8000c62:	4928      	ldr	r1, [pc, #160]	@ (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d006      	beq.n	8000c82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c74:	4b23      	ldr	r3, [pc, #140]	@ (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	4922      	ldr	r1, [pc, #136]	@ (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	60cb      	str	r3, [r1, #12]
 8000c80:	e006      	b.n	8000c90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c82:	4b20      	ldr	r3, [pc, #128]	@ (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	491e      	ldr	r1, [pc, #120]	@ (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d006      	beq.n	8000caa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c9c:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	4918      	ldr	r1, [pc, #96]	@ (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	604b      	str	r3, [r1, #4]
 8000ca8:	e006      	b.n	8000cb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000caa:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	4914      	ldr	r1, [pc, #80]	@ (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d021      	beq.n	8000d08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	490e      	ldr	r1, [pc, #56]	@ (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	600b      	str	r3, [r1, #0]
 8000cd0:	e021      	b.n	8000d16 <HAL_GPIO_Init+0x2e2>
 8000cd2:	bf00      	nop
 8000cd4:	10320000 	.word	0x10320000
 8000cd8:	10310000 	.word	0x10310000
 8000cdc:	10220000 	.word	0x10220000
 8000ce0:	10210000 	.word	0x10210000
 8000ce4:	10120000 	.word	0x10120000
 8000ce8:	10110000 	.word	0x10110000
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010000 	.word	0x40010000
 8000cf4:	40010800 	.word	0x40010800
 8000cf8:	40010c00 	.word	0x40010c00
 8000cfc:	40011000 	.word	0x40011000
 8000d00:	40011400 	.word	0x40011400
 8000d04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d08:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <HAL_GPIO_Init+0x304>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	4909      	ldr	r1, [pc, #36]	@ (8000d38 <HAL_GPIO_Init+0x304>)
 8000d12:	4013      	ands	r3, r2
 8000d14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d18:	3301      	adds	r3, #1
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d22:	fa22 f303 	lsr.w	r3, r2, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f47f ae8e 	bne.w	8000a48 <HAL_GPIO_Init+0x14>
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	372c      	adds	r7, #44	@ 0x2c
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	40010400 	.word	0x40010400

08000d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	807b      	strh	r3, [r7, #2]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d4c:	787b      	ldrb	r3, [r7, #1]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d52:	887a      	ldrh	r2, [r7, #2]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d58:	e003      	b.n	8000d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d5a:	887b      	ldrh	r3, [r7, #2]
 8000d5c:	041a      	lsls	r2, r3, #16
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	611a      	str	r2, [r3, #16]
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d76:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d78:	695a      	ldr	r2, [r3, #20]
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d006      	beq.n	8000d90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d82:	4a05      	ldr	r2, [pc, #20]	@ (8000d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f806 	bl	8000d9c <HAL_GPIO_EXTI_Callback>
  }
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40010400 	.word	0x40010400

08000d9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e12b      	b.n	800101a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d106      	bne.n	8000ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff fb6a 	bl	80004b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2224      	movs	r2, #36	@ 0x24
 8000de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f022 0201 	bic.w	r2, r2, #1
 8000df2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e14:	f001 f842 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 8000e18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	4a81      	ldr	r2, [pc, #516]	@ (8001024 <HAL_I2C_Init+0x274>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d807      	bhi.n	8000e34 <HAL_I2C_Init+0x84>
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4a80      	ldr	r2, [pc, #512]	@ (8001028 <HAL_I2C_Init+0x278>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	bf94      	ite	ls
 8000e2c:	2301      	movls	r3, #1
 8000e2e:	2300      	movhi	r3, #0
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	e006      	b.n	8000e42 <HAL_I2C_Init+0x92>
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4a7d      	ldr	r2, [pc, #500]	@ (800102c <HAL_I2C_Init+0x27c>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	bf94      	ite	ls
 8000e3c:	2301      	movls	r3, #1
 8000e3e:	2300      	movhi	r3, #0
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e0e7      	b.n	800101a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4a78      	ldr	r2, [pc, #480]	@ (8001030 <HAL_I2C_Init+0x280>)
 8000e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e52:	0c9b      	lsrs	r3, r3, #18
 8000e54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	4a6a      	ldr	r2, [pc, #424]	@ (8001024 <HAL_I2C_Init+0x274>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d802      	bhi.n	8000e84 <HAL_I2C_Init+0xd4>
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	3301      	adds	r3, #1
 8000e82:	e009      	b.n	8000e98 <HAL_I2C_Init+0xe8>
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000e8a:	fb02 f303 	mul.w	r3, r2, r3
 8000e8e:	4a69      	ldr	r2, [pc, #420]	@ (8001034 <HAL_I2C_Init+0x284>)
 8000e90:	fba2 2303 	umull	r2, r3, r2, r3
 8000e94:	099b      	lsrs	r3, r3, #6
 8000e96:	3301      	adds	r3, #1
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	6812      	ldr	r2, [r2, #0]
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000eaa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	495c      	ldr	r1, [pc, #368]	@ (8001024 <HAL_I2C_Init+0x274>)
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d819      	bhi.n	8000eec <HAL_I2C_Init+0x13c>
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	1e59      	subs	r1, r3, #1
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ec6:	1c59      	adds	r1, r3, #1
 8000ec8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000ecc:	400b      	ands	r3, r1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00a      	beq.n	8000ee8 <HAL_I2C_Init+0x138>
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	1e59      	subs	r1, r3, #1
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ee6:	e051      	b.n	8000f8c <HAL_I2C_Init+0x1dc>
 8000ee8:	2304      	movs	r3, #4
 8000eea:	e04f      	b.n	8000f8c <HAL_I2C_Init+0x1dc>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d111      	bne.n	8000f18 <HAL_I2C_Init+0x168>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	1e58      	subs	r0, r3, #1
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6859      	ldr	r1, [r3, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	440b      	add	r3, r1
 8000f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f06:	3301      	adds	r3, #1
 8000f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf0c      	ite	eq
 8000f10:	2301      	moveq	r3, #1
 8000f12:	2300      	movne	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	e012      	b.n	8000f3e <HAL_I2C_Init+0x18e>
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	1e58      	subs	r0, r3, #1
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6859      	ldr	r1, [r3, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	0099      	lsls	r1, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f2e:	3301      	adds	r3, #1
 8000f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bf0c      	ite	eq
 8000f38:	2301      	moveq	r3, #1
 8000f3a:	2300      	movne	r3, #0
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_I2C_Init+0x196>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e022      	b.n	8000f8c <HAL_I2C_Init+0x1dc>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10e      	bne.n	8000f6c <HAL_I2C_Init+0x1bc>
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	1e58      	subs	r0, r3, #1
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6859      	ldr	r1, [r3, #4]
 8000f56:	460b      	mov	r3, r1
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	440b      	add	r3, r1
 8000f5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f60:	3301      	adds	r3, #1
 8000f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f6a:	e00f      	b.n	8000f8c <HAL_I2C_Init+0x1dc>
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	1e58      	subs	r0, r3, #1
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6859      	ldr	r1, [r3, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	0099      	lsls	r1, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f82:	3301      	adds	r3, #1
 8000f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	6809      	ldr	r1, [r1, #0]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69da      	ldr	r2, [r3, #28]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000fba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	6911      	ldr	r1, [r2, #16]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68d2      	ldr	r2, [r2, #12]
 8000fc6:	4311      	orrs	r1, r2
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	6812      	ldr	r2, [r2, #0]
 8000fcc:	430b      	orrs	r3, r1
 8000fce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	695a      	ldr	r2, [r3, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0201 	orr.w	r2, r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2220      	movs	r2, #32
 8001006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	000186a0 	.word	0x000186a0
 8001028:	001e847f 	.word	0x001e847f
 800102c:	003d08ff 	.word	0x003d08ff
 8001030:	431bde83 	.word	0x431bde83
 8001034:	10624dd3 	.word	0x10624dd3

08001038 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af02      	add	r7, sp, #8
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	4608      	mov	r0, r1
 8001042:	4611      	mov	r1, r2
 8001044:	461a      	mov	r2, r3
 8001046:	4603      	mov	r3, r0
 8001048:	817b      	strh	r3, [r7, #10]
 800104a:	460b      	mov	r3, r1
 800104c:	813b      	strh	r3, [r7, #8]
 800104e:	4613      	mov	r3, r2
 8001050:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001052:	f7ff fbb3 	bl	80007bc <HAL_GetTick>
 8001056:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b20      	cmp	r3, #32
 8001062:	f040 80d9 	bne.w	8001218 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2319      	movs	r3, #25
 800106c:	2201      	movs	r2, #1
 800106e:	496d      	ldr	r1, [pc, #436]	@ (8001224 <HAL_I2C_Mem_Write+0x1ec>)
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 f971 	bl	8001358 <I2C_WaitOnFlagUntilTimeout>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800107c:	2302      	movs	r3, #2
 800107e:	e0cc      	b.n	800121a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001086:	2b01      	cmp	r3, #1
 8001088:	d101      	bne.n	800108e <HAL_I2C_Mem_Write+0x56>
 800108a:	2302      	movs	r3, #2
 800108c:	e0c5      	b.n	800121a <HAL_I2C_Mem_Write+0x1e2>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2201      	movs	r2, #1
 8001092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d007      	beq.n	80010b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 0201 	orr.w	r2, r2, #1
 80010b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2221      	movs	r2, #33	@ 0x21
 80010c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2240      	movs	r2, #64	@ 0x40
 80010d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2200      	movs	r2, #0
 80010d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6a3a      	ldr	r2, [r7, #32]
 80010de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80010e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4a4d      	ldr	r2, [pc, #308]	@ (8001228 <HAL_I2C_Mem_Write+0x1f0>)
 80010f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80010f6:	88f8      	ldrh	r0, [r7, #6]
 80010f8:	893a      	ldrh	r2, [r7, #8]
 80010fa:	8979      	ldrh	r1, [r7, #10]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	4603      	mov	r3, r0
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f000 f890 	bl	800122c <I2C_RequestMemoryWrite>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d052      	beq.n	80011b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e081      	b.n	800121a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 fa36 	bl	800158c <I2C_WaitOnTXEFlagUntilTimeout>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00d      	beq.n	8001142 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	2b04      	cmp	r3, #4
 800112c:	d107      	bne.n	800113e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800113c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e06b      	b.n	800121a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800115c:	3b01      	subs	r3, #1
 800115e:	b29a      	uxth	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001168:	b29b      	uxth	r3, r3
 800116a:	3b01      	subs	r3, #1
 800116c:	b29a      	uxth	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	2b04      	cmp	r3, #4
 800117e:	d11b      	bne.n	80011b8 <HAL_I2C_Mem_Write+0x180>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001184:	2b00      	cmp	r3, #0
 8001186:	d017      	beq.n	80011b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011a2:	3b01      	subs	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	3b01      	subs	r3, #1
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1aa      	bne.n	8001116 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f000 fa29 	bl	800161c <I2C_WaitOnBTFFlagUntilTimeout>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00d      	beq.n	80011ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d107      	bne.n	80011e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e016      	b.n	800121a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2220      	movs	r2, #32
 8001200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	e000      	b.n	800121a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001218:	2302      	movs	r3, #2
  }
}
 800121a:	4618      	mov	r0, r3
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	00100002 	.word	0x00100002
 8001228:	ffff0000 	.word	0xffff0000

0800122c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af02      	add	r7, sp, #8
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	4608      	mov	r0, r1
 8001236:	4611      	mov	r1, r2
 8001238:	461a      	mov	r2, r3
 800123a:	4603      	mov	r3, r0
 800123c:	817b      	strh	r3, [r7, #10]
 800123e:	460b      	mov	r3, r1
 8001240:	813b      	strh	r3, [r7, #8]
 8001242:	4613      	mov	r3, r2
 8001244:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001254:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	2200      	movs	r2, #0
 800125e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f000 f878 	bl	8001358 <I2C_WaitOnFlagUntilTimeout>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00d      	beq.n	800128a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800127c:	d103      	bne.n	8001286 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001284:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e05f      	b.n	800134a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800128a:	897b      	ldrh	r3, [r7, #10]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001298:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800129a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129c:	6a3a      	ldr	r2, [r7, #32]
 800129e:	492d      	ldr	r1, [pc, #180]	@ (8001354 <I2C_RequestMemoryWrite+0x128>)
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f000 f8d3 	bl	800144c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e04c      	b.n	800134a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012c8:	6a39      	ldr	r1, [r7, #32]
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 f95e 	bl	800158c <I2C_WaitOnTXEFlagUntilTimeout>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00d      	beq.n	80012f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d107      	bne.n	80012ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e02b      	b.n	800134a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d105      	bne.n	8001304 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80012f8:	893b      	ldrh	r3, [r7, #8]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	611a      	str	r2, [r3, #16]
 8001302:	e021      	b.n	8001348 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001304:	893b      	ldrh	r3, [r7, #8]
 8001306:	0a1b      	lsrs	r3, r3, #8
 8001308:	b29b      	uxth	r3, r3
 800130a:	b2da      	uxtb	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001314:	6a39      	ldr	r1, [r7, #32]
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 f938 	bl	800158c <I2C_WaitOnTXEFlagUntilTimeout>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00d      	beq.n	800133e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	2b04      	cmp	r3, #4
 8001328:	d107      	bne.n	800133a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001338:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e005      	b.n	800134a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800133e:	893b      	ldrh	r3, [r7, #8]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	00010002 	.word	0x00010002

08001358 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	4613      	mov	r3, r2
 8001366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001368:	e048      	b.n	80013fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001370:	d044      	beq.n	80013fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001372:	f7ff fa23 	bl	80007bc <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d302      	bcc.n	8001388 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d139      	bne.n	80013fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	0c1b      	lsrs	r3, r3, #16
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b01      	cmp	r3, #1
 8001390:	d10d      	bne.n	80013ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	43da      	mvns	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	4013      	ands	r3, r2
 800139e:	b29b      	uxth	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf0c      	ite	eq
 80013a4:	2301      	moveq	r3, #1
 80013a6:	2300      	movne	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	e00c      	b.n	80013c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	43da      	mvns	r2, r3
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	4013      	ands	r3, r2
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	bf0c      	ite	eq
 80013c0:	2301      	moveq	r3, #1
 80013c2:	2300      	movne	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d116      	bne.n	80013fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2220      	movs	r2, #32
 80013d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	f043 0220 	orr.w	r2, r3, #32
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e023      	b.n	8001444 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	0c1b      	lsrs	r3, r3, #16
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d10d      	bne.n	8001422 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	43da      	mvns	r2, r3
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	4013      	ands	r3, r2
 8001412:	b29b      	uxth	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	bf0c      	ite	eq
 8001418:	2301      	moveq	r3, #1
 800141a:	2300      	movne	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	461a      	mov	r2, r3
 8001420:	e00c      	b.n	800143c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	43da      	mvns	r2, r3
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	4013      	ands	r3, r2
 800142e:	b29b      	uxth	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf0c      	ite	eq
 8001434:	2301      	moveq	r3, #1
 8001436:	2300      	movne	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	461a      	mov	r2, r3
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	429a      	cmp	r2, r3
 8001440:	d093      	beq.n	800136a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800145a:	e071      	b.n	8001540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800146a:	d123      	bne.n	80014b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800147a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001484:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2200      	movs	r2, #0
 800148a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2220      	movs	r2, #32
 8001490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	f043 0204 	orr.w	r2, r3, #4
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e067      	b.n	8001584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ba:	d041      	beq.n	8001540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014bc:	f7ff f97e 	bl	80007bc <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d302      	bcc.n	80014d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d136      	bne.n	8001540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	0c1b      	lsrs	r3, r3, #16
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d10c      	bne.n	80014f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	4013      	ands	r3, r2
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	bf14      	ite	ne
 80014ee:	2301      	movne	r3, #1
 80014f0:	2300      	moveq	r3, #0
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	e00b      	b.n	800150e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	43da      	mvns	r2, r3
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	4013      	ands	r3, r2
 8001502:	b29b      	uxth	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	bf14      	ite	ne
 8001508:	2301      	movne	r3, #1
 800150a:	2300      	moveq	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d016      	beq.n	8001540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2220      	movs	r2, #32
 800151c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	f043 0220 	orr.w	r2, r3, #32
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e021      	b.n	8001584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	0c1b      	lsrs	r3, r3, #16
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d10c      	bne.n	8001564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	43da      	mvns	r2, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	4013      	ands	r3, r2
 8001556:	b29b      	uxth	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	bf14      	ite	ne
 800155c:	2301      	movne	r3, #1
 800155e:	2300      	moveq	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	e00b      	b.n	800157c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	4013      	ands	r3, r2
 8001570:	b29b      	uxth	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	bf14      	ite	ne
 8001576:	2301      	movne	r3, #1
 8001578:	2300      	moveq	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	f47f af6d 	bne.w	800145c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001598:	e034      	b.n	8001604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f000 f886 	bl	80016ac <I2C_IsAcknowledgeFailed>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e034      	b.n	8001614 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b0:	d028      	beq.n	8001604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015b2:	f7ff f903 	bl	80007bc <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d302      	bcc.n	80015c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d11d      	bne.n	8001604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015d2:	2b80      	cmp	r3, #128	@ 0x80
 80015d4:	d016      	beq.n	8001604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2220      	movs	r2, #32
 80015e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f0:	f043 0220 	orr.w	r2, r3, #32
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e007      	b.n	8001614 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800160e:	2b80      	cmp	r3, #128	@ 0x80
 8001610:	d1c3      	bne.n	800159a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001628:	e034      	b.n	8001694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f000 f83e 	bl	80016ac <I2C_IsAcknowledgeFailed>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e034      	b.n	80016a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001640:	d028      	beq.n	8001694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001642:	f7ff f8bb 	bl	80007bc <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	429a      	cmp	r2, r3
 8001650:	d302      	bcc.n	8001658 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d11d      	bne.n	8001694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	2b04      	cmp	r3, #4
 8001664:	d016      	beq.n	8001694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2220      	movs	r2, #32
 8001670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	f043 0220 	orr.w	r2, r3, #32
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e007      	b.n	80016a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d1c3      	bne.n	800162a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016c2:	d11b      	bne.n	80016fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80016cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2220      	movs	r2, #32
 80016d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	f043 0204 	orr.w	r2, r3, #4
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e272      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8087 	beq.w	8001836 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001728:	4b92      	ldr	r3, [pc, #584]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b04      	cmp	r3, #4
 8001732:	d00c      	beq.n	800174e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001734:	4b8f      	ldr	r3, [pc, #572]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	d112      	bne.n	8001766 <HAL_RCC_OscConfig+0x5e>
 8001740:	4b8c      	ldr	r3, [pc, #560]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800174c:	d10b      	bne.n	8001766 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174e:	4b89      	ldr	r3, [pc, #548]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d06c      	beq.n	8001834 <HAL_RCC_OscConfig+0x12c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d168      	bne.n	8001834 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e24c      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800176e:	d106      	bne.n	800177e <HAL_RCC_OscConfig+0x76>
 8001770:	4b80      	ldr	r3, [pc, #512]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a7f      	ldr	r2, [pc, #508]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	e02e      	b.n	80017dc <HAL_RCC_OscConfig+0xd4>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x98>
 8001786:	4b7b      	ldr	r3, [pc, #492]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a7a      	ldr	r2, [pc, #488]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 800178c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b78      	ldr	r3, [pc, #480]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a77      	ldr	r2, [pc, #476]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001798:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e01d      	b.n	80017dc <HAL_RCC_OscConfig+0xd4>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0xbc>
 80017aa:	4b72      	ldr	r3, [pc, #456]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a71      	ldr	r2, [pc, #452]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b6f      	ldr	r3, [pc, #444]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a6e      	ldr	r2, [pc, #440]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e00b      	b.n	80017dc <HAL_RCC_OscConfig+0xd4>
 80017c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a6a      	ldr	r2, [pc, #424]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b68      	ldr	r3, [pc, #416]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a67      	ldr	r2, [pc, #412]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d013      	beq.n	800180c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7fe ffea 	bl	80007bc <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ec:	f7fe ffe6 	bl	80007bc <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	@ 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e200      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0xe4>
 800180a:	e014      	b.n	8001836 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7fe ffd6 	bl	80007bc <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001814:	f7fe ffd2 	bl	80007bc <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	@ 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e1ec      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001826:	4b53      	ldr	r3, [pc, #332]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x10c>
 8001832:	e000      	b.n	8001836 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d063      	beq.n	800190a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001842:	4b4c      	ldr	r3, [pc, #304]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00b      	beq.n	8001866 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800184e:	4b49      	ldr	r3, [pc, #292]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b08      	cmp	r3, #8
 8001858:	d11c      	bne.n	8001894 <HAL_RCC_OscConfig+0x18c>
 800185a:	4b46      	ldr	r3, [pc, #280]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d116      	bne.n	8001894 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001866:	4b43      	ldr	r3, [pc, #268]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <HAL_RCC_OscConfig+0x176>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d001      	beq.n	800187e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e1c0      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187e:	4b3d      	ldr	r3, [pc, #244]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4939      	ldr	r1, [pc, #228]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	e03a      	b.n	800190a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d020      	beq.n	80018de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189c:	4b36      	ldr	r3, [pc, #216]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7fe ff8b 	bl	80007bc <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018aa:	f7fe ff87 	bl	80007bc <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e1a1      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4927      	ldr	r1, [pc, #156]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
 80018dc:	e015      	b.n	800190a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018de:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7fe ff6a 	bl	80007bc <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ec:	f7fe ff66 	bl	80007bc <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e180      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d03a      	beq.n	800198c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d019      	beq.n	8001952 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191e:	4b17      	ldr	r3, [pc, #92]	@ (800197c <HAL_RCC_OscConfig+0x274>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7fe ff4a 	bl	80007bc <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192c:	f7fe ff46 	bl	80007bc <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e160      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193e:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800194a:	2001      	movs	r0, #1
 800194c:	f000 face 	bl	8001eec <RCC_Delay>
 8001950:	e01c      	b.n	800198c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001952:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <HAL_RCC_OscConfig+0x274>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001958:	f7fe ff30 	bl	80007bc <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195e:	e00f      	b.n	8001980 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001960:	f7fe ff2c 	bl	80007bc <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d908      	bls.n	8001980 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e146      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	42420000 	.word	0x42420000
 800197c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001980:	4b92      	ldr	r3, [pc, #584]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1e9      	bne.n	8001960 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 80a6 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199e:	4b8b      	ldr	r3, [pc, #556]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10d      	bne.n	80019c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	4b88      	ldr	r3, [pc, #544]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	4a87      	ldr	r2, [pc, #540]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b4:	61d3      	str	r3, [r2, #28]
 80019b6:	4b85      	ldr	r3, [pc, #532]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019c2:	2301      	movs	r3, #1
 80019c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c6:	4b82      	ldr	r3, [pc, #520]	@ (8001bd0 <HAL_RCC_OscConfig+0x4c8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d118      	bne.n	8001a04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019d2:	4b7f      	ldr	r3, [pc, #508]	@ (8001bd0 <HAL_RCC_OscConfig+0x4c8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a7e      	ldr	r2, [pc, #504]	@ (8001bd0 <HAL_RCC_OscConfig+0x4c8>)
 80019d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019de:	f7fe feed 	bl	80007bc <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e6:	f7fe fee9 	bl	80007bc <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b64      	cmp	r3, #100	@ 0x64
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e103      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	4b75      	ldr	r3, [pc, #468]	@ (8001bd0 <HAL_RCC_OscConfig+0x4c8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x312>
 8001a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4a6e      	ldr	r2, [pc, #440]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6213      	str	r3, [r2, #32]
 8001a18:	e02d      	b.n	8001a76 <HAL_RCC_OscConfig+0x36e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x334>
 8001a22:	4b6a      	ldr	r3, [pc, #424]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4a69      	ldr	r2, [pc, #420]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	6213      	str	r3, [r2, #32]
 8001a2e:	4b67      	ldr	r3, [pc, #412]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4a66      	ldr	r2, [pc, #408]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	f023 0304 	bic.w	r3, r3, #4
 8001a38:	6213      	str	r3, [r2, #32]
 8001a3a:	e01c      	b.n	8001a76 <HAL_RCC_OscConfig+0x36e>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	d10c      	bne.n	8001a5e <HAL_RCC_OscConfig+0x356>
 8001a44:	4b61      	ldr	r3, [pc, #388]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4a60      	ldr	r2, [pc, #384]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	6213      	str	r3, [r2, #32]
 8001a50:	4b5e      	ldr	r3, [pc, #376]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4a5d      	ldr	r2, [pc, #372]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6213      	str	r3, [r2, #32]
 8001a5c:	e00b      	b.n	8001a76 <HAL_RCC_OscConfig+0x36e>
 8001a5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a5a      	ldr	r2, [pc, #360]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6213      	str	r3, [r2, #32]
 8001a6a:	4b58      	ldr	r3, [pc, #352]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4a57      	ldr	r2, [pc, #348]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d015      	beq.n	8001aaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7e:	f7fe fe9d 	bl	80007bc <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a84:	e00a      	b.n	8001a9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a86:	f7fe fe99 	bl	80007bc <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e0b1      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9c:	4b4b      	ldr	r3, [pc, #300]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0ee      	beq.n	8001a86 <HAL_RCC_OscConfig+0x37e>
 8001aa8:	e014      	b.n	8001ad4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aaa:	f7fe fe87 	bl	80007bc <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab0:	e00a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab2:	f7fe fe83 	bl	80007bc <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e09b      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac8:	4b40      	ldr	r3, [pc, #256]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ee      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ad4:	7dfb      	ldrb	r3, [r7, #23]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d105      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ada:	4b3c      	ldr	r3, [pc, #240]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	4a3b      	ldr	r2, [pc, #236]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ae4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8087 	beq.w	8001bfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af0:	4b36      	ldr	r3, [pc, #216]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d061      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d146      	bne.n	8001b92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b04:	4b33      	ldr	r3, [pc, #204]	@ (8001bd4 <HAL_RCC_OscConfig+0x4cc>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7fe fe57 	bl	80007bc <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b12:	f7fe fe53 	bl	80007bc <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e06d      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b24:	4b29      	ldr	r3, [pc, #164]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f0      	bne.n	8001b12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b38:	d108      	bne.n	8001b4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b3a:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	4921      	ldr	r1, [pc, #132]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a19      	ldr	r1, [r3, #32]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	491b      	ldr	r1, [pc, #108]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b64:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <HAL_RCC_OscConfig+0x4cc>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7fe fe27 	bl	80007bc <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7fe fe23 	bl	80007bc <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e03d      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b84:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x46a>
 8001b90:	e035      	b.n	8001bfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <HAL_RCC_OscConfig+0x4cc>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7fe fe10 	bl	80007bc <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7fe fe0c 	bl	80007bc <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e026      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x498>
 8001bbe:	e01e      	b.n	8001bfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e019      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40007000 	.word	0x40007000
 8001bd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <HAL_RCC_OscConfig+0x500>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000

08001c0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0d0      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b6a      	ldr	r3, [pc, #424]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d910      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b67      	ldr	r3, [pc, #412]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 0207 	bic.w	r2, r3, #7
 8001c36:	4965      	ldr	r1, [pc, #404]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b63      	ldr	r3, [pc, #396]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0b8      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c68:	4b59      	ldr	r3, [pc, #356]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	4a58      	ldr	r2, [pc, #352]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c80:	4b53      	ldr	r3, [pc, #332]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	4a52      	ldr	r2, [pc, #328]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8c:	4b50      	ldr	r3, [pc, #320]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	494d      	ldr	r1, [pc, #308]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d040      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b47      	ldr	r3, [pc, #284]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d115      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e07f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cca:	4b41      	ldr	r3, [pc, #260]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e073      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cda:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e06b      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cea:	4b39      	ldr	r3, [pc, #228]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f023 0203 	bic.w	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4936      	ldr	r1, [pc, #216]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cfc:	f7fe fd5e 	bl	80007bc <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d04:	f7fe fd5a 	bl	80007bc <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e053      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 020c 	and.w	r2, r3, #12
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1eb      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b27      	ldr	r3, [pc, #156]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d210      	bcs.n	8001d5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b24      	ldr	r3, [pc, #144]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 0207 	bic.w	r2, r3, #7
 8001d42:	4922      	ldr	r1, [pc, #136]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b20      	ldr	r3, [pc, #128]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e032      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4916      	ldr	r1, [pc, #88]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d009      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d86:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	490e      	ldr	r1, [pc, #56]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d9a:	f000 f821 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	490a      	ldr	r1, [pc, #40]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dac:	5ccb      	ldrb	r3, [r1, r3]
 8001dae:	fa22 f303 	lsr.w	r3, r2, r3
 8001db2:	4a09      	ldr	r2, [pc, #36]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001db6:	4b09      	ldr	r3, [pc, #36]	@ (8001ddc <HAL_RCC_ClockConfig+0x1d0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fcbc 	bl	8000738 <HAL_InitTick>

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40022000 	.word	0x40022000
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	08002ffc 	.word	0x08002ffc
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	20000004 	.word	0x20000004

08001de0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d002      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0x30>
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_GetSysClockFreq+0x36>
 8001e0e:	e027      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e10:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e12:	613b      	str	r3, [r7, #16]
      break;
 8001e14:	e027      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	0c9b      	lsrs	r3, r3, #18
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	4a17      	ldr	r2, [pc, #92]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e20:	5cd3      	ldrb	r3, [r2, r3]
 8001e22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d010      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e2e:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	0c5b      	lsrs	r3, r3, #17
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	4a11      	ldr	r2, [pc, #68]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e3a:	5cd3      	ldrb	r3, [r2, r3]
 8001e3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e42:	fb03 f202 	mul.w	r2, r3, r2
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	e004      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a0c      	ldr	r2, [pc, #48]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e54:	fb02 f303 	mul.w	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	613b      	str	r3, [r7, #16]
      break;
 8001e5e:	e002      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e60:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e62:	613b      	str	r3, [r7, #16]
      break;
 8001e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e66:	693b      	ldr	r3, [r7, #16]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	007a1200 	.word	0x007a1200
 8001e7c:	08003014 	.word	0x08003014
 8001e80:	08003024 	.word	0x08003024
 8001e84:	003d0900 	.word	0x003d0900

08001e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e8c:	4b02      	ldr	r3, [pc, #8]	@ (8001e98 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	20000000 	.word	0x20000000

08001e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ea0:	f7ff fff2 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4903      	ldr	r1, [pc, #12]	@ (8001ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	0800300c 	.word	0x0800300c

08001ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ec8:	f7ff ffde 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	0adb      	lsrs	r3, r3, #11
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	4903      	ldr	r1, [pc, #12]	@ (8001ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	0800300c 	.word	0x0800300c

08001eec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <RCC_Delay+0x34>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <RCC_Delay+0x38>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	0a5b      	lsrs	r3, r3, #9
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f08:	bf00      	nop
  }
  while (Delay --);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1e5a      	subs	r2, r3, #1
 8001f0e:	60fa      	str	r2, [r7, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f9      	bne.n	8001f08 <RCC_Delay+0x1c>
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	20000000 	.word	0x20000000
 8001f24:	10624dd3 	.word	0x10624dd3

08001f28 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e093      	b.n	8002064 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d106      	bne.n	8001f56 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7fe fafd 	bl	8000550 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f6c:	f023 0307 	bic.w	r3, r3, #7
 8001f70:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	f000 f903 	bl	8002188 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001faa:	f023 0303 	bic.w	r3, r3, #3
 8001fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001fc8:	f023 030c 	bic.w	r3, r3, #12
 8001fcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001fd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	011a      	lsls	r2, r3, #4
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	031b      	lsls	r3, r3, #12
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002006:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	4313      	orrs	r3, r2
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800207c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002084:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800208c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002094:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d110      	bne.n	80020be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d102      	bne.n	80020a8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80020a2:	7b7b      	ldrb	r3, [r7, #13]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d001      	beq.n	80020ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e069      	b.n	8002180 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020bc:	e031      	b.n	8002122 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d110      	bne.n	80020e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80020c4:	7bbb      	ldrb	r3, [r7, #14]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d102      	bne.n	80020d0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80020ca:	7b3b      	ldrb	r3, [r7, #12]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d001      	beq.n	80020d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e055      	b.n	8002180 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020e4:	e01d      	b.n	8002122 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d108      	bne.n	80020fe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80020ec:	7bbb      	ldrb	r3, [r7, #14]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d105      	bne.n	80020fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80020f2:	7b7b      	ldrb	r3, [r7, #13]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d102      	bne.n	80020fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80020f8:	7b3b      	ldrb	r3, [r7, #12]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d001      	beq.n	8002102 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e03e      	b.n	8002180 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2202      	movs	r2, #2
 8002106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2202      	movs	r2, #2
 800210e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2202      	movs	r2, #2
 8002116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2202      	movs	r2, #2
 800211e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_TIM_Encoder_Start+0xc4>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	2b04      	cmp	r3, #4
 800212c:	d008      	beq.n	8002140 <HAL_TIM_Encoder_Start+0xd4>
 800212e:	e00f      	b.n	8002150 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2201      	movs	r2, #1
 8002136:	2100      	movs	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f000 f893 	bl	8002264 <TIM_CCxChannelCmd>
      break;
 800213e:	e016      	b.n	800216e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2201      	movs	r2, #1
 8002146:	2104      	movs	r1, #4
 8002148:	4618      	mov	r0, r3
 800214a:	f000 f88b 	bl	8002264 <TIM_CCxChannelCmd>
      break;
 800214e:	e00e      	b.n	800216e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2201      	movs	r2, #1
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f000 f883 	bl	8002264 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2201      	movs	r2, #1
 8002164:	2104      	movs	r1, #4
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f87c 	bl	8002264 <TIM_CCxChannelCmd>
      break;
 800216c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0201 	orr.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a2f      	ldr	r2, [pc, #188]	@ (8002258 <TIM_Base_SetConfig+0xd0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00b      	beq.n	80021b8 <TIM_Base_SetConfig+0x30>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a6:	d007      	beq.n	80021b8 <TIM_Base_SetConfig+0x30>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a2c      	ldr	r2, [pc, #176]	@ (800225c <TIM_Base_SetConfig+0xd4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d003      	beq.n	80021b8 <TIM_Base_SetConfig+0x30>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a2b      	ldr	r2, [pc, #172]	@ (8002260 <TIM_Base_SetConfig+0xd8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d108      	bne.n	80021ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a22      	ldr	r2, [pc, #136]	@ (8002258 <TIM_Base_SetConfig+0xd0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00b      	beq.n	80021ea <TIM_Base_SetConfig+0x62>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d8:	d007      	beq.n	80021ea <TIM_Base_SetConfig+0x62>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a1f      	ldr	r2, [pc, #124]	@ (800225c <TIM_Base_SetConfig+0xd4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d003      	beq.n	80021ea <TIM_Base_SetConfig+0x62>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002260 <TIM_Base_SetConfig+0xd8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d108      	bne.n	80021fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a0d      	ldr	r2, [pc, #52]	@ (8002258 <TIM_Base_SetConfig+0xd0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d103      	bne.n	8002230 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f023 0201 	bic.w	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	611a      	str	r2, [r3, #16]
  }
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	40012c00 	.word	0x40012c00
 800225c:	40000400 	.word	0x40000400
 8002260:	40000800 	.word	0x40000800

08002264 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002264:	b480      	push	{r7}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2201      	movs	r2, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a1a      	ldr	r2, [r3, #32]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	43db      	mvns	r3, r3
 8002286:	401a      	ands	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a1a      	ldr	r2, [r3, #32]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	431a      	orrs	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	621a      	str	r2, [r3, #32]
}
 80022a2:	bf00      	nop
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e046      	b.n	8002352 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a16      	ldr	r2, [pc, #88]	@ (800235c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00e      	beq.n	8002326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002310:	d009      	beq.n	8002326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a12      	ldr	r2, [pc, #72]	@ (8002360 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d004      	beq.n	8002326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a10      	ldr	r2, [pc, #64]	@ (8002364 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d10c      	bne.n	8002340 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800232c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	4313      	orrs	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	40012c00 	.word	0x40012c00
 8002360:	40000400 	.word	0x40000400
 8002364:	40000800 	.word	0x40000800

08002368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e042      	b.n	8002400 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7fe f91e 	bl	80005d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2224      	movs	r2, #36	@ 0x24
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f82b 	bl	8002408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695a      	ldr	r2, [r3, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002442:	f023 030c 	bic.w	r3, r3, #12
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	68b9      	ldr	r1, [r7, #8]
 800244c:	430b      	orrs	r3, r1
 800244e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a2c      	ldr	r2, [pc, #176]	@ (800251c <UART_SetConfig+0x114>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d103      	bne.n	8002478 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002470:	f7ff fd28 	bl	8001ec4 <HAL_RCC_GetPCLK2Freq>
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	e002      	b.n	800247e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002478:	f7ff fd10 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 800247c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	009a      	lsls	r2, r3, #2
 8002488:	441a      	add	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	fbb2 f3f3 	udiv	r3, r2, r3
 8002494:	4a22      	ldr	r2, [pc, #136]	@ (8002520 <UART_SetConfig+0x118>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	0119      	lsls	r1, r3, #4
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	009a      	lsls	r2, r3, #2
 80024a8:	441a      	add	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002520 <UART_SetConfig+0x118>)
 80024b6:	fba3 0302 	umull	r0, r3, r3, r2
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	2064      	movs	r0, #100	@ 0x64
 80024be:	fb00 f303 	mul.w	r3, r0, r3
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	3332      	adds	r3, #50	@ 0x32
 80024c8:	4a15      	ldr	r2, [pc, #84]	@ (8002520 <UART_SetConfig+0x118>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024d4:	4419      	add	r1, r3
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	009a      	lsls	r2, r3, #2
 80024e0:	441a      	add	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80024ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002520 <UART_SetConfig+0x118>)
 80024ee:	fba3 0302 	umull	r0, r3, r3, r2
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	2064      	movs	r0, #100	@ 0x64
 80024f6:	fb00 f303 	mul.w	r3, r0, r3
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	3332      	adds	r3, #50	@ 0x32
 8002500:	4a07      	ldr	r2, [pc, #28]	@ (8002520 <UART_SetConfig+0x118>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	f003 020f 	and.w	r2, r3, #15
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	440a      	add	r2, r1
 8002512:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40013800 	.word	0x40013800
 8002520:	51eb851f 	.word	0x51eb851f

08002524 <Opcion_Init>:

#define ALTO_LETRA_MEDIANA 18
#define LARGO_LETRA_MEDIANA 11

void Opcion_Init(void* Salida, char* Etiqueta, void* Dato)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
	Opcion_t *Output = (Opcion_t *) Salida;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	617b      	str	r3, [r7, #20]
	Output->Etiqueta = Etiqueta;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	601a      	str	r2, [r3, #0]
	Output->Valor = Dato;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	605a      	str	r2, [r3, #4]
}
 8002540:	bf00      	nop
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <Menu_init>:

void Menu_init(void* Salida, char* Etiqueta, Opcion_t* Opciones)
{
 800254a:	b480      	push	{r7}
 800254c:	b087      	sub	sp, #28
 800254e:	af00      	add	r7, sp, #0
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
	Menu_t *Output = (Menu_t*) Salida;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	617b      	str	r3, [r7, #20]
	Output->Etiqueta = Etiqueta;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	601a      	str	r2, [r3, #0]
	Output->Opciones = (Opcion_t *) Opciones;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	605a      	str	r2, [r3, #4]
	Output->Opciones->Seleccionado=1;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	721a      	strb	r2, [r3, #8]

}
 800256e:	bf00      	nop
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <Display_Menu_Init>:

void Display_Menu_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
	ssd1306_Init();
 800257c:	f000 fa30 	bl	80029e0 <ssd1306_Init>
}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}

08002584 <Display_Menu_Update>:


//display
void Display_Menu_Update(void* Menu_Data)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af02      	add	r7, sp, #8
 800258a:	6078      	str	r0, [r7, #4]
	Opcion_t* Display_Data = (Opcion_t*) Menu_Data;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	60bb      	str	r3, [r7, #8]
	ssd1306_Fill(Black);
 8002590:	2000      	movs	r0, #0
 8002592:	f000 fa8f 	bl	8002ab4 <ssd1306_Fill>
	for (uint16_t i=0 ;i < 3;i++) //En la pantalla entran hasta 3 elementos en este formato
 8002596:	2300      	movs	r3, #0
 8002598:	81fb      	strh	r3, [r7, #14]
 800259a:	e04c      	b.n	8002636 <Display_Menu_Update+0xb2>
	{
		ssd1306_SetCursor( 0, 18*i);
 800259c:	89fb      	ldrh	r3, [r7, #14]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	00d2      	lsls	r2, r2, #3
 80025a4:	4413      	add	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	4619      	mov	r1, r3
 80025ac:	2000      	movs	r0, #0
 80025ae:	f000 fbcb 	bl	8002d48 <ssd1306_SetCursor>
		ssd1306_DrawRectangle(0, 18, 11*strlen((Display_Data+i)->Etiqueta), 20,  (Display_Data+i)->Seleccionado);
 80025b2:	89fa      	ldrh	r2, [r7, #14]
 80025b4:	4613      	mov	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	461a      	mov	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	4413      	add	r3, r2
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd fdc1 	bl	800014c <strlen>
 80025ca:	4603      	mov	r3, r0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	0092      	lsls	r2, r2, #2
 80025d2:	441a      	add	r2, r3
 80025d4:	0052      	lsls	r2, r2, #1
 80025d6:	4413      	add	r3, r2
 80025d8:	b2d9      	uxtb	r1, r3
 80025da:	89fa      	ldrh	r2, [r7, #14]
 80025dc:	4613      	mov	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	461a      	mov	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	4413      	add	r3, r2
 80025ea:	7a1b      	ldrb	r3, [r3, #8]
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	2314      	movs	r3, #20
 80025f0:	460a      	mov	r2, r1
 80025f2:	2112      	movs	r1, #18
 80025f4:	2000      	movs	r0, #0
 80025f6:	f000 fc2b 	bl	8002e50 <ssd1306_DrawRectangle>
		ssd1306_WriteString((Display_Data+i)->Etiqueta, Font_11x18, !((Display_Data+i)->Seleccionado));
 80025fa:	89fa      	ldrh	r2, [r7, #14]
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	461a      	mov	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4413      	add	r3, r2
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	89fa      	ldrh	r2, [r7, #14]
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	461a      	mov	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4413      	add	r3, r2
 800261c:	7a1b      	ldrb	r3, [r3, #8]
 800261e:	f083 0301 	eor.w	r3, r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	4b13      	ldr	r3, [pc, #76]	@ (8002674 <Display_Menu_Update+0xf0>)
 8002628:	9200      	str	r2, [sp, #0]
 800262a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800262c:	f000 fb66 	bl	8002cfc <ssd1306_WriteString>
	for (uint16_t i=0 ;i < 3;i++) //En la pantalla entran hasta 3 elementos en este formato
 8002630:	89fb      	ldrh	r3, [r7, #14]
 8002632:	3301      	adds	r3, #1
 8002634:	81fb      	strh	r3, [r7, #14]
 8002636:	89fb      	ldrh	r3, [r7, #14]
 8002638:	2b02      	cmp	r3, #2
 800263a:	d9af      	bls.n	800259c <Display_Menu_Update+0x18>
	ssd1306_WriteString((Display_Data+1)->Etiqueta, Font_11x18, Black);

	ssd1306_SetCursor( 0, 18* 2);
	ssd1306_WriteString((Display_Data+2)->Etiqueta, Font_11x18, White);
*/
	ssd1306_SetCursor( 0, SSD1306_HEIGHT-8);
 800263c:	2138      	movs	r1, #56	@ 0x38
 800263e:	2000      	movs	r0, #0
 8002640:	f000 fb82 	bl	8002d48 <ssd1306_SetCursor>
	ssd1306_WriteString("Salir", Font_6x8, White);
 8002644:	4b0c      	ldr	r3, [pc, #48]	@ (8002678 <Display_Menu_Update+0xf4>)
 8002646:	2201      	movs	r2, #1
 8002648:	9200      	str	r2, [sp, #0]
 800264a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800264c:	480b      	ldr	r0, [pc, #44]	@ (800267c <Display_Menu_Update+0xf8>)
 800264e:	f000 fb55 	bl	8002cfc <ssd1306_WriteString>
	ssd1306_SetCursor( SSD1306_WIDTH-6*7, SSD1306_HEIGHT-8);
 8002652:	2138      	movs	r1, #56	@ 0x38
 8002654:	2056      	movs	r0, #86	@ 0x56
 8002656:	f000 fb77 	bl	8002d48 <ssd1306_SetCursor>
	ssd1306_WriteString("Guardar", Font_6x8, White);
 800265a:	4b07      	ldr	r3, [pc, #28]	@ (8002678 <Display_Menu_Update+0xf4>)
 800265c:	2201      	movs	r2, #1
 800265e:	9200      	str	r2, [sp, #0]
 8002660:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002662:	4807      	ldr	r0, [pc, #28]	@ (8002680 <Display_Menu_Update+0xfc>)
 8002664:	f000 fb4a 	bl	8002cfc <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8002668:	f000 fa3c 	bl	8002ae4 <ssd1306_UpdateScreen>
}
 800266c:	bf00      	nop
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	08004380 	.word	0x08004380
 8002678:	08004374 	.word	0x08004374
 800267c:	08002f90 	.word	0x08002f90
 8002680:	08002f98 	.word	0x08002f98

08002684 <Leer_Encoder_Init>:
# define CICLOS_DE_ESPERA 5



void Leer_Encoder_Init(void *param, void *timer)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]

Encoder_t *Encoder = (Encoder_t *) param;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	60fb      	str	r3, [r7, #12]

Encoder->Timer= (TIM_HandleTypeDef *) timer;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	601a      	str	r2, [r3, #0]
Encoder->Posicion=0;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	809a      	strh	r2, [r3, #4]
Encoder->Tick = 0;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	811a      	strh	r2, [r3, #8]

HAL_TIM_Encoder_Start(Encoder->Timer, TIM_CHANNEL_ALL);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	213c      	movs	r1, #60	@ 0x3c
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fcde 	bl	800206c <HAL_TIM_Encoder_Start>

Encoder->Ultimo_Valor = __HAL_TIM_GET_COUNTER(Encoder->Timer);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	60da      	str	r2, [r3, #12]

}
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <Leer_Encoder_Update>:

//uint32_t Cuenta_Encoder = 0;


void Leer_Encoder_Update(void *param)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	// Cuenta_Encoder = (__HAL_TIM_GET_COUNTER(Encoder.Timer)/VALOR_DE_UN_PASO)%PASOS_ENCODER;

	// Se carga el puntero a estructura
	Encoder_t *Encoder = (Encoder_t *) param;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	617b      	str	r3, [r7, #20]

	// Se guardan valores pertimentes
	uint32_t Cuenta_Cruda = __HAL_TIM_GET_COUNTER(Encoder->Timer);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	613b      	str	r3, [r7, #16]
	uint16_t estado = Encoder->Estado;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	88db      	ldrh	r3, [r3, #6]
 80026de:	81fb      	strh	r3, [r7, #14]

	switch (estado)
 80026e0:	89fb      	ldrh	r3, [r7, #14]
 80026e2:	2b14      	cmp	r3, #20
 80026e4:	f200 80d0 	bhi.w	8002888 <Leer_Encoder_Update+0x1c4>
 80026e8:	a201      	add	r2, pc, #4	@ (adr r2, 80026f0 <Leer_Encoder_Update+0x2c>)
 80026ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ee:	bf00      	nop
 80026f0:	080027a5 	.word	0x080027a5
 80026f4:	08002745 	.word	0x08002745
 80026f8:	0800284b 	.word	0x0800284b
 80026fc:	08002889 	.word	0x08002889
 8002700:	08002889 	.word	0x08002889
 8002704:	08002889 	.word	0x08002889
 8002708:	08002889 	.word	0x08002889
 800270c:	08002889 	.word	0x08002889
 8002710:	08002889 	.word	0x08002889
 8002714:	08002889 	.word	0x08002889
 8002718:	08002889 	.word	0x08002889
 800271c:	08002889 	.word	0x08002889
 8002720:	08002889 	.word	0x08002889
 8002724:	08002889 	.word	0x08002889
 8002728:	08002889 	.word	0x08002889
 800272c:	08002889 	.word	0x08002889
 8002730:	08002889 	.word	0x08002889
 8002734:	08002889 	.word	0x08002889
 8002738:	08002889 	.word	0x08002889
 800273c:	08002889 	.word	0x08002889
 8002740:	080027f7 	.word	0x080027f7
	{
	case VALOR_ENCODER_MEDIO :
		if (Cuenta_Cruda >= Encoder->Ultimo_Valor + VALOR_DE_UN_PASO)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	3302      	adds	r3, #2
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	429a      	cmp	r2, r3
 800274e:	d30f      	bcc.n	8002770 <Leer_Encoder_Update+0xac>
		{
			Encoder->Posicion++;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	889b      	ldrh	r3, [r3, #4]
 8002754:	3301      	adds	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	809a      	strh	r2, [r3, #4]
			Encoder->Ultimo_Valor = Cuenta_Cruda;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	60da      	str	r2, [r3, #12]
			Encoder->Estado = ENCODER_EN_ESPERA;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2202      	movs	r2, #2
 8002766:	80da      	strh	r2, [r3, #6]
			Encoder->Tick = 0;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2200      	movs	r2, #0
 800276c:	811a      	strh	r2, [r3, #8]
			break;
 800276e:	e08b      	b.n	8002888 <Leer_Encoder_Update+0x1c4>
		}
		else if (Cuenta_Cruda <= Encoder->Ultimo_Valor - VALOR_DE_UN_PASO)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	3b02      	subs	r3, #2
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	429a      	cmp	r2, r3
 800277a:	d80f      	bhi.n	800279c <Leer_Encoder_Update+0xd8>
		{
			Encoder->Posicion--;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	889b      	ldrh	r3, [r3, #4]
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	809a      	strh	r2, [r3, #4]
			Encoder->Ultimo_Valor = Cuenta_Cruda;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	60da      	str	r2, [r3, #12]
			Encoder->Estado = (uint16_t) ENCODER_EN_ESPERA;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2202      	movs	r2, #2
 8002792:	80da      	strh	r2, [r3, #6]
			Encoder->Tick = 0;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2200      	movs	r2, #0
 8002798:	811a      	strh	r2, [r3, #8]
			break;
 800279a:	e075      	b.n	8002888 <Leer_Encoder_Update+0x1c4>
		}
		else
		{
			Encoder->Ultimo_Valor = Cuenta_Cruda;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	60da      	str	r2, [r3, #12]
			break;
 80027a2:	e071      	b.n	8002888 <Leer_Encoder_Update+0x1c4>
		}

//-HASTA ACA LLEGUE--------------------------------------------
	case VALOR_ENCODER_CERO :
			if (Cuenta_Cruda >= Encoder->Ultimo_Valor + VALOR_DE_UN_PASO)
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	3302      	adds	r3, #2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d30f      	bcc.n	80027d0 <Leer_Encoder_Update+0x10c>
			{
				Encoder->Posicion++;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	889b      	ldrh	r3, [r3, #4]
 80027b4:	3301      	adds	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	809a      	strh	r2, [r3, #4]
				Encoder->Ultimo_Valor = Cuenta_Cruda;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	60da      	str	r2, [r3, #12]
				Encoder->Estado = (uint16_t) ENCODER_EN_ESPERA;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2202      	movs	r2, #2
 80027c6:	80da      	strh	r2, [r3, #6]
				Encoder->Tick = 0;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2200      	movs	r2, #0
 80027cc:	811a      	strh	r2, [r3, #8]
				break;
 80027ce:	e05b      	b.n	8002888 <Leer_Encoder_Update+0x1c4>
			}
			else if (Cuenta_Cruda <= Encoder->Ultimo_Valor - VALOR_DE_UN_PASO)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	3b02      	subs	r3, #2
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d80c      	bhi.n	80027f6 <Leer_Encoder_Update+0x132>
			{
				Encoder->Posicion = VALOR_ENCODER_FINAL	-1;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2213      	movs	r2, #19
 80027e0:	809a      	strh	r2, [r3, #4]
				Encoder->Ultimo_Valor = Cuenta_Cruda;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	60da      	str	r2, [r3, #12]
				Encoder->Estado = (uint16_t) ENCODER_EN_ESPERA;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2202      	movs	r2, #2
 80027ec:	80da      	strh	r2, [r3, #6]
				Encoder->Tick = 0;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2200      	movs	r2, #0
 80027f2:	811a      	strh	r2, [r3, #8]
				break;
 80027f4:	e048      	b.n	8002888 <Leer_Encoder_Update+0x1c4>
			}
	case VALOR_ENCODER_FINAL :
			if (Cuenta_Cruda >= Encoder->Ultimo_Valor + VALOR_DE_UN_PASO)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	3302      	adds	r3, #2
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d30c      	bcc.n	800281c <Leer_Encoder_Update+0x158>
			{
				Encoder->Posicion = VALOR_ENCODER_CERO;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2200      	movs	r2, #0
 8002806:	809a      	strh	r2, [r3, #4]
				Encoder->Ultimo_Valor = Cuenta_Cruda;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	60da      	str	r2, [r3, #12]
				Encoder->Estado = ENCODER_EN_ESPERA;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2202      	movs	r2, #2
 8002812:	80da      	strh	r2, [r3, #6]
				Encoder->Tick = 0;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2200      	movs	r2, #0
 8002818:	811a      	strh	r2, [r3, #8]
				break;
 800281a:	e035      	b.n	8002888 <Leer_Encoder_Update+0x1c4>
			}
			else if (Cuenta_Cruda <= Encoder->Ultimo_Valor - VALOR_DE_UN_PASO)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	3b02      	subs	r3, #2
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	429a      	cmp	r2, r3
 8002826:	d80c      	bhi.n	8002842 <Leer_Encoder_Update+0x17e>
			{
				Encoder->Posicion = 19;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2213      	movs	r2, #19
 800282c:	809a      	strh	r2, [r3, #4]
				Encoder->Ultimo_Valor = Cuenta_Cruda;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	60da      	str	r2, [r3, #12]
				Encoder->Estado = ENCODER_EN_ESPERA;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2202      	movs	r2, #2
 8002838:	80da      	strh	r2, [r3, #6]
				Encoder->Tick = 0;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2200      	movs	r2, #0
 800283e:	811a      	strh	r2, [r3, #8]
				break;
 8002840:	e022      	b.n	8002888 <Leer_Encoder_Update+0x1c4>
			}
			else
			{
				Encoder->Ultimo_Valor = Cuenta_Cruda;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	60da      	str	r2, [r3, #12]
				break;
 8002848:	e01e      	b.n	8002888 <Leer_Encoder_Update+0x1c4>
			}
	case ENCODER_EN_ESPERA:
		if (Encoder->Tick < CICLOS_DE_ESPERA)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	891b      	ldrh	r3, [r3, #8]
 800284e:	2b04      	cmp	r3, #4
 8002850:	d806      	bhi.n	8002860 <Leer_Encoder_Update+0x19c>
		{
			Encoder->Tick++;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	891b      	ldrh	r3, [r3, #8]
 8002856:	3301      	adds	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	811a      	strh	r2, [r3, #8]
			break;
		}
	}

	//Cuenta_Encoder = (__HAL_TIM_GET_COUNTER(&htim1)/VALOR_DE_UN_PASO)%PASOS_ENCODER;
}
 800285e:	e013      	b.n	8002888 <Leer_Encoder_Update+0x1c4>
		else if(VALOR_ENCODER_CERO < Encoder->Posicion && Encoder->Posicion < VALOR_ENCODER_FINAL)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	889b      	ldrh	r3, [r3, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <Leer_Encoder_Update+0x1ba>
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	889b      	ldrh	r3, [r3, #4]
 800286c:	2b13      	cmp	r3, #19
 800286e:	d806      	bhi.n	800287e <Leer_Encoder_Update+0x1ba>
			Encoder->Estado = (uint16_t) VALOR_ENCODER_MEDIO;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2201      	movs	r2, #1
 8002874:	80da      	strh	r2, [r3, #6]
			Encoder->Ultimo_Valor = Cuenta_Cruda;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	60da      	str	r2, [r3, #12]
			break;
 800287c:	e004      	b.n	8002888 <Leer_Encoder_Update+0x1c4>
			Encoder->Estado = Encoder->Posicion;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	889a      	ldrh	r2, [r3, #4]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	80da      	strh	r2, [r3, #6]
			break;
 8002886:	bf00      	nop
}
 8002888:	bf00      	nop
 800288a:	371c      	adds	r7, #28
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop

08002894 <app_init>:

Menu_t Menu_De_Prueba;
// Funciones de la aplicación

void app_init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
	/*Opciones_De_Prueba[0].Etiqueta=*Etiqueta_De_Prueba;
	Opciones_De_Prueba[1].Etiqueta=*(Etiqueta_De_Prueba)+ 2*sizeof(*Etiqueta_De_Prueba);
	Opciones_De_Prueba[2].Etiqueta=*(Etiqueta_De_Prueba)+ 2*2*sizeof(*Etiqueta_De_Prueba);*/

	Leer_Encoder_Init(&Encoder, &htim1);
 800289a:	491a      	ldr	r1, [pc, #104]	@ (8002904 <app_init+0x70>)
 800289c:	481a      	ldr	r0, [pc, #104]	@ (8002908 <app_init+0x74>)
 800289e:	f7ff fef1 	bl	8002684 <Leer_Encoder_Init>
	Display_Menu_Init();
 80028a2:	f7ff fe69 	bl	8002578 <Display_Menu_Init>
	for (int i = 0; i < sizeof(Opciones_Menu_Ppal)/sizeof(Opcion_t)-1; i++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]
 80028aa:	e015      	b.n	80028d8 <app_init+0x44>
		{
			Opcion_Init(Opciones_Menu_Ppal+i, Etiquetas_Menu_Ppal[i], &(Default_Data[i]));
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	461a      	mov	r2, r3
 80028b8:	4b14      	ldr	r3, [pc, #80]	@ (800290c <app_init+0x78>)
 80028ba:	18d0      	adds	r0, r2, r3
 80028bc:	4a14      	ldr	r2, [pc, #80]	@ (8002910 <app_init+0x7c>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4a12      	ldr	r2, [pc, #72]	@ (8002914 <app_init+0x80>)
 80028ca:	4413      	add	r3, r2
 80028cc:	461a      	mov	r2, r3
 80028ce:	f7ff fe29 	bl	8002524 <Opcion_Init>
	for (int i = 0; i < sizeof(Opciones_Menu_Ppal)/sizeof(Opcion_t)-1; i++)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3301      	adds	r3, #1
 80028d6:	607b      	str	r3, [r7, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d9e6      	bls.n	80028ac <app_init+0x18>
		}
	Opcion_Init(Opciones_Menu_Ppal+3, Etiquetas_Menu_Ppal[3], &Menu_Ajustes);
 80028de:	480e      	ldr	r0, [pc, #56]	@ (8002918 <app_init+0x84>)
 80028e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <app_init+0x7c>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4a0d      	ldr	r2, [pc, #52]	@ (800291c <app_init+0x88>)
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7ff fe1c 	bl	8002524 <Opcion_Init>
	Menu_init(&Menu_Ppal, Etiqueta_De_Menu, Opciones_Menu_Ppal);
 80028ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <app_init+0x8c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a06      	ldr	r2, [pc, #24]	@ (800290c <app_init+0x78>)
 80028f2:	4619      	mov	r1, r3
 80028f4:	480b      	ldr	r0, [pc, #44]	@ (8002924 <app_init+0x90>)
 80028f6:	f7ff fe28 	bl	800254a <Menu_init>
	// INICIALIZA ENCODER
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000098 	.word	0x20000098
 8002908:	2000012c 	.word	0x2000012c
 800290c:	2000013c 	.word	0x2000013c
 8002910:	20000014 	.word	0x20000014
 8002914:	2000000c 	.word	0x2000000c
 8002918:	20000160 	.word	0x20000160
 800291c:	20000174 	.word	0x20000174
 8002920:	20000024 	.word	0x20000024
 8002924:	2000016c 	.word	0x2000016c

08002928 <app_update>:

void app_update(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
	//sprintf();
	Leer_Encoder_Update(&Encoder);
 800292c:	480e      	ldr	r0, [pc, #56]	@ (8002968 <app_update+0x40>)
 800292e:	f7ff fec9 	bl	80026c4 <Leer_Encoder_Update>
	Display_Menu_Update(Menu_Ppal.Opciones);
 8002932:	4b0e      	ldr	r3, [pc, #56]	@ (800296c <app_update+0x44>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fe24 	bl	8002584 <Display_Menu_Update>
	HAL_Delay(2000);
 800293c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002940:	f7fd ff46 	bl	80007d0 <HAL_Delay>
	Display_Menu_Update( ( Menu_Ppal.Opciones) +1);
 8002944:	4b09      	ldr	r3, [pc, #36]	@ (800296c <app_update+0x44>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	330c      	adds	r3, #12
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fe1a 	bl	8002584 <Display_Menu_Update>
	HAL_Delay(2000);
 8002950:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002954:	f7fd ff3c 	bl	80007d0 <HAL_Delay>
	Display_Menu_Update( ( Menu_Ppal.Opciones) );
 8002958:	4b04      	ldr	r3, [pc, #16]	@ (800296c <app_update+0x44>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff fe11 	bl	8002584 <Display_Menu_Update>



}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	2000012c 	.word	0x2000012c
 800296c:	2000016c 	.word	0x2000016c

08002970 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af04      	add	r7, sp, #16
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002986:	f04f 33ff 	mov.w	r3, #4294967295
 800298a:	9302      	str	r3, [sp, #8]
 800298c:	2301      	movs	r3, #1
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	1dfb      	adds	r3, r7, #7
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	2301      	movs	r3, #1
 8002996:	2200      	movs	r2, #0
 8002998:	2178      	movs	r1, #120	@ 0x78
 800299a:	4803      	ldr	r0, [pc, #12]	@ (80029a8 <ssd1306_WriteCommand+0x2c>)
 800299c:	f7fe fb4c 	bl	8001038 <HAL_I2C_Mem_Write>
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20000044 	.word	0x20000044

080029ac <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af04      	add	r7, sp, #16
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	f04f 32ff 	mov.w	r2, #4294967295
 80029be:	9202      	str	r2, [sp, #8]
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	2301      	movs	r3, #1
 80029c8:	2240      	movs	r2, #64	@ 0x40
 80029ca:	2178      	movs	r1, #120	@ 0x78
 80029cc:	4803      	ldr	r0, [pc, #12]	@ (80029dc <ssd1306_WriteData+0x30>)
 80029ce:	f7fe fb33 	bl	8001038 <HAL_I2C_Mem_Write>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000044 	.word	0x20000044

080029e0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80029e4:	f7ff ffc4 	bl	8002970 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80029e8:	2064      	movs	r0, #100	@ 0x64
 80029ea:	f7fd fef1 	bl	80007d0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80029ee:	2000      	movs	r0, #0
 80029f0:	f000 fa78 	bl	8002ee4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80029f4:	2020      	movs	r0, #32
 80029f6:	f7ff ffc1 	bl	800297c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80029fa:	2000      	movs	r0, #0
 80029fc:	f7ff ffbe 	bl	800297c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002a00:	20b0      	movs	r0, #176	@ 0xb0
 8002a02:	f7ff ffbb 	bl	800297c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002a06:	20c8      	movs	r0, #200	@ 0xc8
 8002a08:	f7ff ffb8 	bl	800297c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7ff ffb5 	bl	800297c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002a12:	2010      	movs	r0, #16
 8002a14:	f7ff ffb2 	bl	800297c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002a18:	2040      	movs	r0, #64	@ 0x40
 8002a1a:	f7ff ffaf 	bl	800297c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002a1e:	20ff      	movs	r0, #255	@ 0xff
 8002a20:	f000 fa4d 	bl	8002ebe <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002a24:	20a1      	movs	r0, #161	@ 0xa1
 8002a26:	f7ff ffa9 	bl	800297c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002a2a:	20a6      	movs	r0, #166	@ 0xa6
 8002a2c:	f7ff ffa6 	bl	800297c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002a30:	20a8      	movs	r0, #168	@ 0xa8
 8002a32:	f7ff ffa3 	bl	800297c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002a36:	203f      	movs	r0, #63	@ 0x3f
 8002a38:	f7ff ffa0 	bl	800297c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002a3c:	20a4      	movs	r0, #164	@ 0xa4
 8002a3e:	f7ff ff9d 	bl	800297c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002a42:	20d3      	movs	r0, #211	@ 0xd3
 8002a44:	f7ff ff9a 	bl	800297c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7ff ff97 	bl	800297c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002a4e:	20d5      	movs	r0, #213	@ 0xd5
 8002a50:	f7ff ff94 	bl	800297c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002a54:	20f0      	movs	r0, #240	@ 0xf0
 8002a56:	f7ff ff91 	bl	800297c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002a5a:	20d9      	movs	r0, #217	@ 0xd9
 8002a5c:	f7ff ff8e 	bl	800297c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002a60:	2022      	movs	r0, #34	@ 0x22
 8002a62:	f7ff ff8b 	bl	800297c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002a66:	20da      	movs	r0, #218	@ 0xda
 8002a68:	f7ff ff88 	bl	800297c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002a6c:	2012      	movs	r0, #18
 8002a6e:	f7ff ff85 	bl	800297c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002a72:	20db      	movs	r0, #219	@ 0xdb
 8002a74:	f7ff ff82 	bl	800297c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002a78:	2020      	movs	r0, #32
 8002a7a:	f7ff ff7f 	bl	800297c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002a7e:	208d      	movs	r0, #141	@ 0x8d
 8002a80:	f7ff ff7c 	bl	800297c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002a84:	2014      	movs	r0, #20
 8002a86:	f7ff ff79 	bl	800297c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f000 fa2a 	bl	8002ee4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f000 f80f 	bl	8002ab4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002a96:	f000 f825 	bl	8002ae4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002a9a:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <ssd1306_Init+0xd0>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	@ (8002ab0 <ssd1306_Init+0xd0>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002aa6:	4b02      	ldr	r3, [pc, #8]	@ (8002ab0 <ssd1306_Init+0xd0>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	711a      	strb	r2, [r3, #4]
}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	2000057c 	.word	0x2000057c

08002ab4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <ssd1306_Fill+0x14>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	e000      	b.n	8002aca <ssd1306_Fill+0x16>
 8002ac8:	23ff      	movs	r3, #255	@ 0xff
 8002aca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4803      	ldr	r0, [pc, #12]	@ (8002ae0 <ssd1306_Fill+0x2c>)
 8002ad2:	f000 fa25 	bl	8002f20 <memset>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	2000017c 	.word	0x2000017c

08002ae4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002aea:	2300      	movs	r3, #0
 8002aec:	71fb      	strb	r3, [r7, #7]
 8002aee:	e016      	b.n	8002b1e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	3b50      	subs	r3, #80	@ 0x50
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff ff40 	bl	800297c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002afc:	2000      	movs	r0, #0
 8002afe:	f7ff ff3d 	bl	800297c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002b02:	2010      	movs	r0, #16
 8002b04:	f7ff ff3a 	bl	800297c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	01db      	lsls	r3, r3, #7
 8002b0c:	4a08      	ldr	r2, [pc, #32]	@ (8002b30 <ssd1306_UpdateScreen+0x4c>)
 8002b0e:	4413      	add	r3, r2
 8002b10:	2180      	movs	r1, #128	@ 0x80
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff ff4a 	bl	80029ac <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	71fb      	strb	r3, [r7, #7]
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	2b07      	cmp	r3, #7
 8002b22:	d9e5      	bls.n	8002af0 <ssd1306_UpdateScreen+0xc>
    }
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	2000017c 	.word	0x2000017c

08002b34 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	71fb      	strb	r3, [r7, #7]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	71bb      	strb	r3, [r7, #6]
 8002b42:	4613      	mov	r3, r2
 8002b44:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	db3d      	blt.n	8002bca <ssd1306_DrawPixel+0x96>
 8002b4e:	79bb      	ldrb	r3, [r7, #6]
 8002b50:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b52:	d83a      	bhi.n	8002bca <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002b54:	797b      	ldrb	r3, [r7, #5]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d11a      	bne.n	8002b90 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002b5a:	79fa      	ldrb	r2, [r7, #7]
 8002b5c:	79bb      	ldrb	r3, [r7, #6]
 8002b5e:	08db      	lsrs	r3, r3, #3
 8002b60:	b2d8      	uxtb	r0, r3
 8002b62:	4603      	mov	r3, r0
 8002b64:	01db      	lsls	r3, r3, #7
 8002b66:	4413      	add	r3, r2
 8002b68:	4a1a      	ldr	r2, [pc, #104]	@ (8002bd4 <ssd1306_DrawPixel+0xa0>)
 8002b6a:	5cd3      	ldrb	r3, [r2, r3]
 8002b6c:	b25a      	sxtb	r2, r3
 8002b6e:	79bb      	ldrb	r3, [r7, #6]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	2101      	movs	r1, #1
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	b25b      	sxtb	r3, r3
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	b259      	sxtb	r1, r3
 8002b80:	79fa      	ldrb	r2, [r7, #7]
 8002b82:	4603      	mov	r3, r0
 8002b84:	01db      	lsls	r3, r3, #7
 8002b86:	4413      	add	r3, r2
 8002b88:	b2c9      	uxtb	r1, r1
 8002b8a:	4a12      	ldr	r2, [pc, #72]	@ (8002bd4 <ssd1306_DrawPixel+0xa0>)
 8002b8c:	54d1      	strb	r1, [r2, r3]
 8002b8e:	e01d      	b.n	8002bcc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002b90:	79fa      	ldrb	r2, [r7, #7]
 8002b92:	79bb      	ldrb	r3, [r7, #6]
 8002b94:	08db      	lsrs	r3, r3, #3
 8002b96:	b2d8      	uxtb	r0, r3
 8002b98:	4603      	mov	r3, r0
 8002b9a:	01db      	lsls	r3, r3, #7
 8002b9c:	4413      	add	r3, r2
 8002b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd4 <ssd1306_DrawPixel+0xa0>)
 8002ba0:	5cd3      	ldrb	r3, [r2, r3]
 8002ba2:	b25a      	sxtb	r2, r3
 8002ba4:	79bb      	ldrb	r3, [r7, #6]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	2101      	movs	r1, #1
 8002bac:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	b259      	sxtb	r1, r3
 8002bba:	79fa      	ldrb	r2, [r7, #7]
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	01db      	lsls	r3, r3, #7
 8002bc0:	4413      	add	r3, r2
 8002bc2:	b2c9      	uxtb	r1, r1
 8002bc4:	4a03      	ldr	r2, [pc, #12]	@ (8002bd4 <ssd1306_DrawPixel+0xa0>)
 8002bc6:	54d1      	strb	r1, [r2, r3]
 8002bc8:	e000      	b.n	8002bcc <ssd1306_DrawPixel+0x98>
        return;
 8002bca:	bf00      	nop
    }
}
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr
 8002bd4:	2000017c 	.word	0x2000017c

08002bd8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b089      	sub	sp, #36	@ 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4604      	mov	r4, r0
 8002be0:	4638      	mov	r0, r7
 8002be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002be6:	4623      	mov	r3, r4
 8002be8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	2b1f      	cmp	r3, #31
 8002bee:	d902      	bls.n	8002bf6 <ssd1306_WriteChar+0x1e>
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b7e      	cmp	r3, #126	@ 0x7e
 8002bf4:	d901      	bls.n	8002bfa <ssd1306_WriteChar+0x22>
        return 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e079      	b.n	8002cee <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <ssd1306_WriteChar+0x34>
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	3b20      	subs	r3, #32
 8002c06:	4413      	add	r3, r2
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	e000      	b.n	8002c0e <ssd1306_WriteChar+0x36>
 8002c0c:	783b      	ldrb	r3, [r7, #0]
 8002c0e:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002c10:	4b39      	ldr	r3, [pc, #228]	@ (8002cf8 <ssd1306_WriteChar+0x120>)
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
 8002c18:	4413      	add	r3, r2
 8002c1a:	2b80      	cmp	r3, #128	@ 0x80
 8002c1c:	dc06      	bgt.n	8002c2c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002c1e:	4b36      	ldr	r3, [pc, #216]	@ (8002cf8 <ssd1306_WriteChar+0x120>)
 8002c20:	885b      	ldrh	r3, [r3, #2]
 8002c22:	461a      	mov	r2, r3
 8002c24:	787b      	ldrb	r3, [r7, #1]
 8002c26:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002c28:	2b40      	cmp	r3, #64	@ 0x40
 8002c2a:	dd01      	ble.n	8002c30 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e05e      	b.n	8002cee <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	e04d      	b.n	8002cd2 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	3b20      	subs	r3, #32
 8002c3c:	7879      	ldrb	r1, [r7, #1]
 8002c3e:	fb01 f303 	mul.w	r3, r1, r3
 8002c42:	4619      	mov	r1, r3
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	440b      	add	r3, r1
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	e036      	b.n	8002cc4 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d013      	beq.n	8002c8e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002c66:	4b24      	ldr	r3, [pc, #144]	@ (8002cf8 <ssd1306_WriteChar+0x120>)
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	b2d8      	uxtb	r0, r3
 8002c74:	4b20      	ldr	r3, [pc, #128]	@ (8002cf8 <ssd1306_WriteChar+0x120>)
 8002c76:	885b      	ldrh	r3, [r3, #2]
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002c86:	4619      	mov	r1, r3
 8002c88:	f7ff ff54 	bl	8002b34 <ssd1306_DrawPixel>
 8002c8c:	e017      	b.n	8002cbe <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf8 <ssd1306_WriteChar+0x120>)
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	b2d8      	uxtb	r0, r3
 8002c9c:	4b16      	ldr	r3, [pc, #88]	@ (8002cf8 <ssd1306_WriteChar+0x120>)
 8002c9e:	885b      	ldrh	r3, [r3, #2]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	b2d9      	uxtb	r1, r3
 8002caa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf0c      	ite	eq
 8002cb2:	2301      	moveq	r3, #1
 8002cb4:	2300      	movne	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f7ff ff3b 	bl	8002b34 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	61bb      	str	r3, [r7, #24]
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d3c4      	bcc.n	8002c56 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	787b      	ldrb	r3, [r7, #1]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d3ac      	bcc.n	8002c36 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <ssd1306_WriteChar+0x120>)
 8002cde:	881a      	ldrh	r2, [r3, #0]
 8002ce0:	7dfb      	ldrb	r3, [r7, #23]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	4b03      	ldr	r3, [pc, #12]	@ (8002cf8 <ssd1306_WriteChar+0x120>)
 8002cea:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3724      	adds	r7, #36	@ 0x24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd90      	pop	{r4, r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	2000057c 	.word	0x2000057c

08002cfc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	4638      	mov	r0, r7
 8002d06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002d0a:	e013      	b.n	8002d34 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	7818      	ldrb	r0, [r3, #0]
 8002d10:	7e3b      	ldrb	r3, [r7, #24]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	463b      	mov	r3, r7
 8002d16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d18:	f7ff ff5e 	bl	8002bd8 <ssd1306_WriteChar>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d002      	beq.n	8002d2e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	e008      	b.n	8002d40 <ssd1306_WriteString+0x44>
        }
        str++;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3301      	adds	r3, #1
 8002d32:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e7      	bne.n	8002d0c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	460a      	mov	r2, r1
 8002d52:	71fb      	strb	r3, [r7, #7]
 8002d54:	4613      	mov	r3, r2
 8002d56:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <ssd1306_SetCursor+0x2c>)
 8002d5e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002d60:	79bb      	ldrb	r3, [r7, #6]
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	4b03      	ldr	r3, [pc, #12]	@ (8002d74 <ssd1306_SetCursor+0x2c>)
 8002d66:	805a      	strh	r2, [r3, #2]
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	2000057c 	.word	0x2000057c

08002d78 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b089      	sub	sp, #36	@ 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4604      	mov	r4, r0
 8002d80:	4608      	mov	r0, r1
 8002d82:	4611      	mov	r1, r2
 8002d84:	461a      	mov	r2, r3
 8002d86:	4623      	mov	r3, r4
 8002d88:	71fb      	strb	r3, [r7, #7]
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71bb      	strb	r3, [r7, #6]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	717b      	strb	r3, [r7, #5]
 8002d92:	4613      	mov	r3, r2
 8002d94:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8002d96:	797a      	ldrb	r2, [r7, #5]
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bfb8      	it	lt
 8002da0:	425b      	neglt	r3, r3
 8002da2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002da4:	793a      	ldrb	r2, [r7, #4]
 8002da6:	79bb      	ldrb	r3, [r7, #6]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	bfb8      	it	lt
 8002dae:	425b      	neglt	r3, r3
 8002db0:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8002db2:	79fa      	ldrb	r2, [r7, #7]
 8002db4:	797b      	ldrb	r3, [r7, #5]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d201      	bcs.n	8002dbe <ssd1306_Line+0x46>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e001      	b.n	8002dc2 <ssd1306_Line+0x4a>
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002dc4:	79ba      	ldrb	r2, [r7, #6]
 8002dc6:	793b      	ldrb	r3, [r7, #4]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d201      	bcs.n	8002dd0 <ssd1306_Line+0x58>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e001      	b.n	8002dd4 <ssd1306_Line+0x5c>
 8002dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd4:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8002dde:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002de2:	7939      	ldrb	r1, [r7, #4]
 8002de4:	797b      	ldrb	r3, [r7, #5]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fea4 	bl	8002b34 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002dec:	e024      	b.n	8002e38 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002dee:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002df2:	79b9      	ldrb	r1, [r7, #6]
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fe9c 	bl	8002b34 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	425b      	negs	r3, r3
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	dd08      	ble.n	8002e1e <ssd1306_Line+0xa6>
            error -= deltaY;
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	da08      	bge.n	8002e38 <ssd1306_Line+0xc0>
            error += deltaX;
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	79bb      	ldrb	r3, [r7, #6]
 8002e34:	4413      	add	r3, r2
 8002e36:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002e38:	79fa      	ldrb	r2, [r7, #7]
 8002e3a:	797b      	ldrb	r3, [r7, #5]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d1d6      	bne.n	8002dee <ssd1306_Line+0x76>
 8002e40:	79ba      	ldrb	r2, [r7, #6]
 8002e42:	793b      	ldrb	r3, [r7, #4]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d1d2      	bne.n	8002dee <ssd1306_Line+0x76>
        }
    }
    return;
 8002e48:	bf00      	nop
}
 8002e4a:	3724      	adds	r7, #36	@ 0x24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd90      	pop	{r4, r7, pc}

08002e50 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002e50:	b590      	push	{r4, r7, lr}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	4604      	mov	r4, r0
 8002e58:	4608      	mov	r0, r1
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4623      	mov	r3, r4
 8002e60:	71fb      	strb	r3, [r7, #7]
 8002e62:	4603      	mov	r3, r0
 8002e64:	71bb      	strb	r3, [r7, #6]
 8002e66:	460b      	mov	r3, r1
 8002e68:	717b      	strb	r3, [r7, #5]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8002e6e:	79bc      	ldrb	r4, [r7, #6]
 8002e70:	797a      	ldrb	r2, [r7, #5]
 8002e72:	79b9      	ldrb	r1, [r7, #6]
 8002e74:	79f8      	ldrb	r0, [r7, #7]
 8002e76:	7e3b      	ldrb	r3, [r7, #24]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	4623      	mov	r3, r4
 8002e7c:	f7ff ff7c 	bl	8002d78 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8002e80:	793c      	ldrb	r4, [r7, #4]
 8002e82:	797a      	ldrb	r2, [r7, #5]
 8002e84:	79b9      	ldrb	r1, [r7, #6]
 8002e86:	7978      	ldrb	r0, [r7, #5]
 8002e88:	7e3b      	ldrb	r3, [r7, #24]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	4623      	mov	r3, r4
 8002e8e:	f7ff ff73 	bl	8002d78 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8002e92:	793c      	ldrb	r4, [r7, #4]
 8002e94:	79fa      	ldrb	r2, [r7, #7]
 8002e96:	7939      	ldrb	r1, [r7, #4]
 8002e98:	7978      	ldrb	r0, [r7, #5]
 8002e9a:	7e3b      	ldrb	r3, [r7, #24]
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	4623      	mov	r3, r4
 8002ea0:	f7ff ff6a 	bl	8002d78 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8002ea4:	79bc      	ldrb	r4, [r7, #6]
 8002ea6:	79fa      	ldrb	r2, [r7, #7]
 8002ea8:	7939      	ldrb	r1, [r7, #4]
 8002eaa:	79f8      	ldrb	r0, [r7, #7]
 8002eac:	7e3b      	ldrb	r3, [r7, #24]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4623      	mov	r3, r4
 8002eb2:	f7ff ff61 	bl	8002d78 <ssd1306_Line>

    return;
 8002eb6:	bf00      	nop
}
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd90      	pop	{r4, r7, pc}

08002ebe <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002ec8:	2381      	movs	r3, #129	@ 0x81
 8002eca:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fd54 	bl	800297c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fd50 	bl	800297c <ssd1306_WriteCommand>
}
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002ef4:	23af      	movs	r3, #175	@ 0xaf
 8002ef6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002ef8:	4b08      	ldr	r3, [pc, #32]	@ (8002f1c <ssd1306_SetDisplayOn+0x38>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	715a      	strb	r2, [r3, #5]
 8002efe:	e004      	b.n	8002f0a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002f00:	23ae      	movs	r3, #174	@ 0xae
 8002f02:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <ssd1306_SetDisplayOn+0x38>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fd35 	bl	800297c <ssd1306_WriteCommand>
}
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	2000057c 	.word	0x2000057c

08002f20 <memset>:
 8002f20:	4603      	mov	r3, r0
 8002f22:	4402      	add	r2, r0
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d100      	bne.n	8002f2a <memset+0xa>
 8002f28:	4770      	bx	lr
 8002f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f2e:	e7f9      	b.n	8002f24 <memset+0x4>

08002f30 <__libc_init_array>:
 8002f30:	b570      	push	{r4, r5, r6, lr}
 8002f32:	2600      	movs	r6, #0
 8002f34:	4d0c      	ldr	r5, [pc, #48]	@ (8002f68 <__libc_init_array+0x38>)
 8002f36:	4c0d      	ldr	r4, [pc, #52]	@ (8002f6c <__libc_init_array+0x3c>)
 8002f38:	1b64      	subs	r4, r4, r5
 8002f3a:	10a4      	asrs	r4, r4, #2
 8002f3c:	42a6      	cmp	r6, r4
 8002f3e:	d109      	bne.n	8002f54 <__libc_init_array+0x24>
 8002f40:	f000 f81a 	bl	8002f78 <_init>
 8002f44:	2600      	movs	r6, #0
 8002f46:	4d0a      	ldr	r5, [pc, #40]	@ (8002f70 <__libc_init_array+0x40>)
 8002f48:	4c0a      	ldr	r4, [pc, #40]	@ (8002f74 <__libc_init_array+0x44>)
 8002f4a:	1b64      	subs	r4, r4, r5
 8002f4c:	10a4      	asrs	r4, r4, #2
 8002f4e:	42a6      	cmp	r6, r4
 8002f50:	d105      	bne.n	8002f5e <__libc_init_array+0x2e>
 8002f52:	bd70      	pop	{r4, r5, r6, pc}
 8002f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f58:	4798      	blx	r3
 8002f5a:	3601      	adds	r6, #1
 8002f5c:	e7ee      	b.n	8002f3c <__libc_init_array+0xc>
 8002f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f62:	4798      	blx	r3
 8002f64:	3601      	adds	r6, #1
 8002f66:	e7f2      	b.n	8002f4e <__libc_init_array+0x1e>
 8002f68:	08004394 	.word	0x08004394
 8002f6c:	08004394 	.word	0x08004394
 8002f70:	08004394 	.word	0x08004394
 8002f74:	08004398 	.word	0x08004398

08002f78 <_init>:
 8002f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7a:	bf00      	nop
 8002f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7e:	bc08      	pop	{r3}
 8002f80:	469e      	mov	lr, r3
 8002f82:	4770      	bx	lr

08002f84 <_fini>:
 8002f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f86:	bf00      	nop
 8002f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8a:	bc08      	pop	{r3}
 8002f8c:	469e      	mov	lr, r3
 8002f8e:	4770      	bx	lr
